
nucleo_timer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003f90  08003f90  00004f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004000  08004000  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004000  08004000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004008  08004008  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004008  08004008  00005008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800400c  0800400c  0000500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004010  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08004078  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004078  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dad5  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa1  00000000  00000000  00013b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00015b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  00016840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b79  00000000  00000000  00017288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef60  00000000  00000000  00039e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a19  00000000  00000000  00048d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b77a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  0011b7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f78 	.word	0x08003f78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003f78 	.word	0x08003f78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d002      	beq.n	80005b8 <_write+0x18>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d111      	bne.n	80005dc <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c0:	68b9      	ldr	r1, [r7, #8]
 80005c2:	4809      	ldr	r0, [pc, #36]	@ (80005e8 <_write+0x48>)
 80005c4:	f002 f98e 	bl	80028e4 <HAL_UART_Transmit>
 80005c8:	4603      	mov	r3, r0
 80005ca:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80005cc:	7dfb      	ldrb	r3, [r7, #23]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d101      	bne.n	80005d6 <_write+0x36>
      return len;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	e004      	b.n	80005e0 <_write+0x40>
    else
      return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005da:	e001      	b.n	80005e0 <_write+0x40>
  }
  return -1;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000cc 	.word	0x200000cc

080005ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005f4:	2120      	movs	r1, #32
 80005f6:	4803      	ldr	r0, [pc, #12]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80005f8:	f000 fe61 	bl	80012be <HAL_GPIO_TogglePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020000 	.word	0x40020000

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fb25 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f82f 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f917 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f8eb 	bl	80007f4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800061e:	f000 f89b 	bl	8000758 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000622:	4810      	ldr	r0, [pc, #64]	@ (8000664 <main+0x5c>)
 8000624:	f001 fcee 	bl	8002004 <HAL_TIM_Base_Start_IT>
  printf("Starting nucleo_timer1\n");
 8000628:	480f      	ldr	r0, [pc, #60]	@ (8000668 <main+0x60>)
 800062a:	f002 fe41 	bl	80032b0 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t now = 0, next_tick = TICK_DELAY;
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000636:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  now = HAL_GetTick();
 8000638:	f000 fb76 	bl	8000d28 <HAL_GetTick>
 800063c:	6038      	str	r0, [r7, #0]

	  if (now >= next_tick){
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	d3f8      	bcc.n	8000638 <main+0x30>
		  printf("Tick %lu\n",now / 1000);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	4a08      	ldr	r2, [pc, #32]	@ (800066c <main+0x64>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	099b      	lsrs	r3, r3, #6
 8000650:	4619      	mov	r1, r3
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <main+0x68>)
 8000654:	f002 fdc4 	bl	80031e0 <iprintf>
		  next_tick = now + TICK_DELAY;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800065e:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 8000660:	e7ea      	b.n	8000638 <main+0x30>
 8000662:	bf00      	nop
 8000664:	20000084 	.word	0x20000084
 8000668:	08003f90 	.word	0x08003f90
 800066c:	10624dd3 	.word	0x10624dd3
 8000670:	08003fa8 	.word	0x08003fa8

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2234      	movs	r2, #52	@ 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fef4 	bl	8003470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <SystemClock_Config+0xdc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemClock_Config+0xdc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <SystemClock_Config+0xdc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <SystemClock_Config+0xe0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <SystemClock_Config+0xe0>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006e8:	23b4      	movs	r3, #180	@ 0xb4
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f993 	bl	8001a28 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000708:	f000 f90c 	bl	8000924 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800070c:	f000 fdf2 	bl	80012f4 <HAL_PWREx_EnableOverDrive>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000716:	f000 f905 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fe2b 	bl	8001394 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000744:	f000 f8ee 	bl	8000924 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	@ 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_TIM4_Init+0x94>)
 8000776:	4a1e      	ldr	r2, [pc, #120]	@ (80007f0 <MX_TIM4_Init+0x98>)
 8000778:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_TIM4_Init+0x94>)
 800077c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000780:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_TIM4_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_TIM4_Init+0x94>)
 800078a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800078e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_TIM4_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_TIM4_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800079c:	4813      	ldr	r0, [pc, #76]	@ (80007ec <MX_TIM4_Init+0x94>)
 800079e:	f001 fbe1 	bl	8001f64 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80007a8:	f000 f8bc 	bl	8000924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <MX_TIM4_Init+0x94>)
 80007ba:	f001 fd83 	bl	80022c4 <HAL_TIM_ConfigClockSource>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80007c4:	f000 f8ae 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_TIM4_Init+0x94>)
 80007d6:	f001 ffa5 	bl	8002724 <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f000 f8a0 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084
 80007f0:	40000800 	.word	0x40000800

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f002 f80a 	bl	8002844 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f875 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000cc 	.word	0x200000cc
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a25      	ldr	r2, [pc, #148]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a1e      	ldr	r2, [pc, #120]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008d4:	f000 fcda 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <MX_GPIO_Init+0xd8>)
 80008f0:	f000 fb38 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_GPIO_Init+0xd4>)
 800090c:	f000 fb2a 	bl	8000f64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020800 	.word	0x40020800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fab6 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <HAL_TIM_Base_MspInit+0x48>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d115      	bne.n	80009be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <HAL_TIM_Base_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <HAL_TIM_Base_MspInit+0x4c>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <HAL_TIM_Base_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	201e      	movs	r0, #30
 80009b4:	f000 fa9f 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009b8:	201e      	movs	r0, #30
 80009ba:	f000 fab8 	bl	8000f2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40000800 	.word	0x40000800
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <HAL_UART_MspInit+0x84>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12b      	bne.n	8000a4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_UART_MspInit+0x88>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <HAL_UART_MspInit+0x88>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_UART_MspInit+0x88>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <HAL_UART_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a10      	ldr	r2, [pc, #64]	@ (8000a58 <HAL_UART_MspInit+0x88>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_UART_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <HAL_UART_MspInit+0x8c>)
 8000a46:	f000 fa8d 	bl	8000f64 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f923 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <TIM4_IRQHandler+0x10>)
 8000ac6:	f001 fb0d 	bl	80020e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000084 	.word	0x20000084

08000ad4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e00a      	b.n	8000afc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4601      	mov	r1, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf0      	blt.n	8000ae6 <_read+0x12>
  }

  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f002 fcb0 	bl	800350c <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20020000 	.word	0x20020000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000114 	.word	0x20000114
 8000be0:	20000268 	.word	0x20000268

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f002 fc6f 	bl	8003518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fce5 	bl	8000608 <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c4c:	08004010 	.word	0x08004010
  ldr r2, =_sbss
 8000c50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c54:	20000268 	.word	0x20000268

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f92b 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe4e 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f943 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 f90b 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000118 	.word	0x20000118

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000118 	.word	0x20000118

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	@ (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	@ (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	@ 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff29 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff3e 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff8e 	bl	8000e34 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5d 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff31 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa2 	bl	8000e9c <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e165      	b.n	800124c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8154 	bne.w	8001246 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d130      	bne.n	8001018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 0201 	and.w	r2, r3, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d017      	beq.n	8001054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80ae 	beq.w	8001246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a58      	ldr	r2, [pc, #352]	@ (8001268 <HAL_GPIO_Init+0x304>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4f      	ldr	r2, [pc, #316]	@ (800126c <HAL_GPIO_Init+0x308>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4e      	ldr	r2, [pc, #312]	@ (8001270 <HAL_GPIO_Init+0x30c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x216>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4d      	ldr	r2, [pc, #308]	@ (8001274 <HAL_GPIO_Init+0x310>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4c      	ldr	r2, [pc, #304]	@ (8001278 <HAL_GPIO_Init+0x314>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x20e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4b      	ldr	r2, [pc, #300]	@ (800127c <HAL_GPIO_Init+0x318>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x20a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4a      	ldr	r2, [pc, #296]	@ (8001280 <HAL_GPIO_Init+0x31c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x206>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a49      	ldr	r2, [pc, #292]	@ (8001284 <HAL_GPIO_Init+0x320>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x202>
 8001162:	2306      	movs	r3, #6
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x21c>
 8001166:	2307      	movs	r3, #7
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x21c>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x21c>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x21c>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x21c>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x21c>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x21c>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	@ (8001268 <HAL_GPIO_Init+0x304>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b3a      	ldr	r3, [pc, #232]	@ (8001288 <HAL_GPIO_Init+0x324>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a31      	ldr	r2, [pc, #196]	@ (8001288 <HAL_GPIO_Init+0x324>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <HAL_GPIO_Init+0x324>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a26      	ldr	r2, [pc, #152]	@ (8001288 <HAL_GPIO_Init+0x324>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_GPIO_Init+0x324>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <HAL_GPIO_Init+0x324>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <HAL_GPIO_Init+0x324>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001240:	4a11      	ldr	r2, [pc, #68]	@ (8001288 <HAL_GPIO_Init+0x324>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae96 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40021400 	.word	0x40021400
 8001284:	40021800 	.word	0x40021800
 8001288:	40013c00 	.word	0x40013c00

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d0:	887a      	ldrh	r2, [r7, #2]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43d9      	mvns	r1, r3
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	400b      	ands	r3, r1
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_PWREx_EnableOverDrive+0x90>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	4a1f      	ldr	r2, [pc, #124]	@ (8001384 <HAL_PWREx_EnableOverDrive+0x90>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	@ 0x40
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <HAL_PWREx_EnableOverDrive+0x90>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_PWREx_EnableOverDrive+0x94>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff fd02 	bl	8000d28 <HAL_GetTick>
 8001324:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001326:	e009      	b.n	800133c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001328:	f7ff fcfe 	bl	8000d28 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001336:	d901      	bls.n	800133c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e01f      	b.n	800137c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_PWREx_EnableOverDrive+0x98>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001348:	d1ee      	bne.n	8001328 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001350:	f7ff fcea 	bl	8000d28 <HAL_GetTick>
 8001354:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001356:	e009      	b.n	800136c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001358:	f7ff fce6 	bl	8000d28 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001366:	d901      	bls.n	800136c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e007      	b.n	800137c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_PWREx_EnableOverDrive+0x98>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001378:	d1ee      	bne.n	8001358 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	420e0040 	.word	0x420e0040
 800138c:	40007000 	.word	0x40007000
 8001390:	420e0044 	.word	0x420e0044

08001394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0cc      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a8:	4b68      	ldr	r3, [pc, #416]	@ (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d90c      	bls.n	80013d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b65      	ldr	r3, [pc, #404]	@ (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b63      	ldr	r3, [pc, #396]	@ (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0b8      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d020      	beq.n	800141e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e8:	4b59      	ldr	r3, [pc, #356]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a58      	ldr	r2, [pc, #352]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001400:	4b53      	ldr	r3, [pc, #332]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a52      	ldr	r2, [pc, #328]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800140a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140c:	4b50      	ldr	r3, [pc, #320]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	494d      	ldr	r1, [pc, #308]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	4313      	orrs	r3, r2
 800141c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d044      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b47      	ldr	r3, [pc, #284]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d119      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d003      	beq.n	8001452 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144e:	2b03      	cmp	r3, #3
 8001450:	d107      	bne.n	8001462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	4b3f      	ldr	r3, [pc, #252]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d109      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001462:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e067      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001472:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f023 0203 	bic.w	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4934      	ldr	r1, [pc, #208]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	4313      	orrs	r3, r2
 8001482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001484:	f7ff fc50 	bl	8000d28 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148c:	f7ff fc4c 	bl	8000d28 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e04f      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 020c 	and.w	r2, r3, #12
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d1eb      	bne.n	800148c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b4:	4b25      	ldr	r3, [pc, #148]	@ (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d20c      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b22      	ldr	r3, [pc, #136]	@ (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e032      	b.n	8001542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4916      	ldr	r1, [pc, #88]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	490e      	ldr	r1, [pc, #56]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151a:	f000 f855 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	490a      	ldr	r1, [pc, #40]	@ (8001554 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	4a09      	ldr	r2, [pc, #36]	@ (8001558 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_RCC_ClockConfig+0x1c8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fbb0 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023c00 	.word	0x40023c00
 8001550:	40023800 	.word	0x40023800
 8001554:	08003fb4 	.word	0x08003fb4
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_RCC_GetHCLKFreq+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000

08001578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800157c:	f7ff fff0 	bl	8001560 <HAL_RCC_GetHCLKFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	0a9b      	lsrs	r3, r3, #10
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	4903      	ldr	r1, [pc, #12]	@ (800159c <HAL_RCC_GetPCLK1Freq+0x24>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	08003fc4 	.word	0x08003fc4

080015a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015a4:	f7ff ffdc 	bl	8001560 <HAL_RCC_GetHCLKFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	0b5b      	lsrs	r3, r3, #13
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	4903      	ldr	r1, [pc, #12]	@ (80015c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	08003fc4 	.word	0x08003fc4

080015c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b0ae      	sub	sp, #184	@ 0xb8
 80015ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ee:	4bcb      	ldr	r3, [pc, #812]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	f200 8206 	bhi.w	8001a08 <HAL_RCC_GetSysClockFreq+0x440>
 80015fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001604 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001602:	bf00      	nop
 8001604:	08001639 	.word	0x08001639
 8001608:	08001a09 	.word	0x08001a09
 800160c:	08001a09 	.word	0x08001a09
 8001610:	08001a09 	.word	0x08001a09
 8001614:	08001641 	.word	0x08001641
 8001618:	08001a09 	.word	0x08001a09
 800161c:	08001a09 	.word	0x08001a09
 8001620:	08001a09 	.word	0x08001a09
 8001624:	08001649 	.word	0x08001649
 8001628:	08001a09 	.word	0x08001a09
 800162c:	08001a09 	.word	0x08001a09
 8001630:	08001a09 	.word	0x08001a09
 8001634:	08001839 	.word	0x08001839
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4bb9      	ldr	r3, [pc, #740]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800163e:	e1e7      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001640:	4bb8      	ldr	r3, [pc, #736]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001646:	e1e3      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001648:	4bb4      	ldr	r3, [pc, #720]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001650:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001654:	4bb1      	ldr	r3, [pc, #708]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d071      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001660:	4bae      	ldr	r3, [pc, #696]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800166c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001678:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001686:	4622      	mov	r2, r4
 8001688:	462b      	mov	r3, r5
 800168a:	f04f 0000 	mov.w	r0, #0
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	0159      	lsls	r1, r3, #5
 8001694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001698:	0150      	lsls	r0, r2, #5
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4621      	mov	r1, r4
 80016a0:	1a51      	subs	r1, r2, r1
 80016a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80016a4:	4629      	mov	r1, r5
 80016a6:	eb63 0301 	sbc.w	r3, r3, r1
 80016aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80016b8:	4649      	mov	r1, r9
 80016ba:	018b      	lsls	r3, r1, #6
 80016bc:	4641      	mov	r1, r8
 80016be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016c2:	4641      	mov	r1, r8
 80016c4:	018a      	lsls	r2, r1, #6
 80016c6:	4641      	mov	r1, r8
 80016c8:	1a51      	subs	r1, r2, r1
 80016ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016cc:	4649      	mov	r1, r9
 80016ce:	eb63 0301 	sbc.w	r3, r3, r1
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80016e0:	4649      	mov	r1, r9
 80016e2:	00cb      	lsls	r3, r1, #3
 80016e4:	4641      	mov	r1, r8
 80016e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ea:	4641      	mov	r1, r8
 80016ec:	00ca      	lsls	r2, r1, #3
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	4603      	mov	r3, r0
 80016f4:	4622      	mov	r2, r4
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016fa:	462b      	mov	r3, r5
 80016fc:	460a      	mov	r2, r1
 80016fe:	eb42 0303 	adc.w	r3, r2, r3
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001710:	4629      	mov	r1, r5
 8001712:	024b      	lsls	r3, r1, #9
 8001714:	4621      	mov	r1, r4
 8001716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800171a:	4621      	mov	r1, r4
 800171c:	024a      	lsls	r2, r1, #9
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001726:	2200      	movs	r2, #0
 8001728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800172c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001730:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001734:	f7fe fdbc 	bl	80002b0 <__aeabi_uldivmod>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4613      	mov	r3, r2
 800173e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001742:	e067      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001744:	4b75      	ldr	r3, [pc, #468]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	2200      	movs	r2, #0
 800174c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001750:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001754:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800175e:	2300      	movs	r3, #0
 8001760:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001762:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001766:	4622      	mov	r2, r4
 8001768:	462b      	mov	r3, r5
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4621      	mov	r1, r4
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001784:	4629      	mov	r1, r5
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001798:	4649      	mov	r1, r9
 800179a:	018b      	lsls	r3, r1, #6
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a2:	4641      	mov	r1, r8
 80017a4:	018a      	lsls	r2, r1, #6
 80017a6:	4641      	mov	r1, r8
 80017a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80017ac:	4649      	mov	r1, r9
 80017ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017c6:	4692      	mov	sl, r2
 80017c8:	469b      	mov	fp, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	eb1a 0303 	adds.w	r3, sl, r3
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	462b      	mov	r3, r5
 80017d4:	eb4b 0303 	adc.w	r3, fp, r3
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017e6:	4629      	mov	r1, r5
 80017e8:	028b      	lsls	r3, r1, #10
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f0:	4621      	mov	r1, r4
 80017f2:	028a      	lsls	r2, r1, #10
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017fc:	2200      	movs	r2, #0
 80017fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001800:	677a      	str	r2, [r7, #116]	@ 0x74
 8001802:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001806:	f7fe fd53 	bl	80002b0 <__aeabi_uldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4613      	mov	r3, r2
 8001810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001814:	4b41      	ldr	r3, [pc, #260]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800182a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001836:	e0eb      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001844:	4b35      	ldr	r3, [pc, #212]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d06b      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001850:	4b32      	ldr	r3, [pc, #200]	@ (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	2200      	movs	r2, #0
 8001858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800185a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800185c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001862:	663b      	str	r3, [r7, #96]	@ 0x60
 8001864:	2300      	movs	r3, #0
 8001866:	667b      	str	r3, [r7, #100]	@ 0x64
 8001868:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800186c:	4622      	mov	r2, r4
 800186e:	462b      	mov	r3, r5
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	0159      	lsls	r1, r3, #5
 800187a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187e:	0150      	lsls	r0, r2, #5
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4621      	mov	r1, r4
 8001886:	1a51      	subs	r1, r2, r1
 8001888:	61b9      	str	r1, [r7, #24]
 800188a:	4629      	mov	r1, r5
 800188c:	eb63 0301 	sbc.w	r3, r3, r1
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800189e:	4659      	mov	r1, fp
 80018a0:	018b      	lsls	r3, r1, #6
 80018a2:	4651      	mov	r1, sl
 80018a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a8:	4651      	mov	r1, sl
 80018aa:	018a      	lsls	r2, r1, #6
 80018ac:	4651      	mov	r1, sl
 80018ae:	ebb2 0801 	subs.w	r8, r2, r1
 80018b2:	4659      	mov	r1, fp
 80018b4:	eb63 0901 	sbc.w	r9, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018cc:	4690      	mov	r8, r2
 80018ce:	4699      	mov	r9, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	eb18 0303 	adds.w	r3, r8, r3
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	462b      	mov	r3, r5
 80018da:	eb49 0303 	adc.w	r3, r9, r3
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018ec:	4629      	mov	r1, r5
 80018ee:	024b      	lsls	r3, r1, #9
 80018f0:	4621      	mov	r1, r4
 80018f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018f6:	4621      	mov	r1, r4
 80018f8:	024a      	lsls	r2, r1, #9
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001902:	2200      	movs	r2, #0
 8001904:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001906:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001908:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800190c:	f7fe fcd0 	bl	80002b0 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800191a:	e065      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x420>
 800191c:	40023800 	.word	0x40023800
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x458>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	2200      	movs	r2, #0
 8001930:	4618      	mov	r0, r3
 8001932:	4611      	mov	r1, r2
 8001934:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001938:	653b      	str	r3, [r7, #80]	@ 0x50
 800193a:	2300      	movs	r3, #0
 800193c:	657b      	str	r3, [r7, #84]	@ 0x54
 800193e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001942:	4642      	mov	r2, r8
 8001944:	464b      	mov	r3, r9
 8001946:	f04f 0000 	mov.w	r0, #0
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	0159      	lsls	r1, r3, #5
 8001950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001954:	0150      	lsls	r0, r2, #5
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4641      	mov	r1, r8
 800195c:	1a51      	subs	r1, r2, r1
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	4649      	mov	r1, r9
 8001962:	eb63 0301 	sbc.w	r3, r3, r1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001974:	4659      	mov	r1, fp
 8001976:	018b      	lsls	r3, r1, #6
 8001978:	4651      	mov	r1, sl
 800197a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800197e:	4651      	mov	r1, sl
 8001980:	018a      	lsls	r2, r1, #6
 8001982:	4651      	mov	r1, sl
 8001984:	1a54      	subs	r4, r2, r1
 8001986:	4659      	mov	r1, fp
 8001988:	eb63 0501 	sbc.w	r5, r3, r1
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	00eb      	lsls	r3, r5, #3
 8001996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800199a:	00e2      	lsls	r2, r4, #3
 800199c:	4614      	mov	r4, r2
 800199e:	461d      	mov	r5, r3
 80019a0:	4643      	mov	r3, r8
 80019a2:	18e3      	adds	r3, r4, r3
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	464b      	mov	r3, r9
 80019a8:	eb45 0303 	adc.w	r3, r5, r3
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ba:	4629      	mov	r1, r5
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c4:	4621      	mov	r1, r4
 80019c6:	028a      	lsls	r2, r1, #10
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019d0:	2200      	movs	r2, #0
 80019d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019da:	f7fe fc69 	bl	80002b0 <__aeabi_uldivmod>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4613      	mov	r3, r2
 80019e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x458>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	0f1b      	lsrs	r3, r3, #28
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80019f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a06:	e003      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	37b8      	adds	r7, #184	@ 0xb8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400

08001a28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e28d      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8083 	beq.w	8001b4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a48:	4b94      	ldr	r3, [pc, #592]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d019      	beq.n	8001a88 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a54:	4b91      	ldr	r3, [pc, #580]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a60:	4b8e      	ldr	r3, [pc, #568]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a6c:	d00c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d112      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7a:	4b88      	ldr	r3, [pc, #544]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	4b84      	ldr	r3, [pc, #528]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d05b      	beq.n	8001b4c <HAL_RCC_OscConfig+0x124>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d157      	bne.n	8001b4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e25a      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x90>
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7b      	ldr	r2, [pc, #492]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xb4>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b73      	ldr	r3, [pc, #460]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a72      	ldr	r2, [pc, #456]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001adc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6b      	ldr	r2, [pc, #428]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f914 	bl	8000d28 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff f910 	bl	8000d28 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e21f      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b61      	ldr	r3, [pc, #388]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xdc>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f900 	bl	8000d28 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f8fc 	bl	8000d28 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e20b      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b57      	ldr	r3, [pc, #348]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x104>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06f      	beq.n	8001c3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b5a:	4b50      	ldr	r3, [pc, #320]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d017      	beq.n	8001b96 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b66:	4b4d      	ldr	r3, [pc, #308]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b72:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b44      	ldr	r3, [pc, #272]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x186>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1d3      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4937      	ldr	r1, [pc, #220]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <HAL_RCC_OscConfig+0x278>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f8a9 	bl	8000d28 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f8a5 	bl	8000d28 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1b4      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4925      	ldr	r1, [pc, #148]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <HAL_RCC_OscConfig+0x278>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f888 	bl	8000d28 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f884 	bl	8000d28 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e193      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d036      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f868 	bl	8000d28 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f864 	bl	8000d28 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e173      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x234>
 8001c7a:	e01b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f851 	bl	8000d28 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	e00e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f84d 	bl	8000d28 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e15c      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470000 	.word	0x42470000
 8001ca4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b8a      	ldr	r3, [pc, #552]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ea      	bne.n	8001c8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b83      	ldr	r3, [pc, #524]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a7e      	ldr	r2, [pc, #504]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b79      	ldr	r3, [pc, #484]	@ (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b76      	ldr	r3, [pc, #472]	@ (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a75      	ldr	r2, [pc, #468]	@ (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f80d 	bl	8000d28 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff f809 	bl	8000d28 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e118      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x31e>
 8001d38:	4b66      	ldr	r3, [pc, #408]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a65      	ldr	r2, [pc, #404]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x358>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x340>
 8001d4e:	4b61      	ldr	r3, [pc, #388]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d52:	4a60      	ldr	r2, [pc, #384]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x358>
 8001d68:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a59      	ldr	r2, [pc, #356]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	4b57      	ldr	r3, [pc, #348]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a56      	ldr	r2, [pc, #344]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7fe ffce 	bl	8000d28 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7fe ffca 	bl	8000d28 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0d7      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x368>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7fe ffb8 	bl	8000d28 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7fe ffb4 	bl	8000d28 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0c1      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b40      	ldr	r3, [pc, #256]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80ad 	beq.w	8001f54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfa:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d060      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d145      	bne.n	8001e9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff88 	bl	8000d28 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe ff84 	bl	8000d28 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e093      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	071b      	lsls	r3, r3, #28
 8001e66:	491b      	ldr	r1, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7fe ff59 	bl	8000d28 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7fe ff55 	bl	8000d28 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e064      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x452>
 8001e98:	e05c      	b.n	8001f54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7fe ff42 	bl	8000d28 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe ff3e 	bl	8000d28 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e04d      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x480>
 8001ec6:	e045      	b.n	8001f54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e040      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <HAL_RCC_OscConfig+0x538>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d030      	beq.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d129      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d122      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d119      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d10f      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fcf8 	bl	8000980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 fa7e 	bl	80024a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d001      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e04e      	b.n	80020ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a23      	ldr	r2, [pc, #140]	@ (80020c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x80>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002046:	d01d      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x80>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <HAL_TIM_Base_Start_IT+0xc8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x80>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1e      	ldr	r2, [pc, #120]	@ (80020d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x80>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x80>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x80>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_TIM_Base_Start_IT+0x80>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a18      	ldr	r2, [pc, #96]	@ (80020e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d010      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a6:	e007      	b.n	80020b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40010400 	.word	0x40010400
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40001800 	.word	0x40001800

080020e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d020      	beq.n	8002148 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0202 	mvn.w	r2, #2
 8002118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f999 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f98b 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f99c 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d020      	beq.n	8002194 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0204 	mvn.w	r2, #4
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f973 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f965 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f976 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d020      	beq.n	80021e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0208 	mvn.w	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f94d 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f93f 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f950 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d020      	beq.n	800222c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01b      	beq.n	800222c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0210 	mvn.w	r2, #16
 80021fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2208      	movs	r2, #8
 8002202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f927 	bl	8002466 <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f919 	bl	8002452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f92a 	bl	800247a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0201 	mvn.w	r2, #1
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe f9ce 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00c      	beq.n	8002274 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fade 	bl	8002830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f8fb 	bl	800248e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0220 	mvn.w	r2, #32
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fab0 	bl	800281c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_TIM_ConfigClockSource+0x1c>
 80022dc:	2302      	movs	r3, #2
 80022de:	e0b4      	b.n	800244a <HAL_TIM_ConfigClockSource+0x186>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002318:	d03e      	beq.n	8002398 <HAL_TIM_ConfigClockSource+0xd4>
 800231a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800231e:	f200 8087 	bhi.w	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002326:	f000 8086 	beq.w	8002436 <HAL_TIM_ConfigClockSource+0x172>
 800232a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800232e:	d87f      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002330:	2b70      	cmp	r3, #112	@ 0x70
 8002332:	d01a      	beq.n	800236a <HAL_TIM_ConfigClockSource+0xa6>
 8002334:	2b70      	cmp	r3, #112	@ 0x70
 8002336:	d87b      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002338:	2b60      	cmp	r3, #96	@ 0x60
 800233a:	d050      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x11a>
 800233c:	2b60      	cmp	r3, #96	@ 0x60
 800233e:	d877      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002340:	2b50      	cmp	r3, #80	@ 0x50
 8002342:	d03c      	beq.n	80023be <HAL_TIM_ConfigClockSource+0xfa>
 8002344:	2b50      	cmp	r3, #80	@ 0x50
 8002346:	d873      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002348:	2b40      	cmp	r3, #64	@ 0x40
 800234a:	d058      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x13a>
 800234c:	2b40      	cmp	r3, #64	@ 0x40
 800234e:	d86f      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b30      	cmp	r3, #48	@ 0x30
 8002352:	d064      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 8002354:	2b30      	cmp	r3, #48	@ 0x30
 8002356:	d86b      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b20      	cmp	r3, #32
 800235a:	d060      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 800235c:	2b20      	cmp	r3, #32
 800235e:	d867      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b00      	cmp	r3, #0
 8002362:	d05c      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 8002364:	2b10      	cmp	r3, #16
 8002366:	d05a      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 8002368:	e062      	b.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800237a:	f000 f9b3 	bl	80026e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800238c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	609a      	str	r2, [r3, #8]
      break;
 8002396:	e04f      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023a8:	f000 f99c 	bl	80026e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023ba:	609a      	str	r2, [r3, #8]
      break;
 80023bc:	e03c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ca:	461a      	mov	r2, r3
 80023cc:	f000 f910 	bl	80025f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2150      	movs	r1, #80	@ 0x50
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f969 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 80023dc:	e02c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 f92f 	bl	800264e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2160      	movs	r1, #96	@ 0x60
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f959 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 80023fc:	e01c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	461a      	mov	r2, r3
 800240c:	f000 f8f0 	bl	80025f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2140      	movs	r1, #64	@ 0x40
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f949 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 800241c:	e00c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f000 f940 	bl	80026ae <TIM_ITRx_SetConfig>
      break;
 800242e:	e003      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      break;
 8002434:	e000      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a43      	ldr	r2, [pc, #268]	@ (80025c4 <TIM_Base_SetConfig+0x120>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c2:	d00f      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a40      	ldr	r2, [pc, #256]	@ (80025c8 <TIM_Base_SetConfig+0x124>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00b      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3f      	ldr	r2, [pc, #252]	@ (80025cc <TIM_Base_SetConfig+0x128>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3e      	ldr	r2, [pc, #248]	@ (80025d0 <TIM_Base_SetConfig+0x12c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d003      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3d      	ldr	r2, [pc, #244]	@ (80025d4 <TIM_Base_SetConfig+0x130>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d108      	bne.n	80024f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <TIM_Base_SetConfig+0x120>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002504:	d027      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a2f      	ldr	r2, [pc, #188]	@ (80025c8 <TIM_Base_SetConfig+0x124>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d023      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a2e      	ldr	r2, [pc, #184]	@ (80025cc <TIM_Base_SetConfig+0x128>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <TIM_Base_SetConfig+0x12c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a2c      	ldr	r2, [pc, #176]	@ (80025d4 <TIM_Base_SetConfig+0x130>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d017      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2b      	ldr	r2, [pc, #172]	@ (80025d8 <TIM_Base_SetConfig+0x134>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2a      	ldr	r2, [pc, #168]	@ (80025dc <TIM_Base_SetConfig+0x138>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00f      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a29      	ldr	r2, [pc, #164]	@ (80025e0 <TIM_Base_SetConfig+0x13c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a28      	ldr	r2, [pc, #160]	@ (80025e4 <TIM_Base_SetConfig+0x140>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a27      	ldr	r2, [pc, #156]	@ (80025e8 <TIM_Base_SetConfig+0x144>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a26      	ldr	r2, [pc, #152]	@ (80025ec <TIM_Base_SetConfig+0x148>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <TIM_Base_SetConfig+0x120>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d003      	beq.n	8002596 <TIM_Base_SetConfig+0xf2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <TIM_Base_SetConfig+0x130>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d103      	bne.n	800259e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f043 0204 	orr.w	r2, r3, #4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40010400 	.word	0x40010400
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400
 80025e0:	40014800 	.word	0x40014800
 80025e4:	40001800 	.word	0x40001800
 80025e8:	40001c00 	.word	0x40001c00
 80025ec:	40002000 	.word	0x40002000

080025f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 0201 	bic.w	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800261a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f023 030a 	bic.w	r3, r3, #10
 800262c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	621a      	str	r2, [r3, #32]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f023 0210 	bic.w	r2, r3, #16
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	031b      	lsls	r3, r3, #12
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800268a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f043 0307 	orr.w	r3, r3, #7
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	431a      	orrs	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	609a      	str	r2, [r3, #8]
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002738:	2302      	movs	r3, #2
 800273a:	e05a      	b.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a21      	ldr	r2, [pc, #132]	@ (8002800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002788:	d01d      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1b      	ldr	r2, [pc, #108]	@ (8002808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1a      	ldr	r2, [pc, #104]	@ (800280c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	@ (8002810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a17      	ldr	r2, [pc, #92]	@ (8002814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a15      	ldr	r2, [pc, #84]	@ (8002818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10c      	bne.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40010400 	.word	0x40010400
 8002814:	40014000 	.word	0x40014000
 8002818:	40001800 	.word	0x40001800

0800281c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e042      	b.n	80028dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe f8b0 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	@ 0x24
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f973 	bl	8002b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800289c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b20      	cmp	r3, #32
 8002902:	d175      	bne.n	80029f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_UART_Transmit+0x2c>
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e06e      	b.n	80029f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2221      	movs	r2, #33	@ 0x21
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002922:	f7fe fa01 	bl	8000d28 <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800293c:	d108      	bne.n	8002950 <HAL_UART_Transmit+0x6c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	e003      	b.n	8002958 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002958:	e02e      	b.n	80029b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	2180      	movs	r1, #128	@ 0x80
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f848 	bl	80029fa <UART_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e03a      	b.n	80029f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10b      	bne.n	800299a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	3302      	adds	r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	e007      	b.n	80029aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	3301      	adds	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1cb      	bne.n	800295a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2140      	movs	r1, #64	@ 0x40
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f814 	bl	80029fa <UART_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e006      	b.n	80029f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0a:	e03b      	b.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a12:	d037      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a14:	f7fe f988 	bl	8000d28 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	6a3a      	ldr	r2, [r7, #32]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d302      	bcc.n	8002a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e03a      	b.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d023      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b80      	cmp	r3, #128	@ 0x80
 8002a40:	d020      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b40      	cmp	r3, #64	@ 0x40
 8002a46:	d01d      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d116      	bne.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f81d 	bl	8002aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2208      	movs	r2, #8
 8002a76:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e00f      	b.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d0b4      	beq.n	8002a0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b095      	sub	sp, #84	@ 0x54
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abe:	e853 3f00 	ldrex	r3, [r3]
 8002ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ad4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e5      	bne.n	8002ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3314      	adds	r3, #20
 8002aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	e853 3f00 	ldrex	r3, [r3]
 8002af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3314      	adds	r3, #20
 8002b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b10:	e841 2300 	strex	r3, r2, [r1]
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e5      	bne.n	8002ae8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d119      	bne.n	8002b58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f023 0310 	bic.w	r3, r3, #16
 8002b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b44:	61ba      	str	r2, [r7, #24]
 8002b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	6979      	ldr	r1, [r7, #20]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	613b      	str	r3, [r7, #16]
   return(result);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e5      	bne.n	8002b24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b66:	bf00      	nop
 8002b68:	3754      	adds	r7, #84	@ 0x54
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b78:	b0c0      	sub	sp, #256	@ 0x100
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	68d9      	ldr	r1, [r3, #12]
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	ea40 0301 	orr.w	r3, r0, r1
 8002b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002bcc:	f021 010c 	bic.w	r1, r1, #12
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bee:	6999      	ldr	r1, [r3, #24]
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	ea40 0301 	orr.w	r3, r0, r1
 8002bfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b8f      	ldr	r3, [pc, #572]	@ (8002e40 <UART_SetConfig+0x2cc>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d005      	beq.n	8002c14 <UART_SetConfig+0xa0>
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002e44 <UART_SetConfig+0x2d0>)
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d104      	bne.n	8002c1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c14:	f7fe fcc4 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8002c18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c1c:	e003      	b.n	8002c26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c1e:	f7fe fcab 	bl	8001578 <HAL_RCC_GetPCLK1Freq>
 8002c22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c30:	f040 810c 	bne.w	8002e4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c46:	4622      	mov	r2, r4
 8002c48:	462b      	mov	r3, r5
 8002c4a:	1891      	adds	r1, r2, r2
 8002c4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c4e:	415b      	adcs	r3, r3
 8002c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c56:	4621      	mov	r1, r4
 8002c58:	eb12 0801 	adds.w	r8, r2, r1
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	eb43 0901 	adc.w	r9, r3, r1
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c76:	4690      	mov	r8, r2
 8002c78:	4699      	mov	r9, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	eb18 0303 	adds.w	r3, r8, r3
 8002c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c84:	462b      	mov	r3, r5
 8002c86:	eb49 0303 	adc.w	r3, r9, r3
 8002c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	18db      	adds	r3, r3, r3
 8002ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ca8:	4613      	mov	r3, r2
 8002caa:	eb42 0303 	adc.w	r3, r2, r3
 8002cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002cb8:	f7fd fafa 	bl	80002b0 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <UART_SetConfig+0x2d4>)
 8002cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	011c      	lsls	r4, r3, #4
 8002cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002cd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002cdc:	4642      	mov	r2, r8
 8002cde:	464b      	mov	r3, r9
 8002ce0:	1891      	adds	r1, r2, r2
 8002ce2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ce4:	415b      	adcs	r3, r3
 8002ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cec:	4641      	mov	r1, r8
 8002cee:	eb12 0a01 	adds.w	sl, r2, r1
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d0c:	4692      	mov	sl, r2
 8002d0e:	469b      	mov	fp, r3
 8002d10:	4643      	mov	r3, r8
 8002d12:	eb1a 0303 	adds.w	r3, sl, r3
 8002d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	18db      	adds	r3, r3, r3
 8002d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d3e:	4613      	mov	r3, r2
 8002d40:	eb42 0303 	adc.w	r3, r2, r3
 8002d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d4e:	f7fd faaf 	bl	80002b0 <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <UART_SetConfig+0x2d4>)
 8002d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2264      	movs	r2, #100	@ 0x64
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	1acb      	subs	r3, r1, r3
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <UART_SetConfig+0x2d4>)
 8002d70:	fba3 2302 	umull	r2, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d7c:	441c      	add	r4, r3
 8002d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	1891      	adds	r1, r2, r2
 8002d96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d98:	415b      	adcs	r3, r3
 8002d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002da0:	4641      	mov	r1, r8
 8002da2:	1851      	adds	r1, r2, r1
 8002da4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002da6:	4649      	mov	r1, r9
 8002da8:	414b      	adcs	r3, r1
 8002daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002db8:	4659      	mov	r1, fp
 8002dba:	00cb      	lsls	r3, r1, #3
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	00ca      	lsls	r2, r1, #3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4642      	mov	r2, r8
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dd4:	464b      	mov	r3, r9
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	eb42 0303 	adc.w	r3, r2, r3
 8002ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002dec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002df0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002df4:	460b      	mov	r3, r1
 8002df6:	18db      	adds	r3, r3, r3
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e0a:	f7fd fa51 	bl	80002b0 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <UART_SetConfig+0x2d4>)
 8002e14:	fba3 1302 	umull	r1, r3, r3, r2
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	2164      	movs	r1, #100	@ 0x64
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	3332      	adds	r3, #50	@ 0x32
 8002e26:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <UART_SetConfig+0x2d4>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	f003 0207 	and.w	r2, r3, #7
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4422      	add	r2, r4
 8002e3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e3c:	e106      	b.n	800304c <UART_SetConfig+0x4d8>
 8002e3e:	bf00      	nop
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40011400 	.word	0x40011400
 8002e48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e5e:	4642      	mov	r2, r8
 8002e60:	464b      	mov	r3, r9
 8002e62:	1891      	adds	r1, r2, r2
 8002e64:	6239      	str	r1, [r7, #32]
 8002e66:	415b      	adcs	r3, r3
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e6e:	4641      	mov	r1, r8
 8002e70:	1854      	adds	r4, r2, r1
 8002e72:	4649      	mov	r1, r9
 8002e74:	eb43 0501 	adc.w	r5, r3, r1
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	00eb      	lsls	r3, r5, #3
 8002e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e86:	00e2      	lsls	r2, r4, #3
 8002e88:	4614      	mov	r4, r2
 8002e8a:	461d      	mov	r5, r3
 8002e8c:	4643      	mov	r3, r8
 8002e8e:	18e3      	adds	r3, r4, r3
 8002e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e94:	464b      	mov	r3, r9
 8002e96:	eb45 0303 	adc.w	r3, r5, r3
 8002e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002eaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002eba:	4629      	mov	r1, r5
 8002ebc:	008b      	lsls	r3, r1, #2
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	008a      	lsls	r2, r1, #2
 8002ec8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ecc:	f7fd f9f0 	bl	80002b0 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4b60      	ldr	r3, [pc, #384]	@ (8003058 <UART_SetConfig+0x4e4>)
 8002ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	011c      	lsls	r4, r3, #4
 8002ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ee8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002eec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	1891      	adds	r1, r2, r2
 8002ef6:	61b9      	str	r1, [r7, #24]
 8002ef8:	415b      	adcs	r3, r3
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f00:	4641      	mov	r1, r8
 8002f02:	1851      	adds	r1, r2, r1
 8002f04:	6139      	str	r1, [r7, #16]
 8002f06:	4649      	mov	r1, r9
 8002f08:	414b      	adcs	r3, r1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f18:	4659      	mov	r1, fp
 8002f1a:	00cb      	lsls	r3, r1, #3
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f22:	4651      	mov	r1, sl
 8002f24:	00ca      	lsls	r2, r1, #3
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4642      	mov	r2, r8
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f34:	464b      	mov	r3, r9
 8002f36:	460a      	mov	r2, r1
 8002f38:	eb42 0303 	adc.w	r3, r2, r3
 8002f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f58:	4649      	mov	r1, r9
 8002f5a:	008b      	lsls	r3, r1, #2
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f62:	4641      	mov	r1, r8
 8002f64:	008a      	lsls	r2, r1, #2
 8002f66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f6a:	f7fd f9a1 	bl	80002b0 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	4b38      	ldr	r3, [pc, #224]	@ (8003058 <UART_SetConfig+0x4e4>)
 8002f76:	fba3 2301 	umull	r2, r3, r3, r1
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2264      	movs	r2, #100	@ 0x64
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	1acb      	subs	r3, r1, r3
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	3332      	adds	r3, #50	@ 0x32
 8002f88:	4a33      	ldr	r2, [pc, #204]	@ (8003058 <UART_SetConfig+0x4e4>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f94:	441c      	add	r4, r3
 8002f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	415b      	adcs	r3, r3
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	1851      	adds	r1, r2, r1
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	4649      	mov	r1, r9
 8002fbc:	414b      	adcs	r3, r1
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fcc:	4659      	mov	r1, fp
 8002fce:	00cb      	lsls	r3, r1, #3
 8002fd0:	4651      	mov	r1, sl
 8002fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	00ca      	lsls	r2, r1, #3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	189b      	adds	r3, r3, r2
 8002fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	460a      	mov	r2, r1
 8002fea:	eb42 0303 	adc.w	r3, r2, r3
 8002fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ffa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003008:	4649      	mov	r1, r9
 800300a:	008b      	lsls	r3, r1, #2
 800300c:	4641      	mov	r1, r8
 800300e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003012:	4641      	mov	r1, r8
 8003014:	008a      	lsls	r2, r1, #2
 8003016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800301a:	f7fd f949 	bl	80002b0 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <UART_SetConfig+0x4e4>)
 8003024:	fba3 1302 	umull	r1, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	2164      	movs	r1, #100	@ 0x64
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	3332      	adds	r3, #50	@ 0x32
 8003036:	4a08      	ldr	r2, [pc, #32]	@ (8003058 <UART_SetConfig+0x4e4>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	f003 020f 	and.w	r2, r3, #15
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4422      	add	r2, r4
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003052:	46bd      	mov	sp, r7
 8003054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003058:	51eb851f 	.word	0x51eb851f

0800305c <std>:
 800305c:	2300      	movs	r3, #0
 800305e:	b510      	push	{r4, lr}
 8003060:	4604      	mov	r4, r0
 8003062:	e9c0 3300 	strd	r3, r3, [r0]
 8003066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800306a:	6083      	str	r3, [r0, #8]
 800306c:	8181      	strh	r1, [r0, #12]
 800306e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003070:	81c2      	strh	r2, [r0, #14]
 8003072:	6183      	str	r3, [r0, #24]
 8003074:	4619      	mov	r1, r3
 8003076:	2208      	movs	r2, #8
 8003078:	305c      	adds	r0, #92	@ 0x5c
 800307a:	f000 f9f9 	bl	8003470 <memset>
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <std+0x58>)
 8003080:	6263      	str	r3, [r4, #36]	@ 0x24
 8003082:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <std+0x5c>)
 8003084:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <std+0x60>)
 8003088:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <std+0x64>)
 800308c:	6323      	str	r3, [r4, #48]	@ 0x30
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <std+0x68>)
 8003090:	6224      	str	r4, [r4, #32]
 8003092:	429c      	cmp	r4, r3
 8003094:	d006      	beq.n	80030a4 <std+0x48>
 8003096:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800309a:	4294      	cmp	r4, r2
 800309c:	d002      	beq.n	80030a4 <std+0x48>
 800309e:	33d0      	adds	r3, #208	@ 0xd0
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d105      	bne.n	80030b0 <std+0x54>
 80030a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030ac:	f000 ba58 	b.w	8003560 <__retarget_lock_init_recursive>
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	bf00      	nop
 80030b4:	080032c1 	.word	0x080032c1
 80030b8:	080032e3 	.word	0x080032e3
 80030bc:	0800331b 	.word	0x0800331b
 80030c0:	0800333f 	.word	0x0800333f
 80030c4:	2000011c 	.word	0x2000011c

080030c8 <stdio_exit_handler>:
 80030c8:	4a02      	ldr	r2, [pc, #8]	@ (80030d4 <stdio_exit_handler+0xc>)
 80030ca:	4903      	ldr	r1, [pc, #12]	@ (80030d8 <stdio_exit_handler+0x10>)
 80030cc:	4803      	ldr	r0, [pc, #12]	@ (80030dc <stdio_exit_handler+0x14>)
 80030ce:	f000 b869 	b.w	80031a4 <_fwalk_sglue>
 80030d2:	bf00      	nop
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	08003e01 	.word	0x08003e01
 80030dc:	2000001c 	.word	0x2000001c

080030e0 <cleanup_stdio>:
 80030e0:	6841      	ldr	r1, [r0, #4]
 80030e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <cleanup_stdio+0x34>)
 80030e4:	4299      	cmp	r1, r3
 80030e6:	b510      	push	{r4, lr}
 80030e8:	4604      	mov	r4, r0
 80030ea:	d001      	beq.n	80030f0 <cleanup_stdio+0x10>
 80030ec:	f000 fe88 	bl	8003e00 <_fflush_r>
 80030f0:	68a1      	ldr	r1, [r4, #8]
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <cleanup_stdio+0x38>)
 80030f4:	4299      	cmp	r1, r3
 80030f6:	d002      	beq.n	80030fe <cleanup_stdio+0x1e>
 80030f8:	4620      	mov	r0, r4
 80030fa:	f000 fe81 	bl	8003e00 <_fflush_r>
 80030fe:	68e1      	ldr	r1, [r4, #12]
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <cleanup_stdio+0x3c>)
 8003102:	4299      	cmp	r1, r3
 8003104:	d004      	beq.n	8003110 <cleanup_stdio+0x30>
 8003106:	4620      	mov	r0, r4
 8003108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800310c:	f000 be78 	b.w	8003e00 <_fflush_r>
 8003110:	bd10      	pop	{r4, pc}
 8003112:	bf00      	nop
 8003114:	2000011c 	.word	0x2000011c
 8003118:	20000184 	.word	0x20000184
 800311c:	200001ec 	.word	0x200001ec

08003120 <global_stdio_init.part.0>:
 8003120:	b510      	push	{r4, lr}
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <global_stdio_init.part.0+0x30>)
 8003124:	4c0b      	ldr	r4, [pc, #44]	@ (8003154 <global_stdio_init.part.0+0x34>)
 8003126:	4a0c      	ldr	r2, [pc, #48]	@ (8003158 <global_stdio_init.part.0+0x38>)
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	4620      	mov	r0, r4
 800312c:	2200      	movs	r2, #0
 800312e:	2104      	movs	r1, #4
 8003130:	f7ff ff94 	bl	800305c <std>
 8003134:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003138:	2201      	movs	r2, #1
 800313a:	2109      	movs	r1, #9
 800313c:	f7ff ff8e 	bl	800305c <std>
 8003140:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003144:	2202      	movs	r2, #2
 8003146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800314a:	2112      	movs	r1, #18
 800314c:	f7ff bf86 	b.w	800305c <std>
 8003150:	20000254 	.word	0x20000254
 8003154:	2000011c 	.word	0x2000011c
 8003158:	080030c9 	.word	0x080030c9

0800315c <__sfp_lock_acquire>:
 800315c:	4801      	ldr	r0, [pc, #4]	@ (8003164 <__sfp_lock_acquire+0x8>)
 800315e:	f000 ba00 	b.w	8003562 <__retarget_lock_acquire_recursive>
 8003162:	bf00      	nop
 8003164:	2000025d 	.word	0x2000025d

08003168 <__sfp_lock_release>:
 8003168:	4801      	ldr	r0, [pc, #4]	@ (8003170 <__sfp_lock_release+0x8>)
 800316a:	f000 b9fb 	b.w	8003564 <__retarget_lock_release_recursive>
 800316e:	bf00      	nop
 8003170:	2000025d 	.word	0x2000025d

08003174 <__sinit>:
 8003174:	b510      	push	{r4, lr}
 8003176:	4604      	mov	r4, r0
 8003178:	f7ff fff0 	bl	800315c <__sfp_lock_acquire>
 800317c:	6a23      	ldr	r3, [r4, #32]
 800317e:	b11b      	cbz	r3, 8003188 <__sinit+0x14>
 8003180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003184:	f7ff bff0 	b.w	8003168 <__sfp_lock_release>
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <__sinit+0x28>)
 800318a:	6223      	str	r3, [r4, #32]
 800318c:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <__sinit+0x2c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f5      	bne.n	8003180 <__sinit+0xc>
 8003194:	f7ff ffc4 	bl	8003120 <global_stdio_init.part.0>
 8003198:	e7f2      	b.n	8003180 <__sinit+0xc>
 800319a:	bf00      	nop
 800319c:	080030e1 	.word	0x080030e1
 80031a0:	20000254 	.word	0x20000254

080031a4 <_fwalk_sglue>:
 80031a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a8:	4607      	mov	r7, r0
 80031aa:	4688      	mov	r8, r1
 80031ac:	4614      	mov	r4, r2
 80031ae:	2600      	movs	r6, #0
 80031b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031b4:	f1b9 0901 	subs.w	r9, r9, #1
 80031b8:	d505      	bpl.n	80031c6 <_fwalk_sglue+0x22>
 80031ba:	6824      	ldr	r4, [r4, #0]
 80031bc:	2c00      	cmp	r4, #0
 80031be:	d1f7      	bne.n	80031b0 <_fwalk_sglue+0xc>
 80031c0:	4630      	mov	r0, r6
 80031c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031c6:	89ab      	ldrh	r3, [r5, #12]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d907      	bls.n	80031dc <_fwalk_sglue+0x38>
 80031cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031d0:	3301      	adds	r3, #1
 80031d2:	d003      	beq.n	80031dc <_fwalk_sglue+0x38>
 80031d4:	4629      	mov	r1, r5
 80031d6:	4638      	mov	r0, r7
 80031d8:	47c0      	blx	r8
 80031da:	4306      	orrs	r6, r0
 80031dc:	3568      	adds	r5, #104	@ 0x68
 80031de:	e7e9      	b.n	80031b4 <_fwalk_sglue+0x10>

080031e0 <iprintf>:
 80031e0:	b40f      	push	{r0, r1, r2, r3}
 80031e2:	b507      	push	{r0, r1, r2, lr}
 80031e4:	4906      	ldr	r1, [pc, #24]	@ (8003200 <iprintf+0x20>)
 80031e6:	ab04      	add	r3, sp, #16
 80031e8:	6808      	ldr	r0, [r1, #0]
 80031ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80031ee:	6881      	ldr	r1, [r0, #8]
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	f000 fadb 	bl	80037ac <_vfiprintf_r>
 80031f6:	b003      	add	sp, #12
 80031f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031fc:	b004      	add	sp, #16
 80031fe:	4770      	bx	lr
 8003200:	20000018 	.word	0x20000018

08003204 <_puts_r>:
 8003204:	6a03      	ldr	r3, [r0, #32]
 8003206:	b570      	push	{r4, r5, r6, lr}
 8003208:	6884      	ldr	r4, [r0, #8]
 800320a:	4605      	mov	r5, r0
 800320c:	460e      	mov	r6, r1
 800320e:	b90b      	cbnz	r3, 8003214 <_puts_r+0x10>
 8003210:	f7ff ffb0 	bl	8003174 <__sinit>
 8003214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003216:	07db      	lsls	r3, r3, #31
 8003218:	d405      	bmi.n	8003226 <_puts_r+0x22>
 800321a:	89a3      	ldrh	r3, [r4, #12]
 800321c:	0598      	lsls	r0, r3, #22
 800321e:	d402      	bmi.n	8003226 <_puts_r+0x22>
 8003220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003222:	f000 f99e 	bl	8003562 <__retarget_lock_acquire_recursive>
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	0719      	lsls	r1, r3, #28
 800322a:	d502      	bpl.n	8003232 <_puts_r+0x2e>
 800322c:	6923      	ldr	r3, [r4, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d135      	bne.n	800329e <_puts_r+0x9a>
 8003232:	4621      	mov	r1, r4
 8003234:	4628      	mov	r0, r5
 8003236:	f000 f8c5 	bl	80033c4 <__swsetup_r>
 800323a:	b380      	cbz	r0, 800329e <_puts_r+0x9a>
 800323c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003242:	07da      	lsls	r2, r3, #31
 8003244:	d405      	bmi.n	8003252 <_puts_r+0x4e>
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	059b      	lsls	r3, r3, #22
 800324a:	d402      	bmi.n	8003252 <_puts_r+0x4e>
 800324c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800324e:	f000 f989 	bl	8003564 <__retarget_lock_release_recursive>
 8003252:	4628      	mov	r0, r5
 8003254:	bd70      	pop	{r4, r5, r6, pc}
 8003256:	2b00      	cmp	r3, #0
 8003258:	da04      	bge.n	8003264 <_puts_r+0x60>
 800325a:	69a2      	ldr	r2, [r4, #24]
 800325c:	429a      	cmp	r2, r3
 800325e:	dc17      	bgt.n	8003290 <_puts_r+0x8c>
 8003260:	290a      	cmp	r1, #10
 8003262:	d015      	beq.n	8003290 <_puts_r+0x8c>
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	6022      	str	r2, [r4, #0]
 800326a:	7019      	strb	r1, [r3, #0]
 800326c:	68a3      	ldr	r3, [r4, #8]
 800326e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003272:	3b01      	subs	r3, #1
 8003274:	60a3      	str	r3, [r4, #8]
 8003276:	2900      	cmp	r1, #0
 8003278:	d1ed      	bne.n	8003256 <_puts_r+0x52>
 800327a:	2b00      	cmp	r3, #0
 800327c:	da11      	bge.n	80032a2 <_puts_r+0x9e>
 800327e:	4622      	mov	r2, r4
 8003280:	210a      	movs	r1, #10
 8003282:	4628      	mov	r0, r5
 8003284:	f000 f85f 	bl	8003346 <__swbuf_r>
 8003288:	3001      	adds	r0, #1
 800328a:	d0d7      	beq.n	800323c <_puts_r+0x38>
 800328c:	250a      	movs	r5, #10
 800328e:	e7d7      	b.n	8003240 <_puts_r+0x3c>
 8003290:	4622      	mov	r2, r4
 8003292:	4628      	mov	r0, r5
 8003294:	f000 f857 	bl	8003346 <__swbuf_r>
 8003298:	3001      	adds	r0, #1
 800329a:	d1e7      	bne.n	800326c <_puts_r+0x68>
 800329c:	e7ce      	b.n	800323c <_puts_r+0x38>
 800329e:	3e01      	subs	r6, #1
 80032a0:	e7e4      	b.n	800326c <_puts_r+0x68>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	6022      	str	r2, [r4, #0]
 80032a8:	220a      	movs	r2, #10
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e7ee      	b.n	800328c <_puts_r+0x88>
	...

080032b0 <puts>:
 80032b0:	4b02      	ldr	r3, [pc, #8]	@ (80032bc <puts+0xc>)
 80032b2:	4601      	mov	r1, r0
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	f7ff bfa5 	b.w	8003204 <_puts_r>
 80032ba:	bf00      	nop
 80032bc:	20000018 	.word	0x20000018

080032c0 <__sread>:
 80032c0:	b510      	push	{r4, lr}
 80032c2:	460c      	mov	r4, r1
 80032c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c8:	f000 f8fc 	bl	80034c4 <_read_r>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	bfab      	itete	ge
 80032d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032d2:	89a3      	ldrhlt	r3, [r4, #12]
 80032d4:	181b      	addge	r3, r3, r0
 80032d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80032da:	bfac      	ite	ge
 80032dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80032de:	81a3      	strhlt	r3, [r4, #12]
 80032e0:	bd10      	pop	{r4, pc}

080032e2 <__swrite>:
 80032e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e6:	461f      	mov	r7, r3
 80032e8:	898b      	ldrh	r3, [r1, #12]
 80032ea:	05db      	lsls	r3, r3, #23
 80032ec:	4605      	mov	r5, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	4616      	mov	r6, r2
 80032f2:	d505      	bpl.n	8003300 <__swrite+0x1e>
 80032f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f8:	2302      	movs	r3, #2
 80032fa:	2200      	movs	r2, #0
 80032fc:	f000 f8d0 	bl	80034a0 <_lseek_r>
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003306:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800330a:	81a3      	strh	r3, [r4, #12]
 800330c:	4632      	mov	r2, r6
 800330e:	463b      	mov	r3, r7
 8003310:	4628      	mov	r0, r5
 8003312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003316:	f000 b8e7 	b.w	80034e8 <_write_r>

0800331a <__sseek>:
 800331a:	b510      	push	{r4, lr}
 800331c:	460c      	mov	r4, r1
 800331e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003322:	f000 f8bd 	bl	80034a0 <_lseek_r>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	bf15      	itete	ne
 800332c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800332e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003332:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003336:	81a3      	strheq	r3, [r4, #12]
 8003338:	bf18      	it	ne
 800333a:	81a3      	strhne	r3, [r4, #12]
 800333c:	bd10      	pop	{r4, pc}

0800333e <__sclose>:
 800333e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003342:	f000 b89d 	b.w	8003480 <_close_r>

08003346 <__swbuf_r>:
 8003346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003348:	460e      	mov	r6, r1
 800334a:	4614      	mov	r4, r2
 800334c:	4605      	mov	r5, r0
 800334e:	b118      	cbz	r0, 8003358 <__swbuf_r+0x12>
 8003350:	6a03      	ldr	r3, [r0, #32]
 8003352:	b90b      	cbnz	r3, 8003358 <__swbuf_r+0x12>
 8003354:	f7ff ff0e 	bl	8003174 <__sinit>
 8003358:	69a3      	ldr	r3, [r4, #24]
 800335a:	60a3      	str	r3, [r4, #8]
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	071a      	lsls	r2, r3, #28
 8003360:	d501      	bpl.n	8003366 <__swbuf_r+0x20>
 8003362:	6923      	ldr	r3, [r4, #16]
 8003364:	b943      	cbnz	r3, 8003378 <__swbuf_r+0x32>
 8003366:	4621      	mov	r1, r4
 8003368:	4628      	mov	r0, r5
 800336a:	f000 f82b 	bl	80033c4 <__swsetup_r>
 800336e:	b118      	cbz	r0, 8003378 <__swbuf_r+0x32>
 8003370:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003374:	4638      	mov	r0, r7
 8003376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	6922      	ldr	r2, [r4, #16]
 800337c:	1a98      	subs	r0, r3, r2
 800337e:	6963      	ldr	r3, [r4, #20]
 8003380:	b2f6      	uxtb	r6, r6
 8003382:	4283      	cmp	r3, r0
 8003384:	4637      	mov	r7, r6
 8003386:	dc05      	bgt.n	8003394 <__swbuf_r+0x4e>
 8003388:	4621      	mov	r1, r4
 800338a:	4628      	mov	r0, r5
 800338c:	f000 fd38 	bl	8003e00 <_fflush_r>
 8003390:	2800      	cmp	r0, #0
 8003392:	d1ed      	bne.n	8003370 <__swbuf_r+0x2a>
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	3b01      	subs	r3, #1
 8003398:	60a3      	str	r3, [r4, #8]
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	6022      	str	r2, [r4, #0]
 80033a0:	701e      	strb	r6, [r3, #0]
 80033a2:	6962      	ldr	r2, [r4, #20]
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d004      	beq.n	80033b4 <__swbuf_r+0x6e>
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	07db      	lsls	r3, r3, #31
 80033ae:	d5e1      	bpl.n	8003374 <__swbuf_r+0x2e>
 80033b0:	2e0a      	cmp	r6, #10
 80033b2:	d1df      	bne.n	8003374 <__swbuf_r+0x2e>
 80033b4:	4621      	mov	r1, r4
 80033b6:	4628      	mov	r0, r5
 80033b8:	f000 fd22 	bl	8003e00 <_fflush_r>
 80033bc:	2800      	cmp	r0, #0
 80033be:	d0d9      	beq.n	8003374 <__swbuf_r+0x2e>
 80033c0:	e7d6      	b.n	8003370 <__swbuf_r+0x2a>
	...

080033c4 <__swsetup_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	4b29      	ldr	r3, [pc, #164]	@ (800346c <__swsetup_r+0xa8>)
 80033c8:	4605      	mov	r5, r0
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	460c      	mov	r4, r1
 80033ce:	b118      	cbz	r0, 80033d8 <__swsetup_r+0x14>
 80033d0:	6a03      	ldr	r3, [r0, #32]
 80033d2:	b90b      	cbnz	r3, 80033d8 <__swsetup_r+0x14>
 80033d4:	f7ff fece 	bl	8003174 <__sinit>
 80033d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033dc:	0719      	lsls	r1, r3, #28
 80033de:	d422      	bmi.n	8003426 <__swsetup_r+0x62>
 80033e0:	06da      	lsls	r2, r3, #27
 80033e2:	d407      	bmi.n	80033f4 <__swsetup_r+0x30>
 80033e4:	2209      	movs	r2, #9
 80033e6:	602a      	str	r2, [r5, #0]
 80033e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ec:	81a3      	strh	r3, [r4, #12]
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033f2:	e033      	b.n	800345c <__swsetup_r+0x98>
 80033f4:	0758      	lsls	r0, r3, #29
 80033f6:	d512      	bpl.n	800341e <__swsetup_r+0x5a>
 80033f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033fa:	b141      	cbz	r1, 800340e <__swsetup_r+0x4a>
 80033fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003400:	4299      	cmp	r1, r3
 8003402:	d002      	beq.n	800340a <__swsetup_r+0x46>
 8003404:	4628      	mov	r0, r5
 8003406:	f000 f8af 	bl	8003568 <_free_r>
 800340a:	2300      	movs	r3, #0
 800340c:	6363      	str	r3, [r4, #52]	@ 0x34
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	2300      	movs	r3, #0
 8003418:	6063      	str	r3, [r4, #4]
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	6923      	ldr	r3, [r4, #16]
 8003428:	b94b      	cbnz	r3, 800343e <__swsetup_r+0x7a>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003434:	d003      	beq.n	800343e <__swsetup_r+0x7a>
 8003436:	4621      	mov	r1, r4
 8003438:	4628      	mov	r0, r5
 800343a:	f000 fd2f 	bl	8003e9c <__smakebuf_r>
 800343e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003442:	f013 0201 	ands.w	r2, r3, #1
 8003446:	d00a      	beq.n	800345e <__swsetup_r+0x9a>
 8003448:	2200      	movs	r2, #0
 800344a:	60a2      	str	r2, [r4, #8]
 800344c:	6962      	ldr	r2, [r4, #20]
 800344e:	4252      	negs	r2, r2
 8003450:	61a2      	str	r2, [r4, #24]
 8003452:	6922      	ldr	r2, [r4, #16]
 8003454:	b942      	cbnz	r2, 8003468 <__swsetup_r+0xa4>
 8003456:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800345a:	d1c5      	bne.n	80033e8 <__swsetup_r+0x24>
 800345c:	bd38      	pop	{r3, r4, r5, pc}
 800345e:	0799      	lsls	r1, r3, #30
 8003460:	bf58      	it	pl
 8003462:	6962      	ldrpl	r2, [r4, #20]
 8003464:	60a2      	str	r2, [r4, #8]
 8003466:	e7f4      	b.n	8003452 <__swsetup_r+0x8e>
 8003468:	2000      	movs	r0, #0
 800346a:	e7f7      	b.n	800345c <__swsetup_r+0x98>
 800346c:	20000018 	.word	0x20000018

08003470 <memset>:
 8003470:	4402      	add	r2, r0
 8003472:	4603      	mov	r3, r0
 8003474:	4293      	cmp	r3, r2
 8003476:	d100      	bne.n	800347a <memset+0xa>
 8003478:	4770      	bx	lr
 800347a:	f803 1b01 	strb.w	r1, [r3], #1
 800347e:	e7f9      	b.n	8003474 <memset+0x4>

08003480 <_close_r>:
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4d06      	ldr	r5, [pc, #24]	@ (800349c <_close_r+0x1c>)
 8003484:	2300      	movs	r3, #0
 8003486:	4604      	mov	r4, r0
 8003488:	4608      	mov	r0, r1
 800348a:	602b      	str	r3, [r5, #0]
 800348c:	f7fd fb3f 	bl	8000b0e <_close>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d102      	bne.n	800349a <_close_r+0x1a>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	b103      	cbz	r3, 800349a <_close_r+0x1a>
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	20000258 	.word	0x20000258

080034a0 <_lseek_r>:
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4d07      	ldr	r5, [pc, #28]	@ (80034c0 <_lseek_r+0x20>)
 80034a4:	4604      	mov	r4, r0
 80034a6:	4608      	mov	r0, r1
 80034a8:	4611      	mov	r1, r2
 80034aa:	2200      	movs	r2, #0
 80034ac:	602a      	str	r2, [r5, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f7fd fb54 	bl	8000b5c <_lseek>
 80034b4:	1c43      	adds	r3, r0, #1
 80034b6:	d102      	bne.n	80034be <_lseek_r+0x1e>
 80034b8:	682b      	ldr	r3, [r5, #0]
 80034ba:	b103      	cbz	r3, 80034be <_lseek_r+0x1e>
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	bd38      	pop	{r3, r4, r5, pc}
 80034c0:	20000258 	.word	0x20000258

080034c4 <_read_r>:
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	4d07      	ldr	r5, [pc, #28]	@ (80034e4 <_read_r+0x20>)
 80034c8:	4604      	mov	r4, r0
 80034ca:	4608      	mov	r0, r1
 80034cc:	4611      	mov	r1, r2
 80034ce:	2200      	movs	r2, #0
 80034d0:	602a      	str	r2, [r5, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7fd fafe 	bl	8000ad4 <_read>
 80034d8:	1c43      	adds	r3, r0, #1
 80034da:	d102      	bne.n	80034e2 <_read_r+0x1e>
 80034dc:	682b      	ldr	r3, [r5, #0]
 80034de:	b103      	cbz	r3, 80034e2 <_read_r+0x1e>
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	bd38      	pop	{r3, r4, r5, pc}
 80034e4:	20000258 	.word	0x20000258

080034e8 <_write_r>:
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	4d07      	ldr	r5, [pc, #28]	@ (8003508 <_write_r+0x20>)
 80034ec:	4604      	mov	r4, r0
 80034ee:	4608      	mov	r0, r1
 80034f0:	4611      	mov	r1, r2
 80034f2:	2200      	movs	r2, #0
 80034f4:	602a      	str	r2, [r5, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f7fd f852 	bl	80005a0 <_write>
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	d102      	bne.n	8003506 <_write_r+0x1e>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	b103      	cbz	r3, 8003506 <_write_r+0x1e>
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	bd38      	pop	{r3, r4, r5, pc}
 8003508:	20000258 	.word	0x20000258

0800350c <__errno>:
 800350c:	4b01      	ldr	r3, [pc, #4]	@ (8003514 <__errno+0x8>)
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000018 	.word	0x20000018

08003518 <__libc_init_array>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	4d0d      	ldr	r5, [pc, #52]	@ (8003550 <__libc_init_array+0x38>)
 800351c:	4c0d      	ldr	r4, [pc, #52]	@ (8003554 <__libc_init_array+0x3c>)
 800351e:	1b64      	subs	r4, r4, r5
 8003520:	10a4      	asrs	r4, r4, #2
 8003522:	2600      	movs	r6, #0
 8003524:	42a6      	cmp	r6, r4
 8003526:	d109      	bne.n	800353c <__libc_init_array+0x24>
 8003528:	4d0b      	ldr	r5, [pc, #44]	@ (8003558 <__libc_init_array+0x40>)
 800352a:	4c0c      	ldr	r4, [pc, #48]	@ (800355c <__libc_init_array+0x44>)
 800352c:	f000 fd24 	bl	8003f78 <_init>
 8003530:	1b64      	subs	r4, r4, r5
 8003532:	10a4      	asrs	r4, r4, #2
 8003534:	2600      	movs	r6, #0
 8003536:	42a6      	cmp	r6, r4
 8003538:	d105      	bne.n	8003546 <__libc_init_array+0x2e>
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003540:	4798      	blx	r3
 8003542:	3601      	adds	r6, #1
 8003544:	e7ee      	b.n	8003524 <__libc_init_array+0xc>
 8003546:	f855 3b04 	ldr.w	r3, [r5], #4
 800354a:	4798      	blx	r3
 800354c:	3601      	adds	r6, #1
 800354e:	e7f2      	b.n	8003536 <__libc_init_array+0x1e>
 8003550:	08004008 	.word	0x08004008
 8003554:	08004008 	.word	0x08004008
 8003558:	08004008 	.word	0x08004008
 800355c:	0800400c 	.word	0x0800400c

08003560 <__retarget_lock_init_recursive>:
 8003560:	4770      	bx	lr

08003562 <__retarget_lock_acquire_recursive>:
 8003562:	4770      	bx	lr

08003564 <__retarget_lock_release_recursive>:
 8003564:	4770      	bx	lr
	...

08003568 <_free_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	4605      	mov	r5, r0
 800356c:	2900      	cmp	r1, #0
 800356e:	d041      	beq.n	80035f4 <_free_r+0x8c>
 8003570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003574:	1f0c      	subs	r4, r1, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	bfb8      	it	lt
 800357a:	18e4      	addlt	r4, r4, r3
 800357c:	f000 f8e0 	bl	8003740 <__malloc_lock>
 8003580:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <_free_r+0x90>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	b933      	cbnz	r3, 8003594 <_free_r+0x2c>
 8003586:	6063      	str	r3, [r4, #4]
 8003588:	6014      	str	r4, [r2, #0]
 800358a:	4628      	mov	r0, r5
 800358c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003590:	f000 b8dc 	b.w	800374c <__malloc_unlock>
 8003594:	42a3      	cmp	r3, r4
 8003596:	d908      	bls.n	80035aa <_free_r+0x42>
 8003598:	6820      	ldr	r0, [r4, #0]
 800359a:	1821      	adds	r1, r4, r0
 800359c:	428b      	cmp	r3, r1
 800359e:	bf01      	itttt	eq
 80035a0:	6819      	ldreq	r1, [r3, #0]
 80035a2:	685b      	ldreq	r3, [r3, #4]
 80035a4:	1809      	addeq	r1, r1, r0
 80035a6:	6021      	streq	r1, [r4, #0]
 80035a8:	e7ed      	b.n	8003586 <_free_r+0x1e>
 80035aa:	461a      	mov	r2, r3
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	b10b      	cbz	r3, 80035b4 <_free_r+0x4c>
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	d9fa      	bls.n	80035aa <_free_r+0x42>
 80035b4:	6811      	ldr	r1, [r2, #0]
 80035b6:	1850      	adds	r0, r2, r1
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	d10b      	bne.n	80035d4 <_free_r+0x6c>
 80035bc:	6820      	ldr	r0, [r4, #0]
 80035be:	4401      	add	r1, r0
 80035c0:	1850      	adds	r0, r2, r1
 80035c2:	4283      	cmp	r3, r0
 80035c4:	6011      	str	r1, [r2, #0]
 80035c6:	d1e0      	bne.n	800358a <_free_r+0x22>
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	6053      	str	r3, [r2, #4]
 80035ce:	4408      	add	r0, r1
 80035d0:	6010      	str	r0, [r2, #0]
 80035d2:	e7da      	b.n	800358a <_free_r+0x22>
 80035d4:	d902      	bls.n	80035dc <_free_r+0x74>
 80035d6:	230c      	movs	r3, #12
 80035d8:	602b      	str	r3, [r5, #0]
 80035da:	e7d6      	b.n	800358a <_free_r+0x22>
 80035dc:	6820      	ldr	r0, [r4, #0]
 80035de:	1821      	adds	r1, r4, r0
 80035e0:	428b      	cmp	r3, r1
 80035e2:	bf04      	itt	eq
 80035e4:	6819      	ldreq	r1, [r3, #0]
 80035e6:	685b      	ldreq	r3, [r3, #4]
 80035e8:	6063      	str	r3, [r4, #4]
 80035ea:	bf04      	itt	eq
 80035ec:	1809      	addeq	r1, r1, r0
 80035ee:	6021      	streq	r1, [r4, #0]
 80035f0:	6054      	str	r4, [r2, #4]
 80035f2:	e7ca      	b.n	800358a <_free_r+0x22>
 80035f4:	bd38      	pop	{r3, r4, r5, pc}
 80035f6:	bf00      	nop
 80035f8:	20000264 	.word	0x20000264

080035fc <sbrk_aligned>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4e0f      	ldr	r6, [pc, #60]	@ (800363c <sbrk_aligned+0x40>)
 8003600:	460c      	mov	r4, r1
 8003602:	6831      	ldr	r1, [r6, #0]
 8003604:	4605      	mov	r5, r0
 8003606:	b911      	cbnz	r1, 800360e <sbrk_aligned+0x12>
 8003608:	f000 fca6 	bl	8003f58 <_sbrk_r>
 800360c:	6030      	str	r0, [r6, #0]
 800360e:	4621      	mov	r1, r4
 8003610:	4628      	mov	r0, r5
 8003612:	f000 fca1 	bl	8003f58 <_sbrk_r>
 8003616:	1c43      	adds	r3, r0, #1
 8003618:	d103      	bne.n	8003622 <sbrk_aligned+0x26>
 800361a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800361e:	4620      	mov	r0, r4
 8003620:	bd70      	pop	{r4, r5, r6, pc}
 8003622:	1cc4      	adds	r4, r0, #3
 8003624:	f024 0403 	bic.w	r4, r4, #3
 8003628:	42a0      	cmp	r0, r4
 800362a:	d0f8      	beq.n	800361e <sbrk_aligned+0x22>
 800362c:	1a21      	subs	r1, r4, r0
 800362e:	4628      	mov	r0, r5
 8003630:	f000 fc92 	bl	8003f58 <_sbrk_r>
 8003634:	3001      	adds	r0, #1
 8003636:	d1f2      	bne.n	800361e <sbrk_aligned+0x22>
 8003638:	e7ef      	b.n	800361a <sbrk_aligned+0x1e>
 800363a:	bf00      	nop
 800363c:	20000260 	.word	0x20000260

08003640 <_malloc_r>:
 8003640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003644:	1ccd      	adds	r5, r1, #3
 8003646:	f025 0503 	bic.w	r5, r5, #3
 800364a:	3508      	adds	r5, #8
 800364c:	2d0c      	cmp	r5, #12
 800364e:	bf38      	it	cc
 8003650:	250c      	movcc	r5, #12
 8003652:	2d00      	cmp	r5, #0
 8003654:	4606      	mov	r6, r0
 8003656:	db01      	blt.n	800365c <_malloc_r+0x1c>
 8003658:	42a9      	cmp	r1, r5
 800365a:	d904      	bls.n	8003666 <_malloc_r+0x26>
 800365c:	230c      	movs	r3, #12
 800365e:	6033      	str	r3, [r6, #0]
 8003660:	2000      	movs	r0, #0
 8003662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800373c <_malloc_r+0xfc>
 800366a:	f000 f869 	bl	8003740 <__malloc_lock>
 800366e:	f8d8 3000 	ldr.w	r3, [r8]
 8003672:	461c      	mov	r4, r3
 8003674:	bb44      	cbnz	r4, 80036c8 <_malloc_r+0x88>
 8003676:	4629      	mov	r1, r5
 8003678:	4630      	mov	r0, r6
 800367a:	f7ff ffbf 	bl	80035fc <sbrk_aligned>
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	4604      	mov	r4, r0
 8003682:	d158      	bne.n	8003736 <_malloc_r+0xf6>
 8003684:	f8d8 4000 	ldr.w	r4, [r8]
 8003688:	4627      	mov	r7, r4
 800368a:	2f00      	cmp	r7, #0
 800368c:	d143      	bne.n	8003716 <_malloc_r+0xd6>
 800368e:	2c00      	cmp	r4, #0
 8003690:	d04b      	beq.n	800372a <_malloc_r+0xea>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	4639      	mov	r1, r7
 8003696:	4630      	mov	r0, r6
 8003698:	eb04 0903 	add.w	r9, r4, r3
 800369c:	f000 fc5c 	bl	8003f58 <_sbrk_r>
 80036a0:	4581      	cmp	r9, r0
 80036a2:	d142      	bne.n	800372a <_malloc_r+0xea>
 80036a4:	6821      	ldr	r1, [r4, #0]
 80036a6:	1a6d      	subs	r5, r5, r1
 80036a8:	4629      	mov	r1, r5
 80036aa:	4630      	mov	r0, r6
 80036ac:	f7ff ffa6 	bl	80035fc <sbrk_aligned>
 80036b0:	3001      	adds	r0, #1
 80036b2:	d03a      	beq.n	800372a <_malloc_r+0xea>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	442b      	add	r3, r5
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	f8d8 3000 	ldr.w	r3, [r8]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	bb62      	cbnz	r2, 800371c <_malloc_r+0xdc>
 80036c2:	f8c8 7000 	str.w	r7, [r8]
 80036c6:	e00f      	b.n	80036e8 <_malloc_r+0xa8>
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	1b52      	subs	r2, r2, r5
 80036cc:	d420      	bmi.n	8003710 <_malloc_r+0xd0>
 80036ce:	2a0b      	cmp	r2, #11
 80036d0:	d917      	bls.n	8003702 <_malloc_r+0xc2>
 80036d2:	1961      	adds	r1, r4, r5
 80036d4:	42a3      	cmp	r3, r4
 80036d6:	6025      	str	r5, [r4, #0]
 80036d8:	bf18      	it	ne
 80036da:	6059      	strne	r1, [r3, #4]
 80036dc:	6863      	ldr	r3, [r4, #4]
 80036de:	bf08      	it	eq
 80036e0:	f8c8 1000 	streq.w	r1, [r8]
 80036e4:	5162      	str	r2, [r4, r5]
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	4630      	mov	r0, r6
 80036ea:	f000 f82f 	bl	800374c <__malloc_unlock>
 80036ee:	f104 000b 	add.w	r0, r4, #11
 80036f2:	1d23      	adds	r3, r4, #4
 80036f4:	f020 0007 	bic.w	r0, r0, #7
 80036f8:	1ac2      	subs	r2, r0, r3
 80036fa:	bf1c      	itt	ne
 80036fc:	1a1b      	subne	r3, r3, r0
 80036fe:	50a3      	strne	r3, [r4, r2]
 8003700:	e7af      	b.n	8003662 <_malloc_r+0x22>
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	42a3      	cmp	r3, r4
 8003706:	bf0c      	ite	eq
 8003708:	f8c8 2000 	streq.w	r2, [r8]
 800370c:	605a      	strne	r2, [r3, #4]
 800370e:	e7eb      	b.n	80036e8 <_malloc_r+0xa8>
 8003710:	4623      	mov	r3, r4
 8003712:	6864      	ldr	r4, [r4, #4]
 8003714:	e7ae      	b.n	8003674 <_malloc_r+0x34>
 8003716:	463c      	mov	r4, r7
 8003718:	687f      	ldr	r7, [r7, #4]
 800371a:	e7b6      	b.n	800368a <_malloc_r+0x4a>
 800371c:	461a      	mov	r2, r3
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	42a3      	cmp	r3, r4
 8003722:	d1fb      	bne.n	800371c <_malloc_r+0xdc>
 8003724:	2300      	movs	r3, #0
 8003726:	6053      	str	r3, [r2, #4]
 8003728:	e7de      	b.n	80036e8 <_malloc_r+0xa8>
 800372a:	230c      	movs	r3, #12
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	4630      	mov	r0, r6
 8003730:	f000 f80c 	bl	800374c <__malloc_unlock>
 8003734:	e794      	b.n	8003660 <_malloc_r+0x20>
 8003736:	6005      	str	r5, [r0, #0]
 8003738:	e7d6      	b.n	80036e8 <_malloc_r+0xa8>
 800373a:	bf00      	nop
 800373c:	20000264 	.word	0x20000264

08003740 <__malloc_lock>:
 8003740:	4801      	ldr	r0, [pc, #4]	@ (8003748 <__malloc_lock+0x8>)
 8003742:	f7ff bf0e 	b.w	8003562 <__retarget_lock_acquire_recursive>
 8003746:	bf00      	nop
 8003748:	2000025c 	.word	0x2000025c

0800374c <__malloc_unlock>:
 800374c:	4801      	ldr	r0, [pc, #4]	@ (8003754 <__malloc_unlock+0x8>)
 800374e:	f7ff bf09 	b.w	8003564 <__retarget_lock_release_recursive>
 8003752:	bf00      	nop
 8003754:	2000025c 	.word	0x2000025c

08003758 <__sfputc_r>:
 8003758:	6893      	ldr	r3, [r2, #8]
 800375a:	3b01      	subs	r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	b410      	push	{r4}
 8003760:	6093      	str	r3, [r2, #8]
 8003762:	da08      	bge.n	8003776 <__sfputc_r+0x1e>
 8003764:	6994      	ldr	r4, [r2, #24]
 8003766:	42a3      	cmp	r3, r4
 8003768:	db01      	blt.n	800376e <__sfputc_r+0x16>
 800376a:	290a      	cmp	r1, #10
 800376c:	d103      	bne.n	8003776 <__sfputc_r+0x1e>
 800376e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003772:	f7ff bde8 	b.w	8003346 <__swbuf_r>
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	1c58      	adds	r0, r3, #1
 800377a:	6010      	str	r0, [r2, #0]
 800377c:	7019      	strb	r1, [r3, #0]
 800377e:	4608      	mov	r0, r1
 8003780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003784:	4770      	bx	lr

08003786 <__sfputs_r>:
 8003786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003788:	4606      	mov	r6, r0
 800378a:	460f      	mov	r7, r1
 800378c:	4614      	mov	r4, r2
 800378e:	18d5      	adds	r5, r2, r3
 8003790:	42ac      	cmp	r4, r5
 8003792:	d101      	bne.n	8003798 <__sfputs_r+0x12>
 8003794:	2000      	movs	r0, #0
 8003796:	e007      	b.n	80037a8 <__sfputs_r+0x22>
 8003798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379c:	463a      	mov	r2, r7
 800379e:	4630      	mov	r0, r6
 80037a0:	f7ff ffda 	bl	8003758 <__sfputc_r>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d1f3      	bne.n	8003790 <__sfputs_r+0xa>
 80037a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037ac <_vfiprintf_r>:
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	460d      	mov	r5, r1
 80037b2:	b09d      	sub	sp, #116	@ 0x74
 80037b4:	4614      	mov	r4, r2
 80037b6:	4698      	mov	r8, r3
 80037b8:	4606      	mov	r6, r0
 80037ba:	b118      	cbz	r0, 80037c4 <_vfiprintf_r+0x18>
 80037bc:	6a03      	ldr	r3, [r0, #32]
 80037be:	b90b      	cbnz	r3, 80037c4 <_vfiprintf_r+0x18>
 80037c0:	f7ff fcd8 	bl	8003174 <__sinit>
 80037c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037c6:	07d9      	lsls	r1, r3, #31
 80037c8:	d405      	bmi.n	80037d6 <_vfiprintf_r+0x2a>
 80037ca:	89ab      	ldrh	r3, [r5, #12]
 80037cc:	059a      	lsls	r2, r3, #22
 80037ce:	d402      	bmi.n	80037d6 <_vfiprintf_r+0x2a>
 80037d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037d2:	f7ff fec6 	bl	8003562 <__retarget_lock_acquire_recursive>
 80037d6:	89ab      	ldrh	r3, [r5, #12]
 80037d8:	071b      	lsls	r3, r3, #28
 80037da:	d501      	bpl.n	80037e0 <_vfiprintf_r+0x34>
 80037dc:	692b      	ldr	r3, [r5, #16]
 80037de:	b99b      	cbnz	r3, 8003808 <_vfiprintf_r+0x5c>
 80037e0:	4629      	mov	r1, r5
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7ff fdee 	bl	80033c4 <__swsetup_r>
 80037e8:	b170      	cbz	r0, 8003808 <_vfiprintf_r+0x5c>
 80037ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037ec:	07dc      	lsls	r4, r3, #31
 80037ee:	d504      	bpl.n	80037fa <_vfiprintf_r+0x4e>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037f4:	b01d      	add	sp, #116	@ 0x74
 80037f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fa:	89ab      	ldrh	r3, [r5, #12]
 80037fc:	0598      	lsls	r0, r3, #22
 80037fe:	d4f7      	bmi.n	80037f0 <_vfiprintf_r+0x44>
 8003800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003802:	f7ff feaf 	bl	8003564 <__retarget_lock_release_recursive>
 8003806:	e7f3      	b.n	80037f0 <_vfiprintf_r+0x44>
 8003808:	2300      	movs	r3, #0
 800380a:	9309      	str	r3, [sp, #36]	@ 0x24
 800380c:	2320      	movs	r3, #32
 800380e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003812:	f8cd 800c 	str.w	r8, [sp, #12]
 8003816:	2330      	movs	r3, #48	@ 0x30
 8003818:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80039c8 <_vfiprintf_r+0x21c>
 800381c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003820:	f04f 0901 	mov.w	r9, #1
 8003824:	4623      	mov	r3, r4
 8003826:	469a      	mov	sl, r3
 8003828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800382c:	b10a      	cbz	r2, 8003832 <_vfiprintf_r+0x86>
 800382e:	2a25      	cmp	r2, #37	@ 0x25
 8003830:	d1f9      	bne.n	8003826 <_vfiprintf_r+0x7a>
 8003832:	ebba 0b04 	subs.w	fp, sl, r4
 8003836:	d00b      	beq.n	8003850 <_vfiprintf_r+0xa4>
 8003838:	465b      	mov	r3, fp
 800383a:	4622      	mov	r2, r4
 800383c:	4629      	mov	r1, r5
 800383e:	4630      	mov	r0, r6
 8003840:	f7ff ffa1 	bl	8003786 <__sfputs_r>
 8003844:	3001      	adds	r0, #1
 8003846:	f000 80a7 	beq.w	8003998 <_vfiprintf_r+0x1ec>
 800384a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800384c:	445a      	add	r2, fp
 800384e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003850:	f89a 3000 	ldrb.w	r3, [sl]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 809f 	beq.w	8003998 <_vfiprintf_r+0x1ec>
 800385a:	2300      	movs	r3, #0
 800385c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003864:	f10a 0a01 	add.w	sl, sl, #1
 8003868:	9304      	str	r3, [sp, #16]
 800386a:	9307      	str	r3, [sp, #28]
 800386c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003870:	931a      	str	r3, [sp, #104]	@ 0x68
 8003872:	4654      	mov	r4, sl
 8003874:	2205      	movs	r2, #5
 8003876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800387a:	4853      	ldr	r0, [pc, #332]	@ (80039c8 <_vfiprintf_r+0x21c>)
 800387c:	f7fc fcc8 	bl	8000210 <memchr>
 8003880:	9a04      	ldr	r2, [sp, #16]
 8003882:	b9d8      	cbnz	r0, 80038bc <_vfiprintf_r+0x110>
 8003884:	06d1      	lsls	r1, r2, #27
 8003886:	bf44      	itt	mi
 8003888:	2320      	movmi	r3, #32
 800388a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800388e:	0713      	lsls	r3, r2, #28
 8003890:	bf44      	itt	mi
 8003892:	232b      	movmi	r3, #43	@ 0x2b
 8003894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003898:	f89a 3000 	ldrb.w	r3, [sl]
 800389c:	2b2a      	cmp	r3, #42	@ 0x2a
 800389e:	d015      	beq.n	80038cc <_vfiprintf_r+0x120>
 80038a0:	9a07      	ldr	r2, [sp, #28]
 80038a2:	4654      	mov	r4, sl
 80038a4:	2000      	movs	r0, #0
 80038a6:	f04f 0c0a 	mov.w	ip, #10
 80038aa:	4621      	mov	r1, r4
 80038ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038b0:	3b30      	subs	r3, #48	@ 0x30
 80038b2:	2b09      	cmp	r3, #9
 80038b4:	d94b      	bls.n	800394e <_vfiprintf_r+0x1a2>
 80038b6:	b1b0      	cbz	r0, 80038e6 <_vfiprintf_r+0x13a>
 80038b8:	9207      	str	r2, [sp, #28]
 80038ba:	e014      	b.n	80038e6 <_vfiprintf_r+0x13a>
 80038bc:	eba0 0308 	sub.w	r3, r0, r8
 80038c0:	fa09 f303 	lsl.w	r3, r9, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	46a2      	mov	sl, r4
 80038ca:	e7d2      	b.n	8003872 <_vfiprintf_r+0xc6>
 80038cc:	9b03      	ldr	r3, [sp, #12]
 80038ce:	1d19      	adds	r1, r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	9103      	str	r1, [sp, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bfbb      	ittet	lt
 80038d8:	425b      	neglt	r3, r3
 80038da:	f042 0202 	orrlt.w	r2, r2, #2
 80038de:	9307      	strge	r3, [sp, #28]
 80038e0:	9307      	strlt	r3, [sp, #28]
 80038e2:	bfb8      	it	lt
 80038e4:	9204      	strlt	r2, [sp, #16]
 80038e6:	7823      	ldrb	r3, [r4, #0]
 80038e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80038ea:	d10a      	bne.n	8003902 <_vfiprintf_r+0x156>
 80038ec:	7863      	ldrb	r3, [r4, #1]
 80038ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80038f0:	d132      	bne.n	8003958 <_vfiprintf_r+0x1ac>
 80038f2:	9b03      	ldr	r3, [sp, #12]
 80038f4:	1d1a      	adds	r2, r3, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	9203      	str	r2, [sp, #12]
 80038fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038fe:	3402      	adds	r4, #2
 8003900:	9305      	str	r3, [sp, #20]
 8003902:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80039d8 <_vfiprintf_r+0x22c>
 8003906:	7821      	ldrb	r1, [r4, #0]
 8003908:	2203      	movs	r2, #3
 800390a:	4650      	mov	r0, sl
 800390c:	f7fc fc80 	bl	8000210 <memchr>
 8003910:	b138      	cbz	r0, 8003922 <_vfiprintf_r+0x176>
 8003912:	9b04      	ldr	r3, [sp, #16]
 8003914:	eba0 000a 	sub.w	r0, r0, sl
 8003918:	2240      	movs	r2, #64	@ 0x40
 800391a:	4082      	lsls	r2, r0
 800391c:	4313      	orrs	r3, r2
 800391e:	3401      	adds	r4, #1
 8003920:	9304      	str	r3, [sp, #16]
 8003922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003926:	4829      	ldr	r0, [pc, #164]	@ (80039cc <_vfiprintf_r+0x220>)
 8003928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800392c:	2206      	movs	r2, #6
 800392e:	f7fc fc6f 	bl	8000210 <memchr>
 8003932:	2800      	cmp	r0, #0
 8003934:	d03f      	beq.n	80039b6 <_vfiprintf_r+0x20a>
 8003936:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <_vfiprintf_r+0x224>)
 8003938:	bb1b      	cbnz	r3, 8003982 <_vfiprintf_r+0x1d6>
 800393a:	9b03      	ldr	r3, [sp, #12]
 800393c:	3307      	adds	r3, #7
 800393e:	f023 0307 	bic.w	r3, r3, #7
 8003942:	3308      	adds	r3, #8
 8003944:	9303      	str	r3, [sp, #12]
 8003946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003948:	443b      	add	r3, r7
 800394a:	9309      	str	r3, [sp, #36]	@ 0x24
 800394c:	e76a      	b.n	8003824 <_vfiprintf_r+0x78>
 800394e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003952:	460c      	mov	r4, r1
 8003954:	2001      	movs	r0, #1
 8003956:	e7a8      	b.n	80038aa <_vfiprintf_r+0xfe>
 8003958:	2300      	movs	r3, #0
 800395a:	3401      	adds	r4, #1
 800395c:	9305      	str	r3, [sp, #20]
 800395e:	4619      	mov	r1, r3
 8003960:	f04f 0c0a 	mov.w	ip, #10
 8003964:	4620      	mov	r0, r4
 8003966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800396a:	3a30      	subs	r2, #48	@ 0x30
 800396c:	2a09      	cmp	r2, #9
 800396e:	d903      	bls.n	8003978 <_vfiprintf_r+0x1cc>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0c6      	beq.n	8003902 <_vfiprintf_r+0x156>
 8003974:	9105      	str	r1, [sp, #20]
 8003976:	e7c4      	b.n	8003902 <_vfiprintf_r+0x156>
 8003978:	fb0c 2101 	mla	r1, ip, r1, r2
 800397c:	4604      	mov	r4, r0
 800397e:	2301      	movs	r3, #1
 8003980:	e7f0      	b.n	8003964 <_vfiprintf_r+0x1b8>
 8003982:	ab03      	add	r3, sp, #12
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	462a      	mov	r2, r5
 8003988:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <_vfiprintf_r+0x228>)
 800398a:	a904      	add	r1, sp, #16
 800398c:	4630      	mov	r0, r6
 800398e:	f3af 8000 	nop.w
 8003992:	4607      	mov	r7, r0
 8003994:	1c78      	adds	r0, r7, #1
 8003996:	d1d6      	bne.n	8003946 <_vfiprintf_r+0x19a>
 8003998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800399a:	07d9      	lsls	r1, r3, #31
 800399c:	d405      	bmi.n	80039aa <_vfiprintf_r+0x1fe>
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	059a      	lsls	r2, r3, #22
 80039a2:	d402      	bmi.n	80039aa <_vfiprintf_r+0x1fe>
 80039a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039a6:	f7ff fddd 	bl	8003564 <__retarget_lock_release_recursive>
 80039aa:	89ab      	ldrh	r3, [r5, #12]
 80039ac:	065b      	lsls	r3, r3, #25
 80039ae:	f53f af1f 	bmi.w	80037f0 <_vfiprintf_r+0x44>
 80039b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039b4:	e71e      	b.n	80037f4 <_vfiprintf_r+0x48>
 80039b6:	ab03      	add	r3, sp, #12
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	462a      	mov	r2, r5
 80039bc:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <_vfiprintf_r+0x228>)
 80039be:	a904      	add	r1, sp, #16
 80039c0:	4630      	mov	r0, r6
 80039c2:	f000 f879 	bl	8003ab8 <_printf_i>
 80039c6:	e7e4      	b.n	8003992 <_vfiprintf_r+0x1e6>
 80039c8:	08003fcc 	.word	0x08003fcc
 80039cc:	08003fd6 	.word	0x08003fd6
 80039d0:	00000000 	.word	0x00000000
 80039d4:	08003787 	.word	0x08003787
 80039d8:	08003fd2 	.word	0x08003fd2

080039dc <_printf_common>:
 80039dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	4616      	mov	r6, r2
 80039e2:	4698      	mov	r8, r3
 80039e4:	688a      	ldr	r2, [r1, #8]
 80039e6:	690b      	ldr	r3, [r1, #16]
 80039e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bfb8      	it	lt
 80039f0:	4613      	movlt	r3, r2
 80039f2:	6033      	str	r3, [r6, #0]
 80039f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039f8:	4607      	mov	r7, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	b10a      	cbz	r2, 8003a02 <_printf_common+0x26>
 80039fe:	3301      	adds	r3, #1
 8003a00:	6033      	str	r3, [r6, #0]
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	0699      	lsls	r1, r3, #26
 8003a06:	bf42      	ittt	mi
 8003a08:	6833      	ldrmi	r3, [r6, #0]
 8003a0a:	3302      	addmi	r3, #2
 8003a0c:	6033      	strmi	r3, [r6, #0]
 8003a0e:	6825      	ldr	r5, [r4, #0]
 8003a10:	f015 0506 	ands.w	r5, r5, #6
 8003a14:	d106      	bne.n	8003a24 <_printf_common+0x48>
 8003a16:	f104 0a19 	add.w	sl, r4, #25
 8003a1a:	68e3      	ldr	r3, [r4, #12]
 8003a1c:	6832      	ldr	r2, [r6, #0]
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	42ab      	cmp	r3, r5
 8003a22:	dc26      	bgt.n	8003a72 <_printf_common+0x96>
 8003a24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	3b00      	subs	r3, #0
 8003a2c:	bf18      	it	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	0692      	lsls	r2, r2, #26
 8003a32:	d42b      	bmi.n	8003a8c <_printf_common+0xb0>
 8003a34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a38:	4641      	mov	r1, r8
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	47c8      	blx	r9
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d01e      	beq.n	8003a80 <_printf_common+0xa4>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	6922      	ldr	r2, [r4, #16]
 8003a46:	f003 0306 	and.w	r3, r3, #6
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf02      	ittt	eq
 8003a4e:	68e5      	ldreq	r5, [r4, #12]
 8003a50:	6833      	ldreq	r3, [r6, #0]
 8003a52:	1aed      	subeq	r5, r5, r3
 8003a54:	68a3      	ldr	r3, [r4, #8]
 8003a56:	bf0c      	ite	eq
 8003a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a5c:	2500      	movne	r5, #0
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	bfc4      	itt	gt
 8003a62:	1a9b      	subgt	r3, r3, r2
 8003a64:	18ed      	addgt	r5, r5, r3
 8003a66:	2600      	movs	r6, #0
 8003a68:	341a      	adds	r4, #26
 8003a6a:	42b5      	cmp	r5, r6
 8003a6c:	d11a      	bne.n	8003aa4 <_printf_common+0xc8>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	e008      	b.n	8003a84 <_printf_common+0xa8>
 8003a72:	2301      	movs	r3, #1
 8003a74:	4652      	mov	r2, sl
 8003a76:	4641      	mov	r1, r8
 8003a78:	4638      	mov	r0, r7
 8003a7a:	47c8      	blx	r9
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d103      	bne.n	8003a88 <_printf_common+0xac>
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a88:	3501      	adds	r5, #1
 8003a8a:	e7c6      	b.n	8003a1a <_printf_common+0x3e>
 8003a8c:	18e1      	adds	r1, r4, r3
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	2030      	movs	r0, #48	@ 0x30
 8003a92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a96:	4422      	add	r2, r4
 8003a98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	e7c7      	b.n	8003a34 <_printf_common+0x58>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	4638      	mov	r0, r7
 8003aac:	47c8      	blx	r9
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d0e6      	beq.n	8003a80 <_printf_common+0xa4>
 8003ab2:	3601      	adds	r6, #1
 8003ab4:	e7d9      	b.n	8003a6a <_printf_common+0x8e>
	...

08003ab8 <_printf_i>:
 8003ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	7e0f      	ldrb	r7, [r1, #24]
 8003abe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ac0:	2f78      	cmp	r7, #120	@ 0x78
 8003ac2:	4691      	mov	r9, r2
 8003ac4:	4680      	mov	r8, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	469a      	mov	sl, r3
 8003aca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ace:	d807      	bhi.n	8003ae0 <_printf_i+0x28>
 8003ad0:	2f62      	cmp	r7, #98	@ 0x62
 8003ad2:	d80a      	bhi.n	8003aea <_printf_i+0x32>
 8003ad4:	2f00      	cmp	r7, #0
 8003ad6:	f000 80d2 	beq.w	8003c7e <_printf_i+0x1c6>
 8003ada:	2f58      	cmp	r7, #88	@ 0x58
 8003adc:	f000 80b9 	beq.w	8003c52 <_printf_i+0x19a>
 8003ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ae8:	e03a      	b.n	8003b60 <_printf_i+0xa8>
 8003aea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003aee:	2b15      	cmp	r3, #21
 8003af0:	d8f6      	bhi.n	8003ae0 <_printf_i+0x28>
 8003af2:	a101      	add	r1, pc, #4	@ (adr r1, 8003af8 <_printf_i+0x40>)
 8003af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003af8:	08003b51 	.word	0x08003b51
 8003afc:	08003b65 	.word	0x08003b65
 8003b00:	08003ae1 	.word	0x08003ae1
 8003b04:	08003ae1 	.word	0x08003ae1
 8003b08:	08003ae1 	.word	0x08003ae1
 8003b0c:	08003ae1 	.word	0x08003ae1
 8003b10:	08003b65 	.word	0x08003b65
 8003b14:	08003ae1 	.word	0x08003ae1
 8003b18:	08003ae1 	.word	0x08003ae1
 8003b1c:	08003ae1 	.word	0x08003ae1
 8003b20:	08003ae1 	.word	0x08003ae1
 8003b24:	08003c65 	.word	0x08003c65
 8003b28:	08003b8f 	.word	0x08003b8f
 8003b2c:	08003c1f 	.word	0x08003c1f
 8003b30:	08003ae1 	.word	0x08003ae1
 8003b34:	08003ae1 	.word	0x08003ae1
 8003b38:	08003c87 	.word	0x08003c87
 8003b3c:	08003ae1 	.word	0x08003ae1
 8003b40:	08003b8f 	.word	0x08003b8f
 8003b44:	08003ae1 	.word	0x08003ae1
 8003b48:	08003ae1 	.word	0x08003ae1
 8003b4c:	08003c27 	.word	0x08003c27
 8003b50:	6833      	ldr	r3, [r6, #0]
 8003b52:	1d1a      	adds	r2, r3, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6032      	str	r2, [r6, #0]
 8003b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b60:	2301      	movs	r3, #1
 8003b62:	e09d      	b.n	8003ca0 <_printf_i+0x1e8>
 8003b64:	6833      	ldr	r3, [r6, #0]
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	1d19      	adds	r1, r3, #4
 8003b6a:	6031      	str	r1, [r6, #0]
 8003b6c:	0606      	lsls	r6, r0, #24
 8003b6e:	d501      	bpl.n	8003b74 <_printf_i+0xbc>
 8003b70:	681d      	ldr	r5, [r3, #0]
 8003b72:	e003      	b.n	8003b7c <_printf_i+0xc4>
 8003b74:	0645      	lsls	r5, r0, #25
 8003b76:	d5fb      	bpl.n	8003b70 <_printf_i+0xb8>
 8003b78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b7c:	2d00      	cmp	r5, #0
 8003b7e:	da03      	bge.n	8003b88 <_printf_i+0xd0>
 8003b80:	232d      	movs	r3, #45	@ 0x2d
 8003b82:	426d      	negs	r5, r5
 8003b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b88:	4859      	ldr	r0, [pc, #356]	@ (8003cf0 <_printf_i+0x238>)
 8003b8a:	230a      	movs	r3, #10
 8003b8c:	e011      	b.n	8003bb2 <_printf_i+0xfa>
 8003b8e:	6821      	ldr	r1, [r4, #0]
 8003b90:	6833      	ldr	r3, [r6, #0]
 8003b92:	0608      	lsls	r0, r1, #24
 8003b94:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b98:	d402      	bmi.n	8003ba0 <_printf_i+0xe8>
 8003b9a:	0649      	lsls	r1, r1, #25
 8003b9c:	bf48      	it	mi
 8003b9e:	b2ad      	uxthmi	r5, r5
 8003ba0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ba2:	4853      	ldr	r0, [pc, #332]	@ (8003cf0 <_printf_i+0x238>)
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	bf14      	ite	ne
 8003ba8:	230a      	movne	r3, #10
 8003baa:	2308      	moveq	r3, #8
 8003bac:	2100      	movs	r1, #0
 8003bae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bb2:	6866      	ldr	r6, [r4, #4]
 8003bb4:	60a6      	str	r6, [r4, #8]
 8003bb6:	2e00      	cmp	r6, #0
 8003bb8:	bfa2      	ittt	ge
 8003bba:	6821      	ldrge	r1, [r4, #0]
 8003bbc:	f021 0104 	bicge.w	r1, r1, #4
 8003bc0:	6021      	strge	r1, [r4, #0]
 8003bc2:	b90d      	cbnz	r5, 8003bc8 <_printf_i+0x110>
 8003bc4:	2e00      	cmp	r6, #0
 8003bc6:	d04b      	beq.n	8003c60 <_printf_i+0x1a8>
 8003bc8:	4616      	mov	r6, r2
 8003bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bce:	fb03 5711 	mls	r7, r3, r1, r5
 8003bd2:	5dc7      	ldrb	r7, [r0, r7]
 8003bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bd8:	462f      	mov	r7, r5
 8003bda:	42bb      	cmp	r3, r7
 8003bdc:	460d      	mov	r5, r1
 8003bde:	d9f4      	bls.n	8003bca <_printf_i+0x112>
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d10b      	bne.n	8003bfc <_printf_i+0x144>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	07df      	lsls	r7, r3, #31
 8003be8:	d508      	bpl.n	8003bfc <_printf_i+0x144>
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	6861      	ldr	r1, [r4, #4]
 8003bee:	4299      	cmp	r1, r3
 8003bf0:	bfde      	ittt	le
 8003bf2:	2330      	movle	r3, #48	@ 0x30
 8003bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bf8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003bfc:	1b92      	subs	r2, r2, r6
 8003bfe:	6122      	str	r2, [r4, #16]
 8003c00:	f8cd a000 	str.w	sl, [sp]
 8003c04:	464b      	mov	r3, r9
 8003c06:	aa03      	add	r2, sp, #12
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	f7ff fee6 	bl	80039dc <_printf_common>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d14a      	bne.n	8003caa <_printf_i+0x1f2>
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c18:	b004      	add	sp, #16
 8003c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	4833      	ldr	r0, [pc, #204]	@ (8003cf4 <_printf_i+0x23c>)
 8003c28:	2778      	movs	r7, #120	@ 0x78
 8003c2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	6831      	ldr	r1, [r6, #0]
 8003c32:	061f      	lsls	r7, r3, #24
 8003c34:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c38:	d402      	bmi.n	8003c40 <_printf_i+0x188>
 8003c3a:	065f      	lsls	r7, r3, #25
 8003c3c:	bf48      	it	mi
 8003c3e:	b2ad      	uxthmi	r5, r5
 8003c40:	6031      	str	r1, [r6, #0]
 8003c42:	07d9      	lsls	r1, r3, #31
 8003c44:	bf44      	itt	mi
 8003c46:	f043 0320 	orrmi.w	r3, r3, #32
 8003c4a:	6023      	strmi	r3, [r4, #0]
 8003c4c:	b11d      	cbz	r5, 8003c56 <_printf_i+0x19e>
 8003c4e:	2310      	movs	r3, #16
 8003c50:	e7ac      	b.n	8003bac <_printf_i+0xf4>
 8003c52:	4827      	ldr	r0, [pc, #156]	@ (8003cf0 <_printf_i+0x238>)
 8003c54:	e7e9      	b.n	8003c2a <_printf_i+0x172>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f023 0320 	bic.w	r3, r3, #32
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	e7f6      	b.n	8003c4e <_printf_i+0x196>
 8003c60:	4616      	mov	r6, r2
 8003c62:	e7bd      	b.n	8003be0 <_printf_i+0x128>
 8003c64:	6833      	ldr	r3, [r6, #0]
 8003c66:	6825      	ldr	r5, [r4, #0]
 8003c68:	6961      	ldr	r1, [r4, #20]
 8003c6a:	1d18      	adds	r0, r3, #4
 8003c6c:	6030      	str	r0, [r6, #0]
 8003c6e:	062e      	lsls	r6, r5, #24
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	d501      	bpl.n	8003c78 <_printf_i+0x1c0>
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	e002      	b.n	8003c7e <_printf_i+0x1c6>
 8003c78:	0668      	lsls	r0, r5, #25
 8003c7a:	d5fb      	bpl.n	8003c74 <_printf_i+0x1bc>
 8003c7c:	8019      	strh	r1, [r3, #0]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6123      	str	r3, [r4, #16]
 8003c82:	4616      	mov	r6, r2
 8003c84:	e7bc      	b.n	8003c00 <_printf_i+0x148>
 8003c86:	6833      	ldr	r3, [r6, #0]
 8003c88:	1d1a      	adds	r2, r3, #4
 8003c8a:	6032      	str	r2, [r6, #0]
 8003c8c:	681e      	ldr	r6, [r3, #0]
 8003c8e:	6862      	ldr	r2, [r4, #4]
 8003c90:	2100      	movs	r1, #0
 8003c92:	4630      	mov	r0, r6
 8003c94:	f7fc fabc 	bl	8000210 <memchr>
 8003c98:	b108      	cbz	r0, 8003c9e <_printf_i+0x1e6>
 8003c9a:	1b80      	subs	r0, r0, r6
 8003c9c:	6060      	str	r0, [r4, #4]
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ca8:	e7aa      	b.n	8003c00 <_printf_i+0x148>
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	4632      	mov	r2, r6
 8003cae:	4649      	mov	r1, r9
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	47d0      	blx	sl
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d0ad      	beq.n	8003c14 <_printf_i+0x15c>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	079b      	lsls	r3, r3, #30
 8003cbc:	d413      	bmi.n	8003ce6 <_printf_i+0x22e>
 8003cbe:	68e0      	ldr	r0, [r4, #12]
 8003cc0:	9b03      	ldr	r3, [sp, #12]
 8003cc2:	4298      	cmp	r0, r3
 8003cc4:	bfb8      	it	lt
 8003cc6:	4618      	movlt	r0, r3
 8003cc8:	e7a6      	b.n	8003c18 <_printf_i+0x160>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4632      	mov	r2, r6
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	47d0      	blx	sl
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d09d      	beq.n	8003c14 <_printf_i+0x15c>
 8003cd8:	3501      	adds	r5, #1
 8003cda:	68e3      	ldr	r3, [r4, #12]
 8003cdc:	9903      	ldr	r1, [sp, #12]
 8003cde:	1a5b      	subs	r3, r3, r1
 8003ce0:	42ab      	cmp	r3, r5
 8003ce2:	dcf2      	bgt.n	8003cca <_printf_i+0x212>
 8003ce4:	e7eb      	b.n	8003cbe <_printf_i+0x206>
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	f104 0619 	add.w	r6, r4, #25
 8003cec:	e7f5      	b.n	8003cda <_printf_i+0x222>
 8003cee:	bf00      	nop
 8003cf0:	08003fdd 	.word	0x08003fdd
 8003cf4:	08003fee 	.word	0x08003fee

08003cf8 <__sflush_r>:
 8003cf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d00:	0716      	lsls	r6, r2, #28
 8003d02:	4605      	mov	r5, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	d454      	bmi.n	8003db2 <__sflush_r+0xba>
 8003d08:	684b      	ldr	r3, [r1, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	dc02      	bgt.n	8003d14 <__sflush_r+0x1c>
 8003d0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	dd48      	ble.n	8003da6 <__sflush_r+0xae>
 8003d14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d16:	2e00      	cmp	r6, #0
 8003d18:	d045      	beq.n	8003da6 <__sflush_r+0xae>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d20:	682f      	ldr	r7, [r5, #0]
 8003d22:	6a21      	ldr	r1, [r4, #32]
 8003d24:	602b      	str	r3, [r5, #0]
 8003d26:	d030      	beq.n	8003d8a <__sflush_r+0x92>
 8003d28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d2a:	89a3      	ldrh	r3, [r4, #12]
 8003d2c:	0759      	lsls	r1, r3, #29
 8003d2e:	d505      	bpl.n	8003d3c <__sflush_r+0x44>
 8003d30:	6863      	ldr	r3, [r4, #4]
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d36:	b10b      	cbz	r3, 8003d3c <__sflush_r+0x44>
 8003d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d40:	6a21      	ldr	r1, [r4, #32]
 8003d42:	4628      	mov	r0, r5
 8003d44:	47b0      	blx	r6
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	d106      	bne.n	8003d5a <__sflush_r+0x62>
 8003d4c:	6829      	ldr	r1, [r5, #0]
 8003d4e:	291d      	cmp	r1, #29
 8003d50:	d82b      	bhi.n	8003daa <__sflush_r+0xb2>
 8003d52:	4a2a      	ldr	r2, [pc, #168]	@ (8003dfc <__sflush_r+0x104>)
 8003d54:	410a      	asrs	r2, r1
 8003d56:	07d6      	lsls	r6, r2, #31
 8003d58:	d427      	bmi.n	8003daa <__sflush_r+0xb2>
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	6062      	str	r2, [r4, #4]
 8003d5e:	04d9      	lsls	r1, r3, #19
 8003d60:	6922      	ldr	r2, [r4, #16]
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	d504      	bpl.n	8003d70 <__sflush_r+0x78>
 8003d66:	1c42      	adds	r2, r0, #1
 8003d68:	d101      	bne.n	8003d6e <__sflush_r+0x76>
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	b903      	cbnz	r3, 8003d70 <__sflush_r+0x78>
 8003d6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d72:	602f      	str	r7, [r5, #0]
 8003d74:	b1b9      	cbz	r1, 8003da6 <__sflush_r+0xae>
 8003d76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	d002      	beq.n	8003d84 <__sflush_r+0x8c>
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f7ff fbf2 	bl	8003568 <_free_r>
 8003d84:	2300      	movs	r3, #0
 8003d86:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d88:	e00d      	b.n	8003da6 <__sflush_r+0xae>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	47b0      	blx	r6
 8003d90:	4602      	mov	r2, r0
 8003d92:	1c50      	adds	r0, r2, #1
 8003d94:	d1c9      	bne.n	8003d2a <__sflush_r+0x32>
 8003d96:	682b      	ldr	r3, [r5, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0c6      	beq.n	8003d2a <__sflush_r+0x32>
 8003d9c:	2b1d      	cmp	r3, #29
 8003d9e:	d001      	beq.n	8003da4 <__sflush_r+0xac>
 8003da0:	2b16      	cmp	r3, #22
 8003da2:	d11e      	bne.n	8003de2 <__sflush_r+0xea>
 8003da4:	602f      	str	r7, [r5, #0]
 8003da6:	2000      	movs	r0, #0
 8003da8:	e022      	b.n	8003df0 <__sflush_r+0xf8>
 8003daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	e01b      	b.n	8003dea <__sflush_r+0xf2>
 8003db2:	690f      	ldr	r7, [r1, #16]
 8003db4:	2f00      	cmp	r7, #0
 8003db6:	d0f6      	beq.n	8003da6 <__sflush_r+0xae>
 8003db8:	0793      	lsls	r3, r2, #30
 8003dba:	680e      	ldr	r6, [r1, #0]
 8003dbc:	bf08      	it	eq
 8003dbe:	694b      	ldreq	r3, [r1, #20]
 8003dc0:	600f      	str	r7, [r1, #0]
 8003dc2:	bf18      	it	ne
 8003dc4:	2300      	movne	r3, #0
 8003dc6:	eba6 0807 	sub.w	r8, r6, r7
 8003dca:	608b      	str	r3, [r1, #8]
 8003dcc:	f1b8 0f00 	cmp.w	r8, #0
 8003dd0:	dde9      	ble.n	8003da6 <__sflush_r+0xae>
 8003dd2:	6a21      	ldr	r1, [r4, #32]
 8003dd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003dd6:	4643      	mov	r3, r8
 8003dd8:	463a      	mov	r2, r7
 8003dda:	4628      	mov	r0, r5
 8003ddc:	47b0      	blx	r6
 8003dde:	2800      	cmp	r0, #0
 8003de0:	dc08      	bgt.n	8003df4 <__sflush_r+0xfc>
 8003de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dea:	81a3      	strh	r3, [r4, #12]
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df4:	4407      	add	r7, r0
 8003df6:	eba8 0800 	sub.w	r8, r8, r0
 8003dfa:	e7e7      	b.n	8003dcc <__sflush_r+0xd4>
 8003dfc:	dfbffffe 	.word	0xdfbffffe

08003e00 <_fflush_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	690b      	ldr	r3, [r1, #16]
 8003e04:	4605      	mov	r5, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	b913      	cbnz	r3, 8003e10 <_fflush_r+0x10>
 8003e0a:	2500      	movs	r5, #0
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	b118      	cbz	r0, 8003e1a <_fflush_r+0x1a>
 8003e12:	6a03      	ldr	r3, [r0, #32]
 8003e14:	b90b      	cbnz	r3, 8003e1a <_fflush_r+0x1a>
 8003e16:	f7ff f9ad 	bl	8003174 <__sinit>
 8003e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f3      	beq.n	8003e0a <_fflush_r+0xa>
 8003e22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e24:	07d0      	lsls	r0, r2, #31
 8003e26:	d404      	bmi.n	8003e32 <_fflush_r+0x32>
 8003e28:	0599      	lsls	r1, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_fflush_r+0x32>
 8003e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e2e:	f7ff fb98 	bl	8003562 <__retarget_lock_acquire_recursive>
 8003e32:	4628      	mov	r0, r5
 8003e34:	4621      	mov	r1, r4
 8003e36:	f7ff ff5f 	bl	8003cf8 <__sflush_r>
 8003e3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e3c:	07da      	lsls	r2, r3, #31
 8003e3e:	4605      	mov	r5, r0
 8003e40:	d4e4      	bmi.n	8003e0c <_fflush_r+0xc>
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	059b      	lsls	r3, r3, #22
 8003e46:	d4e1      	bmi.n	8003e0c <_fflush_r+0xc>
 8003e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e4a:	f7ff fb8b 	bl	8003564 <__retarget_lock_release_recursive>
 8003e4e:	e7dd      	b.n	8003e0c <_fflush_r+0xc>

08003e50 <__swhatbuf_r>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460c      	mov	r4, r1
 8003e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	b096      	sub	sp, #88	@ 0x58
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	461e      	mov	r6, r3
 8003e60:	da0d      	bge.n	8003e7e <__swhatbuf_r+0x2e>
 8003e62:	89a3      	ldrh	r3, [r4, #12]
 8003e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	bf14      	ite	ne
 8003e6e:	2340      	movne	r3, #64	@ 0x40
 8003e70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e74:	2000      	movs	r0, #0
 8003e76:	6031      	str	r1, [r6, #0]
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	b016      	add	sp, #88	@ 0x58
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	466a      	mov	r2, sp
 8003e80:	f000 f848 	bl	8003f14 <_fstat_r>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	dbec      	blt.n	8003e62 <__swhatbuf_r+0x12>
 8003e88:	9901      	ldr	r1, [sp, #4]
 8003e8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e92:	4259      	negs	r1, r3
 8003e94:	4159      	adcs	r1, r3
 8003e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e9a:	e7eb      	b.n	8003e74 <__swhatbuf_r+0x24>

08003e9c <__smakebuf_r>:
 8003e9c:	898b      	ldrh	r3, [r1, #12]
 8003e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ea0:	079d      	lsls	r5, r3, #30
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	d507      	bpl.n	8003eb8 <__smakebuf_r+0x1c>
 8003ea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	6163      	str	r3, [r4, #20]
 8003eb4:	b003      	add	sp, #12
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb8:	ab01      	add	r3, sp, #4
 8003eba:	466a      	mov	r2, sp
 8003ebc:	f7ff ffc8 	bl	8003e50 <__swhatbuf_r>
 8003ec0:	9f00      	ldr	r7, [sp, #0]
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	4639      	mov	r1, r7
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7ff fbba 	bl	8003640 <_malloc_r>
 8003ecc:	b948      	cbnz	r0, 8003ee2 <__smakebuf_r+0x46>
 8003ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed2:	059a      	lsls	r2, r3, #22
 8003ed4:	d4ee      	bmi.n	8003eb4 <__smakebuf_r+0x18>
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	e7e2      	b.n	8003ea8 <__smakebuf_r+0xc>
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	6020      	str	r0, [r4, #0]
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	9b01      	ldr	r3, [sp, #4]
 8003eee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ef2:	b15b      	cbz	r3, 8003f0c <__smakebuf_r+0x70>
 8003ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f000 f81d 	bl	8003f38 <_isatty_r>
 8003efe:	b128      	cbz	r0, 8003f0c <__smakebuf_r+0x70>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	431d      	orrs	r5, r3
 8003f10:	81a5      	strh	r5, [r4, #12]
 8003f12:	e7cf      	b.n	8003eb4 <__smakebuf_r+0x18>

08003f14 <_fstat_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d07      	ldr	r5, [pc, #28]	@ (8003f34 <_fstat_r+0x20>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	602b      	str	r3, [r5, #0]
 8003f22:	f7fc fe00 	bl	8000b26 <_fstat>
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	d102      	bne.n	8003f30 <_fstat_r+0x1c>
 8003f2a:	682b      	ldr	r3, [r5, #0]
 8003f2c:	b103      	cbz	r3, 8003f30 <_fstat_r+0x1c>
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	bd38      	pop	{r3, r4, r5, pc}
 8003f32:	bf00      	nop
 8003f34:	20000258 	.word	0x20000258

08003f38 <_isatty_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	4d06      	ldr	r5, [pc, #24]	@ (8003f54 <_isatty_r+0x1c>)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	602b      	str	r3, [r5, #0]
 8003f44:	f7fc fdff 	bl	8000b46 <_isatty>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_isatty_r+0x1a>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_isatty_r+0x1a>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000258 	.word	0x20000258

08003f58 <_sbrk_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4d06      	ldr	r5, [pc, #24]	@ (8003f74 <_sbrk_r+0x1c>)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	f7fc fe08 	bl	8000b78 <_sbrk>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_sbrk_r+0x1a>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_sbrk_r+0x1a>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	20000258 	.word	0x20000258

08003f78 <_init>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr

08003f84 <_fini>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	bf00      	nop
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr
