
nucleo_blink3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002578  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e4  080027e4  00004070  2**0
                  CONTENTS
  4 .ARM          00000008  080027e4  080027e4  000037e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027ec  080027ec  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ec  080027ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027f0  080027f0  000037f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080027f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  08002864  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08002864  0000422c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aba2  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b91  00000000  00000000  0000ec42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000045f5  00000000  00000000  000107d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  00014dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bd  00000000  00000000  00015570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dba  00000000  00000000  00015b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c7f8  00000000  00000000  000378e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca317  00000000  00000000  000440df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e3f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a68  00000000  00000000  0010e43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0010fea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002730 	.word	0x08002730

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002730 	.word	0x08002730

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b530      	push	{r4, r5, lr}
 80005a2:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	2400      	movs	r4, #0
 80005a6:	9405      	str	r4, [sp, #20]
 80005a8:	9406      	str	r4, [sp, #24]
 80005aa:	9407      	str	r4, [sp, #28]
 80005ac:	9408      	str	r4, [sp, #32]
 80005ae:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	9401      	str	r4, [sp, #4]
 80005b2:	4b26      	ldr	r3, [pc, #152]	@ (800064c <MX_GPIO_Init+0xac>)
 80005b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005b6:	f042 0204 	orr.w	r2, r2, #4
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80005bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005be:	f002 0204 	and.w	r2, r2, #4
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	9402      	str	r4, [sp, #8]
 80005c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80005ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80005d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80005d6:	9202      	str	r2, [sp, #8]
 80005d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	9403      	str	r4, [sp, #12]
 80005dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005de:	f042 0201 	orr.w	r2, r2, #1
 80005e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80005e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005e6:	f002 0201 	and.w	r2, r2, #1
 80005ea:	9203      	str	r2, [sp, #12]
 80005ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	9404      	str	r4, [sp, #16]
 80005f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f2:	f042 0202 	orr.w	r2, r2, #2
 80005f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	9304      	str	r3, [sp, #16]
 8000600:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000602:	4d13      	ldr	r5, [pc, #76]	@ (8000650 <MX_GPIO_Init+0xb0>)
 8000604:	4622      	mov	r2, r4
 8000606:	2120      	movs	r1, #32
 8000608:	4628      	mov	r0, r5
 800060a:	f000 fbb5 	bl	8000d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800060e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000612:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000614:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000618:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800061c:	a905      	add	r1, sp, #20
 800061e:	480d      	ldr	r0, [pc, #52]	@ (8000654 <MX_GPIO_Init+0xb4>)
 8000620:	f000 faba 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000624:	2320      	movs	r3, #32
 8000626:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000630:	a905      	add	r1, sp, #20
 8000632:	4628      	mov	r0, r5
 8000634:	f000 fab0 	bl	8000b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000638:	4622      	mov	r2, r4
 800063a:	4621      	mov	r1, r4
 800063c:	2028      	movs	r0, #40	@ 0x28
 800063e:	f000 fa83 	bl	8000b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000642:	2028      	movs	r0, #40	@ 0x28
 8000644:	f000 fa90 	bl	8000b68 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000648:	b00b      	add	sp, #44	@ 0x2c
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000
 8000654:	40020800 	.word	0x40020800

08000658 <_write>:
  if (fd == 1 || fd == 2) {
 8000658:	3801      	subs	r0, #1
 800065a:	2801      	cmp	r0, #1
 800065c:	d80a      	bhi.n	8000674 <_write+0x1c>
int _write(int fd, char* ptr, int len) {
 800065e:	b510      	push	{r4, lr}
 8000660:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000666:	b292      	uxth	r2, r2
 8000668:	4805      	ldr	r0, [pc, #20]	@ (8000680 <_write+0x28>)
 800066a:	f001 f8ca 	bl	8001802 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 800066e:	b920      	cbnz	r0, 800067a <_write+0x22>
      return len;
 8000670:	4620      	mov	r0, r4
}
 8000672:	bd10      	pop	{r4, pc}
  return -1;
 8000674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000678:	4770      	bx	lr
      return -1;
 800067a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800067e:	e7f8      	b.n	8000672 <_write+0x1a>
 8000680:	20000090 	.word	0x20000090

08000684 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == BTN_Pin){
 8000684:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000688:	d000      	beq.n	800068c <HAL_GPIO_EXTI_Callback+0x8>
}
 800068a:	4770      	bx	lr
		btn_press = 1;
 800068c:	4b01      	ldr	r3, [pc, #4]	@ (8000694 <HAL_GPIO_EXTI_Callback+0x10>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
}
 8000692:	e7fa      	b.n	800068a <HAL_GPIO_EXTI_Callback+0x6>
 8000694:	2000008c 	.word	0x2000008c

08000698 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069a:	e7fe      	b.n	800069a <Error_Handler+0x2>

0800069c <MX_USART2_UART_Init>:
{
 800069c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800069e:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <MX_USART2_UART_Init+0x2c>)
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <MX_USART2_UART_Init+0x30>)
 80006a2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80006a4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80006a8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	2300      	movs	r3, #0
 80006ac:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ae:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b2:	220c      	movs	r2, #12
 80006b4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	f001 f872 	bl	80017a2 <HAL_UART_Init>
 80006be:	b900      	cbnz	r0, 80006c2 <MX_USART2_UART_Init+0x26>
}
 80006c0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006c2:	f7ff ffe9 	bl	8000698 <Error_Handler>
 80006c6:	bf00      	nop
 80006c8:	20000090 	.word	0x20000090
 80006cc:	40004400 	.word	0x40004400

080006d0 <SystemClock_Config>:
{
 80006d0:	b500      	push	{lr}
 80006d2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d4:	2234      	movs	r2, #52	@ 0x34
 80006d6:	2100      	movs	r1, #0
 80006d8:	a807      	add	r0, sp, #28
 80006da:	f001 fa10 	bl	8001afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006de:	2300      	movs	r3, #0
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	9303      	str	r3, [sp, #12]
 80006e4:	9304      	str	r3, [sp, #16]
 80006e6:	9305      	str	r3, [sp, #20]
 80006e8:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4a23      	ldr	r2, [pc, #140]	@ (800077c <SystemClock_Config+0xac>)
 80006ee:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80006f0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80006f4:	6411      	str	r1, [r2, #64]	@ 0x40
 80006f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80006f8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80006fc:	9200      	str	r2, [sp, #0]
 80006fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <SystemClock_Config+0xb0>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000716:	2301      	movs	r3, #1
 8000718:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800071e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000724:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000728:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072a:	2204      	movs	r2, #4
 800072c:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800072e:	22b4      	movs	r2, #180	@ 0xb4
 8000730:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000732:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000734:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000736:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	a807      	add	r0, sp, #28
 800073a:	f000 fd17 	bl	800116c <HAL_RCC_OscConfig>
 800073e:	b9b0      	cbnz	r0, 800076e <SystemClock_Config+0x9e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000740:	f000 fb38 	bl	8000db4 <HAL_PWREx_EnableOverDrive>
 8000744:	b9a8      	cbnz	r0, 8000772 <SystemClock_Config+0xa2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000752:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000756:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075e:	2105      	movs	r1, #5
 8000760:	a802      	add	r0, sp, #8
 8000762:	f000 fb65 	bl	8000e30 <HAL_RCC_ClockConfig>
 8000766:	b930      	cbnz	r0, 8000776 <SystemClock_Config+0xa6>
}
 8000768:	b015      	add	sp, #84	@ 0x54
 800076a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800076e:	f7ff ff93 	bl	8000698 <Error_Handler>
    Error_Handler();
 8000772:	f7ff ff91 	bl	8000698 <Error_Handler>
    Error_Handler();
 8000776:	f7ff ff8f 	bl	8000698 <Error_Handler>
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <main>:
{
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8000786:	f000 f95f 	bl	8000a48 <HAL_Init>
  SystemClock_Config();
 800078a:	f7ff ffa1 	bl	80006d0 <SystemClock_Config>
  MX_GPIO_Init();
 800078e:	f7ff ff07 	bl	80005a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f7ff ff83 	bl	800069c <MX_USART2_UART_Init>
  uint32_t now = 0, next_blink = 1000, next_tick = 1000, loop_cnt = 0;
 8000796:	2500      	movs	r5, #0
 8000798:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 800079c:	463e      	mov	r6, r7
 800079e:	e022      	b.n	80007e6 <main+0x62>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007a0:	2120      	movs	r1, #32
 80007a2:	481f      	ldr	r0, [pc, #124]	@ (8000820 <main+0x9c>)
 80007a4:	f000 faee 	bl	8000d84 <HAL_GPIO_TogglePin>
		  next_blink = now + btn_speeds[btn_speed];
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <main+0xa0>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <main+0xa4>)
 80007ae:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
 80007b2:	4426      	add	r6, r4
 80007b4:	e01c      	b.n	80007f0 <main+0x6c>
		  printf("Tick: %lu\nLoop Count: %lu\n", now / 1000,loop_cnt);
 80007b6:	491d      	ldr	r1, [pc, #116]	@ (800082c <main+0xa8>)
 80007b8:	fba1 3104 	umull	r3, r1, r1, r4
 80007bc:	462a      	mov	r2, r5
 80007be:	0989      	lsrs	r1, r1, #6
 80007c0:	481b      	ldr	r0, [pc, #108]	@ (8000830 <main+0xac>)
 80007c2:	f001 f947 	bl	8001a54 <iprintf>
		  next_tick = now + 1000;
 80007c6:	f504 777a 	add.w	r7, r4, #1000	@ 0x3e8
		  loop_cnt = 0;
 80007ca:	2500      	movs	r5, #0
 80007cc:	e012      	b.n	80007f4 <main+0x70>
		  printf("LED speed set to %d\n",btn_speeds[btn_speed]);
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <main+0xa0>)
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <main+0xa4>)
 80007d4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80007d8:	4816      	ldr	r0, [pc, #88]	@ (8000834 <main+0xb0>)
 80007da:	f001 f93b 	bl	8001a54 <iprintf>
		  btn_press = 0;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <main+0xb4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	  ++loop_cnt;
 80007e4:	3501      	adds	r5, #1
	  now = HAL_GetTick();
 80007e6:	f000 f955 	bl	8000a94 <HAL_GetTick>
 80007ea:	4604      	mov	r4, r0
	  if (now >= next_blink){
 80007ec:	4286      	cmp	r6, r0
 80007ee:	d9d7      	bls.n	80007a0 <main+0x1c>
	  if (now >= next_tick){
 80007f0:	42a7      	cmp	r7, r4
 80007f2:	d9e0      	bls.n	80007b6 <main+0x32>
	  if (btn_press){
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <main+0xb4>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0f3      	beq.n	80007e4 <main+0x60>
		  printf("Button pressed at tick %lu\n",now / 1000);
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <main+0xa8>)
 80007fe:	fba3 3104 	umull	r3, r1, r3, r4
 8000802:	0989      	lsrs	r1, r1, #6
 8000804:	480d      	ldr	r0, [pc, #52]	@ (800083c <main+0xb8>)
 8000806:	f001 f925 	bl	8001a54 <iprintf>
		  ++btn_speed;
 800080a:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <main+0xa0>)
 800080c:	7813      	ldrb	r3, [r2, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	7013      	strb	r3, [r2, #0]
		  if (btn_speed >= sizeof(btn_speeds) / sizeof(btn_speeds[0])){
 8000814:	2b03      	cmp	r3, #3
 8000816:	d9da      	bls.n	80007ce <main+0x4a>
			  btn_speed = 0;
 8000818:	4613      	mov	r3, r2
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e7d6      	b.n	80007ce <main+0x4a>
 8000820:	40020000 	.word	0x40020000
 8000824:	2000008d 	.word	0x2000008d
 8000828:	20000000 	.word	0x20000000
 800082c:	10624dd3 	.word	0x10624dd3
 8000830:	08002748 	.word	0x08002748
 8000834:	08002780 	.word	0x08002780
 8000838:	2000008c 	.word	0x2000008c
 800083c:	08002764 	.word	0x08002764

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b500      	push	{lr}
 8000842:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000844:	2100      	movs	r1, #0
 8000846:	9100      	str	r1, [sp, #0]
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_MspInit+0x3c>)
 800084a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800084c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000850:	645a      	str	r2, [r3, #68]	@ 0x44
 8000852:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000854:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000858:	9200      	str	r2, [sp, #0]
 800085a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	9101      	str	r1, [sp, #4]
 800085e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000860:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000864:	641a      	str	r2, [r3, #64]	@ 0x40
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000870:	2007      	movs	r0, #7
 8000872:	f000 f957 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	b003      	add	sp, #12
 8000878:	f85d fb04 	ldr.w	pc, [sp], #4
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b500      	push	{lr}
 8000882:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	2300      	movs	r3, #0
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	9304      	str	r3, [sp, #16]
 800088a:	9305      	str	r3, [sp, #20]
 800088c:	9306      	str	r3, [sp, #24]
 800088e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000890:	6802      	ldr	r2, [r0, #0]
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <HAL_UART_MspInit+0x68>)
 8000894:	429a      	cmp	r2, r3
 8000896:	d002      	beq.n	800089e <HAL_UART_MspInit+0x1e>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000898:	b009      	add	sp, #36	@ 0x24
 800089a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	2100      	movs	r1, #0
 80008a0:	9101      	str	r1, [sp, #4]
 80008a2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80008a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008a8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80008ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80008ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008b0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	9102      	str	r1, [sp, #8]
 80008ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008bc:	f042 0201 	orr.w	r2, r2, #1
 80008c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80008c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008cc:	230c      	movs	r3, #12
 80008ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d8:	2307      	movs	r3, #7
 80008da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	a903      	add	r1, sp, #12
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <HAL_UART_MspInit+0x6c>)
 80008e0:	f000 f95a 	bl	8000b98 <HAL_GPIO_Init>
}
 80008e4:	e7d8      	b.n	8000898 <HAL_UART_MspInit+0x18>
 80008e6:	bf00      	nop
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40020000 	.word	0x40020000

080008f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler>

080008f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler>

080008f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler>

080008f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler>

080008f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler>

080008fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fa:	4770      	bx	lr

080008fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000902:	f000 f8bb 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000906:	bd08      	pop	{r3, pc}

08000908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000908:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800090a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800090e:	f000 fa43 	bl	8000d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000912:	bd08      	pop	{r3, pc}

08000914 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000914:	b570      	push	{r4, r5, r6, lr}
 8000916:	460c      	mov	r4, r1
 8000918:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	2500      	movs	r5, #0
 800091c:	e006      	b.n	800092c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800091e:	f3af 8000 	nop.w
 8000922:	4621      	mov	r1, r4
 8000924:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800092a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092c:	42b5      	cmp	r5, r6
 800092e:	dbf6      	blt.n	800091e <_read+0xa>
  }

  return len;
}
 8000930:	4630      	mov	r0, r6
 8000932:	bd70      	pop	{r4, r5, r6, pc}

08000934 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000938:	4770      	bx	lr

0800093a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800093a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000940:	2000      	movs	r0, #0
 8000942:	4770      	bx	lr

08000944 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000944:	2001      	movs	r0, #1
 8000946:	4770      	bx	lr

08000948 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000948:	2000      	movs	r0, #0
 800094a:	4770      	bx	lr

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b510      	push	{r4, lr}
 800094e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a0c      	ldr	r2, [pc, #48]	@ (8000984 <_sbrk+0x38>)
 8000952:	490d      	ldr	r1, [pc, #52]	@ (8000988 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	480d      	ldr	r0, [pc, #52]	@ (800098c <_sbrk+0x40>)
 8000956:	6800      	ldr	r0, [r0, #0]
 8000958:	b140      	cbz	r0, 800096c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095a:	480c      	ldr	r0, [pc, #48]	@ (800098c <_sbrk+0x40>)
 800095c:	6800      	ldr	r0, [r0, #0]
 800095e:	4403      	add	r3, r0
 8000960:	1a52      	subs	r2, r2, r1
 8000962:	4293      	cmp	r3, r2
 8000964:	d806      	bhi.n	8000974 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000966:	4a09      	ldr	r2, [pc, #36]	@ (800098c <_sbrk+0x40>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800096a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <_sbrk+0x40>)
 800096e:	4c08      	ldr	r4, [pc, #32]	@ (8000990 <_sbrk+0x44>)
 8000970:	6004      	str	r4, [r0, #0]
 8000972:	e7f2      	b.n	800095a <_sbrk+0xe>
    errno = ENOMEM;
 8000974:	f001 f912 	bl	8001b9c <__errno>
 8000978:	230c      	movs	r3, #12
 800097a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800097c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000980:	e7f3      	b.n	800096a <_sbrk+0x1e>
 8000982:	bf00      	nop
 8000984:	20020000 	.word	0x20020000
 8000988:	00000400 	.word	0x00000400
 800098c:	200000d8 	.word	0x200000d8
 8000990:	20000230 	.word	0x20000230

08000994 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4a03      	ldr	r2, [pc, #12]	@ (80009a4 <SystemInit+0x10>)
 8000996:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800099a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800099e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009ac:	f7ff fff2 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f001 f8e7 	bl	8001ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fed3 	bl	8000784 <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009ec:	080027f4 	.word	0x080027f4
  ldr r2, =_sbss
 80009f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009f4:	2000022c 	.word	0x2000022c

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_InitTick+0x40>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a40 <HAL_InitTick+0x44>)
 8000a0e:	6810      	ldr	r0, [r2, #0]
 8000a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a14:	f000 f8ac 	bl	8000b70 <HAL_SYSTICK_Config>
 8000a18:	b968      	cbnz	r0, 8000a36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	2c0f      	cmp	r4, #15
 8000a1c:	d901      	bls.n	8000a22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
 8000a20:	e00a      	b.n	8000a38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	2200      	movs	r2, #0
 8000a24:	4621      	mov	r1, r4
 8000a26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a2a:	f000 f88d 	bl	8000b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2e:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_InitTick+0x48>)
 8000a30:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2000      	movs	r0, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
}
 8000a38:	bd10      	pop	{r4, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000000c 	.word	0x2000000c
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000010 	.word	0x20000010

08000a48 <HAL_Init>:
{
 8000a48:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <HAL_Init+0x30>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a5a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a62:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f85d 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffc6 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a70:	f7ff fee6 	bl	8000840 <HAL_MspInit>
}
 8000a74:	2000      	movs	r0, #0
 8000a76:	bd08      	pop	{r3, pc}
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a7c:	4a03      	ldr	r2, [pc, #12]	@ (8000a8c <HAL_IncTick+0x10>)
 8000a7e:	6811      	ldr	r1, [r2, #0]
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <HAL_IncTick+0x14>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	440b      	add	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200000dc 	.word	0x200000dc
 8000a90:	2000000c 	.word	0x2000000c

08000a94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a94:	4b01      	ldr	r3, [pc, #4]	@ (8000a9c <HAL_GetTick+0x8>)
 8000a96:	6818      	ldr	r0, [r3, #0]
}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200000dc 	.word	0x200000dc

08000aa0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	db07      	blt.n	8000ab4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa4:	f000 021f 	and.w	r2, r0, #31
 8000aa8:	0940      	lsrs	r0, r0, #5
 8000aaa:	2301      	movs	r3, #1
 8000aac:	4093      	lsls	r3, r2
 8000aae:	4a02      	ldr	r2, [pc, #8]	@ (8000ab8 <__NVIC_EnableIRQ+0x18>)
 8000ab0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000abc:	2800      	cmp	r0, #0
 8000abe:	db08      	blt.n	8000ad2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	0109      	lsls	r1, r1, #4
 8000ac2:	b2c9      	uxtb	r1, r1
 8000ac4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000ac8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000acc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000ad0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	f000 000f 	and.w	r0, r0, #15
 8000ad6:	0109      	lsls	r1, r1, #4
 8000ad8:	b2c9      	uxtb	r1, r1
 8000ada:	4b01      	ldr	r3, [pc, #4]	@ (8000ae0 <__NVIC_SetPriority+0x24>)
 8000adc:	5419      	strb	r1, [r3, r0]
  }
}
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed14 	.word	0xe000ed14

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aea:	f1c0 0c07 	rsb	ip, r0, #7
 8000aee:	f1bc 0f04 	cmp.w	ip, #4
 8000af2:	bf28      	it	cs
 8000af4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af8:	1d03      	adds	r3, r0, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d90f      	bls.n	8000b1e <NVIC_EncodePriority+0x3a>
 8000afe:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000b04:	fa0e f00c 	lsl.w	r0, lr, ip
 8000b08:	ea21 0100 	bic.w	r1, r1, r0
 8000b0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b12:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000b16:	ea41 0002 	orr.w	r0, r1, r2
 8000b1a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e7ee      	b.n	8000b00 <NVIC_EncodePriority+0x1c>
	...

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b28:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b2c:	041b      	lsls	r3, r3, #16
 8000b2e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	0200      	lsls	r0, r0, #8
 8000b32:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b36:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b40:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_NVIC_SetPriority+0x1c>)
 8000b4e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b50:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b54:	f7ff ffc6 	bl	8000ae4 <NVIC_EncodePriority>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f7ff ffae 	bl	8000abc <__NVIC_SetPriority>
}
 8000b60:	bd10      	pop	{r4, pc}
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6a:	f7ff ff99 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000b6e:	bd08      	pop	{r3, pc}

08000b70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	3801      	subs	r0, #1
 8000b72:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b76:	d20b      	bcs.n	8000b90 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b7c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <HAL_SYSTICK_Config+0x24>)
 8000b80:	21f0      	movs	r1, #240	@ 0xf0
 8000b82:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b86:	2000      	movs	r0, #0
 8000b88:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b90:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	f200 80e3 	bhi.w	8000d66 <HAL_GPIO_Init+0x1ce>
{
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	e065      	b.n	8000c72 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ba6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000bac:	2403      	movs	r4, #3
 8000bae:	fa04 f40e 	lsl.w	r4, r4, lr
 8000bb2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb6:	68cc      	ldr	r4, [r1, #12]
 8000bb8:	fa04 f40e 	lsl.w	r4, r4, lr
 8000bbc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000bbe:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc6:	684a      	ldr	r2, [r1, #4]
 8000bc8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000bd0:	6042      	str	r2, [r0, #4]
 8000bd2:	e05c      	b.n	8000c8e <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd4:	08dc      	lsrs	r4, r3, #3
 8000bd6:	3408      	adds	r4, #8
 8000bd8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bdc:	f003 0507 	and.w	r5, r3, #7
 8000be0:	00ad      	lsls	r5, r5, #2
 8000be2:	f04f 0e0f 	mov.w	lr, #15
 8000be6:	fa0e fe05 	lsl.w	lr, lr, r5
 8000bea:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bee:	690a      	ldr	r2, [r1, #16]
 8000bf0:	40aa      	lsls	r2, r5
 8000bf2:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000bf6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000bfa:	e05c      	b.n	8000cb6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bfc:	2206      	movs	r2, #6
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x6a>
 8000c00:	2200      	movs	r2, #0
 8000c02:	fa02 f20e 	lsl.w	r2, r2, lr
 8000c06:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c08:	3402      	adds	r4, #2
 8000c0a:	4d57      	ldr	r5, [pc, #348]	@ (8000d68 <HAL_GPIO_Init+0x1d0>)
 8000c0c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c10:	4a56      	ldr	r2, [pc, #344]	@ (8000d6c <HAL_GPIO_Init+0x1d4>)
 8000c12:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c14:	ea6f 020c 	mvn.w	r2, ip
 8000c18:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c1c:	684e      	ldr	r6, [r1, #4]
 8000c1e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000c22:	d001      	beq.n	8000c28 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000c24:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000c28:	4c50      	ldr	r4, [pc, #320]	@ (8000d6c <HAL_GPIO_Init+0x1d4>)
 8000c2a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000c2c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c32:	684e      	ldr	r6, [r1, #4]
 8000c34:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000c38:	d001      	beq.n	8000c3e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000c3a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000c3e:	4c4b      	ldr	r4, [pc, #300]	@ (8000d6c <HAL_GPIO_Init+0x1d4>)
 8000c40:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000c42:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c44:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c48:	684e      	ldr	r6, [r1, #4]
 8000c4a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000c4e:	d001      	beq.n	8000c54 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000c50:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000c54:	4c45      	ldr	r4, [pc, #276]	@ (8000d6c <HAL_GPIO_Init+0x1d4>)
 8000c56:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c58:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c5a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c5c:	684d      	ldr	r5, [r1, #4]
 8000c5e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000c62:	d001      	beq.n	8000c68 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000c64:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000c68:	4c40      	ldr	r4, [pc, #256]	@ (8000d6c <HAL_GPIO_Init+0x1d4>)
 8000c6a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d877      	bhi.n	8000d62 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000c72:	2201      	movs	r2, #1
 8000c74:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c76:	680c      	ldr	r4, [r1, #0]
 8000c78:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000c7c:	ea32 0404 	bics.w	r4, r2, r4
 8000c80:	d1f4      	bne.n	8000c6c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	684c      	ldr	r4, [r1, #4]
 8000c84:	f004 0403 	and.w	r4, r4, #3
 8000c88:	3c01      	subs	r4, #1
 8000c8a:	2c01      	cmp	r4, #1
 8000c8c:	d98b      	bls.n	8000ba6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8e:	684a      	ldr	r2, [r1, #4]
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	2a03      	cmp	r2, #3
 8000c96:	d009      	beq.n	8000cac <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000c98:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	005d      	lsls	r5, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	40aa      	lsls	r2, r5
 8000ca0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca4:	688a      	ldr	r2, [r1, #8]
 8000ca6:	40aa      	lsls	r2, r5
 8000ca8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000caa:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cac:	684a      	ldr	r2, [r1, #4]
 8000cae:	f002 0203 	and.w	r2, r2, #3
 8000cb2:	2a02      	cmp	r2, #2
 8000cb4:	d08e      	beq.n	8000bd4 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000cb6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cb8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cc2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc6:	684a      	ldr	r2, [r1, #4]
 8000cc8:	f002 0203 	and.w	r2, r2, #3
 8000ccc:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cd0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000cd2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd4:	684a      	ldr	r2, [r1, #4]
 8000cd6:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000cda:	d0c7      	beq.n	8000c6c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	2200      	movs	r2, #0
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <HAL_GPIO_Init+0x1d8>)
 8000ce2:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000ce4:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000ce8:	6454      	str	r4, [r2, #68]	@ 0x44
 8000cea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000cec:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000cf0:	9201      	str	r2, [sp, #4]
 8000cf2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf4:	089c      	lsrs	r4, r3, #2
 8000cf6:	1ca5      	adds	r5, r4, #2
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <HAL_GPIO_Init+0x1d0>)
 8000cfa:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cfe:	f003 0e03 	and.w	lr, r3, #3
 8000d02:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d0c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d10:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <HAL_GPIO_Init+0x1dc>)
 8000d12:	4290      	cmp	r0, r2
 8000d14:	f43f af74 	beq.w	8000c00 <HAL_GPIO_Init+0x68>
 8000d18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d016      	beq.n	8000d4e <HAL_GPIO_Init+0x1b6>
 8000d20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d014      	beq.n	8000d52 <HAL_GPIO_Init+0x1ba>
 8000d28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d012      	beq.n	8000d56 <HAL_GPIO_Init+0x1be>
 8000d30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d34:	4290      	cmp	r0, r2
 8000d36:	d010      	beq.n	8000d5a <HAL_GPIO_Init+0x1c2>
 8000d38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	d00e      	beq.n	8000d5e <HAL_GPIO_Init+0x1c6>
 8000d40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f43f af59 	beq.w	8000bfc <HAL_GPIO_Init+0x64>
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	e759      	b.n	8000c02 <HAL_GPIO_Init+0x6a>
 8000d4e:	2201      	movs	r2, #1
 8000d50:	e757      	b.n	8000c02 <HAL_GPIO_Init+0x6a>
 8000d52:	2202      	movs	r2, #2
 8000d54:	e755      	b.n	8000c02 <HAL_GPIO_Init+0x6a>
 8000d56:	2203      	movs	r2, #3
 8000d58:	e753      	b.n	8000c02 <HAL_GPIO_Init+0x6a>
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	e751      	b.n	8000c02 <HAL_GPIO_Init+0x6a>
 8000d5e:	2205      	movs	r2, #5
 8000d60:	e74f      	b.n	8000c02 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000d62:	b002      	add	sp, #8
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	4770      	bx	lr
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40013c00 	.word	0x40013c00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d78:	b10a      	cbz	r2, 8000d7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d7a:	6181      	str	r1, [r0, #24]
 8000d7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d7e:	0409      	lsls	r1, r1, #16
 8000d80:	6181      	str	r1, [r0, #24]
  }
}
 8000d82:	4770      	bx	lr

08000d84 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d84:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d86:	ea01 0203 	and.w	r2, r1, r3
 8000d8a:	ea21 0103 	bic.w	r1, r1, r3
 8000d8e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d92:	6181      	str	r1, [r0, #24]
}
 8000d94:	4770      	bx	lr
	...

08000d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d98:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d9a:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4203      	tst	r3, r0
 8000da0:	d100      	bne.n	8000da4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000da2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000da4:	4b02      	ldr	r3, [pc, #8]	@ (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000da6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000da8:	f7ff fc6c 	bl	8000684 <HAL_GPIO_EXTI_Callback>
}
 8000dac:	e7f9      	b.n	8000da2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000dae:	bf00      	nop
 8000db0:	40013c00 	.word	0x40013c00

08000db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000db4:	b510      	push	{r4, lr}
 8000db6:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_PWREx_EnableOverDrive+0x70>)
 8000dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dc0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000dc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_PWREx_EnableOverDrive+0x74>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd6:	f7ff fe5d 	bl	8000a94 <HAL_GetTick>
 8000dda:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_PWREx_EnableOverDrive+0x78>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000de4:	d108      	bne.n	8000df8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000de6:	f7ff fe55 	bl	8000a94 <HAL_GetTick>
 8000dea:	1b00      	subs	r0, r0, r4
 8000dec:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000df0:	d9f4      	bls.n	8000ddc <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000df2:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000df4:	b002      	add	sp, #8
 8000df6:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_PWREx_EnableOverDrive+0x74>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8000dfe:	f7ff fe49 	bl	8000a94 <HAL_GetTick>
 8000e02:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e04:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_PWREx_EnableOverDrive+0x78>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e0c:	d107      	bne.n	8000e1e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e0e:	f7ff fe41 	bl	8000a94 <HAL_GetTick>
 8000e12:	1b00      	subs	r0, r0, r4
 8000e14:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000e18:	d9f4      	bls.n	8000e04 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	e7ea      	b.n	8000df4 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000e1e:	2000      	movs	r0, #0
 8000e20:	e7e8      	b.n	8000df4 <HAL_PWREx_EnableOverDrive+0x40>
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	420e0000 	.word	0x420e0000
 8000e2c:	40007000 	.word	0x40007000

08000e30 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e30:	2800      	cmp	r0, #0
 8000e32:	f000 809b 	beq.w	8000f6c <HAL_RCC_ClockConfig+0x13c>
{
 8000e36:	b570      	push	{r4, r5, r6, lr}
 8000e38:	460d      	mov	r5, r1
 8000e3a:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <HAL_RCC_ClockConfig+0x14c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 030f 	and.w	r3, r3, #15
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d208      	bcs.n	8000e5a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e48:	b2cb      	uxtb	r3, r1
 8000e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8000f7c <HAL_RCC_ClockConfig+0x14c>)
 8000e4c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e4e:	6813      	ldr	r3, [r2, #0]
 8000e50:	f003 030f 	and.w	r3, r3, #15
 8000e54:	428b      	cmp	r3, r1
 8000e56:	f040 808b 	bne.w	8000f70 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	f013 0f02 	tst.w	r3, #2
 8000e60:	d017      	beq.n	8000e92 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e62:	f013 0f04 	tst.w	r3, #4
 8000e66:	d004      	beq.n	8000e72 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e68:	4a45      	ldr	r2, [pc, #276]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000e6a:	6893      	ldr	r3, [r2, #8]
 8000e6c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000e70:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	f013 0f08 	tst.w	r3, #8
 8000e78:	d004      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e7a:	4a41      	ldr	r2, [pc, #260]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000e7c:	6893      	ldr	r3, [r2, #8]
 8000e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e84:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000e86:	6893      	ldr	r3, [r2, #8]
 8000e88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e8c:	68a1      	ldr	r1, [r4, #8]
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f013 0f01 	tst.w	r3, #1
 8000e98:	d032      	beq.n	8000f00 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e9a:	6863      	ldr	r3, [r4, #4]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d021      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ea0:	1e9a      	subs	r2, r3, #2
 8000ea2:	2a01      	cmp	r2, #1
 8000ea4:	d925      	bls.n	8000ef2 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea6:	4a36      	ldr	r2, [pc, #216]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	f012 0f02 	tst.w	r2, #2
 8000eae:	d061      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb0:	4933      	ldr	r1, [pc, #204]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000eb2:	688a      	ldr	r2, [r1, #8]
 8000eb4:	f022 0203 	bic.w	r2, r2, #3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ebc:	f7ff fdea 	bl	8000a94 <HAL_GetTick>
 8000ec0:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	6862      	ldr	r2, [r4, #4]
 8000ecc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ed0:	d016      	beq.n	8000f00 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed2:	f7ff fddf 	bl	8000a94 <HAL_GetTick>
 8000ed6:	1b80      	subs	r0, r0, r6
 8000ed8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000edc:	4298      	cmp	r0, r3
 8000ede:	d9f0      	bls.n	8000ec2 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	e042      	b.n	8000f6a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee4:	4a26      	ldr	r2, [pc, #152]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000eec:	d1e0      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
 8000ef0:	e03b      	b.n	8000f6a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef2:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000efa:	d1d9      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000efc:	2001      	movs	r0, #1
 8000efe:	e034      	b.n	8000f6a <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f00:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_RCC_ClockConfig+0x14c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	42ab      	cmp	r3, r5
 8000f0a:	d907      	bls.n	8000f1c <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0c:	b2ea      	uxtb	r2, r5
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_RCC_ClockConfig+0x14c>)
 8000f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	42ab      	cmp	r3, r5
 8000f1a:	d12d      	bne.n	8000f78 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	f013 0f04 	tst.w	r3, #4
 8000f22:	d006      	beq.n	8000f32 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f24:	4a16      	ldr	r2, [pc, #88]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000f26:	6893      	ldr	r3, [r2, #8]
 8000f28:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000f2c:	68e1      	ldr	r1, [r4, #12]
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	f013 0f08 	tst.w	r3, #8
 8000f38:	d007      	beq.n	8000f4a <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f3a:	4a11      	ldr	r2, [pc, #68]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000f3c:	6893      	ldr	r3, [r2, #8]
 8000f3e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000f42:	6921      	ldr	r1, [r4, #16]
 8000f44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f48:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f4a:	f000 f847 	bl	8000fdc <HAL_RCC_GetSysClockFreq>
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <HAL_RCC_ClockConfig+0x150>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f56:	4a0b      	ldr	r2, [pc, #44]	@ (8000f84 <HAL_RCC_ClockConfig+0x154>)
 8000f58:	5cd3      	ldrb	r3, [r2, r3]
 8000f5a:	40d8      	lsrs	r0, r3
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_RCC_ClockConfig+0x158>)
 8000f5e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_RCC_ClockConfig+0x15c>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	f7ff fd4a 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8000f68:	2000      	movs	r0, #0
}
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
}
 8000f6e:	4770      	bx	lr
      return HAL_ERROR;
 8000f70:	2001      	movs	r0, #1
 8000f72:	e7fa      	b.n	8000f6a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
 8000f76:	e7f8      	b.n	8000f6a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8000f78:	2001      	movs	r0, #1
 8000f7a:	e7f6      	b.n	8000f6a <HAL_RCC_ClockConfig+0x13a>
 8000f7c:	40023c00 	.word	0x40023c00
 8000f80:	40023800 	.word	0x40023800
 8000f84:	080027a0 	.word	0x080027a0
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000010 	.word	0x20000010

08000f90 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f90:	4b01      	ldr	r3, [pc, #4]	@ (8000f98 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f9c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f9e:	f7ff fff7 	bl	8000f90 <HAL_RCC_GetHCLKFreq>
 8000fa2:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000faa:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
}
 8000fae:	40d8      	lsrs	r0, r3
 8000fb0:	bd08      	pop	{r3, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	08002798 	.word	0x08002798

08000fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fbc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fbe:	f7ff ffe7 	bl	8000f90 <HAL_RCC_GetHCLKFreq>
 8000fc2:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000fca:	4a03      	ldr	r2, [pc, #12]	@ (8000fd8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
}
 8000fce:	40d8      	lsrs	r0, r3
 8000fd0:	bd08      	pop	{r3, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	08002798 	.word	0x08002798

08000fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fdc:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fde:	4b60      	ldr	r3, [pc, #384]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d007      	beq.n	8000ffa <HAL_RCC_GetSysClockFreq+0x1e>
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d05f      	beq.n	80010ae <HAL_RCC_GetSysClockFreq+0xd2>
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_GetSysClockFreq+0x1a>
 8000ff2:	485c      	ldr	r0, [pc, #368]	@ (8001164 <HAL_RCC_GetSysClockFreq+0x188>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ff4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ff6:	485c      	ldr	r0, [pc, #368]	@ (8001168 <HAL_RCC_GetSysClockFreq+0x18c>)
 8000ff8:	e7fc      	b.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ffa:	4b59      	ldr	r3, [pc, #356]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001008:	d02c      	beq.n	8001064 <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800100a:	4b55      	ldr	r3, [pc, #340]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 800100c:	6858      	ldr	r0, [r3, #4]
 800100e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001012:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001016:	ebbc 0c00 	subs.w	ip, ip, r0
 800101a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800101e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001022:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001026:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800102a:	ebb1 010c 	subs.w	r1, r1, ip
 800102e:	eb63 030e 	sbc.w	r3, r3, lr
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001038:	00c9      	lsls	r1, r1, #3
 800103a:	eb11 0c00 	adds.w	ip, r1, r0
 800103e:	f143 0300 	adc.w	r3, r3, #0
 8001042:	0259      	lsls	r1, r3, #9
 8001044:	2300      	movs	r3, #0
 8001046:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800104a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800104e:	f7ff f92f 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001052:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800105a:	3301      	adds	r3, #1
 800105c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800105e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001062:	e7c7      	b.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001064:	4b3e      	ldr	r3, [pc, #248]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 8001066:	6858      	ldr	r0, [r3, #4]
 8001068:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800106c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001070:	ebbc 0c00 	subs.w	ip, ip, r0
 8001074:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001078:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800107c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001080:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001084:	ebb1 010c 	subs.w	r1, r1, ip
 8001088:	eb63 030e 	sbc.w	r3, r3, lr
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001092:	00c9      	lsls	r1, r1, #3
 8001094:	eb11 0c00 	adds.w	ip, r1, r0
 8001098:	f143 0300 	adc.w	r3, r3, #0
 800109c:	0299      	lsls	r1, r3, #10
 800109e:	2300      	movs	r3, #0
 80010a0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80010a4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80010a8:	f7ff f902 	bl	80002b0 <__aeabi_uldivmod>
 80010ac:	e7d1      	b.n	8001052 <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80010bc:	d02a      	beq.n	8001114 <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010be:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 80010c0:	6858      	ldr	r0, [r3, #4]
 80010c2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80010c6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80010ca:	ebbc 0c00 	subs.w	ip, ip, r0
 80010ce:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80010d2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80010d6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80010da:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80010de:	ebb1 010c 	subs.w	r1, r1, ip
 80010e2:	eb63 030e 	sbc.w	r3, r3, lr
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010ec:	00c9      	lsls	r1, r1, #3
 80010ee:	eb11 0c00 	adds.w	ip, r1, r0
 80010f2:	f143 0300 	adc.w	r3, r3, #0
 80010f6:	0259      	lsls	r1, r3, #9
 80010f8:	2300      	movs	r3, #0
 80010fa:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80010fe:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001102:	f7ff f8d5 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 800110e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001112:	e76f      	b.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x184>)
 8001116:	6858      	ldr	r0, [r3, #4]
 8001118:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800111c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001120:	ebbc 0c00 	subs.w	ip, ip, r0
 8001124:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001128:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800112c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001130:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001134:	ebb1 010c 	subs.w	r1, r1, ip
 8001138:	eb63 030e 	sbc.w	r3, r3, lr
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001142:	00c9      	lsls	r1, r1, #3
 8001144:	eb11 0c00 	adds.w	ip, r1, r0
 8001148:	f143 0300 	adc.w	r3, r3, #0
 800114c:	0299      	lsls	r1, r3, #10
 800114e:	2300      	movs	r3, #0
 8001150:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001154:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001158:	f7ff f8aa 	bl	80002b0 <__aeabi_uldivmod>
 800115c:	e7d3      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x12a>
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	00f42400 	.word	0x00f42400
 8001168:	007a1200 	.word	0x007a1200

0800116c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800116c:	2800      	cmp	r0, #0
 800116e:	f000 8201 	beq.w	8001574 <HAL_RCC_OscConfig+0x408>
{
 8001172:	b570      	push	{r4, r5, r6, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	f013 0f01 	tst.w	r3, #1
 800117e:	d041      	beq.n	8001204 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001180:	4b99      	ldr	r3, [pc, #612]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b04      	cmp	r3, #4
 800118a:	d032      	beq.n	80011f2 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800118c:	4b96      	ldr	r3, [pc, #600]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 030c 	and.w	r3, r3, #12
        || \
 8001194:	2b08      	cmp	r3, #8
 8001196:	d027      	beq.n	80011e8 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001198:	4b93      	ldr	r3, [pc, #588]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d059      	beq.n	8001258 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011aa:	d05b      	beq.n	8001264 <HAL_RCC_OscConfig+0xf8>
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011b0:	d05e      	beq.n	8001270 <HAL_RCC_OscConfig+0x104>
 80011b2:	4b8d      	ldr	r3, [pc, #564]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80011c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d05c      	beq.n	8001284 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc63 	bl	8000a94 <HAL_GetTick>
 80011ce:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d0:	4b85      	ldr	r3, [pc, #532]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011d8:	d114      	bne.n	8001204 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011da:	f7ff fc5b 	bl	8000a94 <HAL_GetTick>
 80011de:	1b40      	subs	r0, r0, r5
 80011e0:	2864      	cmp	r0, #100	@ 0x64
 80011e2:	d9f5      	bls.n	80011d0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 80011e4:	2003      	movs	r0, #3
 80011e6:	e1cc      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80011e8:	4b7f      	ldr	r3, [pc, #508]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80011f0:	d0d2      	beq.n	8001198 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f2:	4b7d      	ldr	r3, [pc, #500]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011fa:	d003      	beq.n	8001204 <HAL_RCC_OscConfig+0x98>
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 81ba 	beq.w	8001578 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	f013 0f02 	tst.w	r3, #2
 800120a:	d060      	beq.n	80012ce <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800120c:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f013 0f0c 	tst.w	r3, #12
 8001214:	d04a      	beq.n	80012ac <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001216:	4b74      	ldr	r3, [pc, #464]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
        || \
 800121e:	2b08      	cmp	r3, #8
 8001220:	d03f      	beq.n	80012a2 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b71      	ldr	r3, [pc, #452]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d069      	beq.n	8001302 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800122e:	68e3      	ldr	r3, [r4, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d075      	beq.n	8001320 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b6d      	ldr	r3, [pc, #436]	@ (80013ec <HAL_RCC_OscConfig+0x280>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fc2b 	bl	8000a94 <HAL_GetTick>
 800123e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f013 0f02 	tst.w	r3, #2
 8001248:	d161      	bne.n	800130e <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fc23 	bl	8000a94 <HAL_GetTick>
 800124e:	1b40      	subs	r0, r0, r5
 8001250:	2802      	cmp	r0, #2
 8001252:	d9f5      	bls.n	8001240 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8001254:	2003      	movs	r0, #3
 8001256:	e194      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001258:	4b63      	ldr	r3, [pc, #396]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001260:	d0a0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x38>
 8001262:	e7c6      	b.n	80011f2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	4a60      	ldr	r2, [pc, #384]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e7a9      	b.n	80011c4 <HAL_RCC_OscConfig+0x58>
 8001270:	4b5d      	ldr	r3, [pc, #372]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e79f      	b.n	80011c4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001284:	f7ff fc06 	bl	8000a94 <HAL_GetTick>
 8001288:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b57      	ldr	r3, [pc, #348]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001292:	d0b7      	beq.n	8001204 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fbfe 	bl	8000a94 <HAL_GetTick>
 8001298:	1b40      	subs	r0, r0, r5
 800129a:	2864      	cmp	r0, #100	@ 0x64
 800129c:	d9f5      	bls.n	800128a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800129e:	2003      	movs	r0, #3
 80012a0:	e16f      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80012a2:	4b51      	ldr	r3, [pc, #324]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80012aa:	d1ba      	bne.n	8001222 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ac:	4b4e      	ldr	r3, [pc, #312]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f013 0f02 	tst.w	r3, #2
 80012b4:	d003      	beq.n	80012be <HAL_RCC_OscConfig+0x152>
 80012b6:	68e3      	ldr	r3, [r4, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f040 815f 	bne.w	800157c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4a4a      	ldr	r2, [pc, #296]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80012c6:	6921      	ldr	r1, [r4, #16]
 80012c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012cc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	f013 0f08 	tst.w	r3, #8
 80012d4:	d049      	beq.n	800136a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012d6:	6963      	ldr	r3, [r4, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d033      	beq.n	8001344 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <HAL_RCC_OscConfig+0x280>)
 80012de:	2201      	movs	r2, #1
 80012e0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fbd6 	bl	8000a94 <HAL_GetTick>
 80012e8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80012ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ee:	f013 0f02 	tst.w	r3, #2
 80012f2:	d13a      	bne.n	800136a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fbce 	bl	8000a94 <HAL_GetTick>
 80012f8:	1b40      	subs	r0, r0, r5
 80012fa:	2802      	cmp	r0, #2
 80012fc:	d9f5      	bls.n	80012ea <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80012fe:	2003      	movs	r0, #3
 8001300:	e13f      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b39      	ldr	r3, [pc, #228]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800130a:	d190      	bne.n	800122e <HAL_RCC_OscConfig+0xc2>
 800130c:	e7ce      	b.n	80012ac <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4a36      	ldr	r2, [pc, #216]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001310:	6813      	ldr	r3, [r2, #0]
 8001312:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001316:	6921      	ldr	r1, [r4, #16]
 8001318:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e7d6      	b.n	80012ce <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001320:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <HAL_RCC_OscConfig+0x280>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001326:	f7ff fbb5 	bl	8000a94 <HAL_GetTick>
 800132a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f013 0f02 	tst.w	r3, #2
 8001334:	d0cb      	beq.n	80012ce <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fbad 	bl	8000a94 <HAL_GetTick>
 800133a:	1b40      	subs	r0, r0, r5
 800133c:	2802      	cmp	r0, #2
 800133e:	d9f5      	bls.n	800132c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8001340:	2003      	movs	r0, #3
 8001342:	e11e      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <HAL_RCC_OscConfig+0x280>)
 8001346:	2200      	movs	r2, #0
 8001348:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff fba2 	bl	8000a94 <HAL_GetTick>
 8001350:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001356:	f013 0f02 	tst.w	r3, #2
 800135a:	d006      	beq.n	800136a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fb9a 	bl	8000a94 <HAL_GetTick>
 8001360:	1b40      	subs	r0, r0, r5
 8001362:	2802      	cmp	r0, #2
 8001364:	d9f5      	bls.n	8001352 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8001366:	2003      	movs	r0, #3
 8001368:	e10b      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	f013 0f04 	tst.w	r3, #4
 8001370:	d076      	beq.n	8001460 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800137a:	d133      	bne.n	80013e4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 8001382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001384:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001394:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <HAL_RCC_OscConfig+0x284>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800139e:	d029      	beq.n	80013f4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a0:	68a3      	ldr	r3, [r4, #8]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d03a      	beq.n	800141c <HAL_RCC_OscConfig+0x2b0>
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d03e      	beq.n	8001428 <HAL_RCC_OscConfig+0x2bc>
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80013ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	671a      	str	r2, [r3, #112]	@ 0x70
 80013b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03c      	beq.n	800143c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb67 	bl	8000a94 <HAL_GetTick>
 80013c6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_RCC_OscConfig+0x27c>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013cc:	f013 0f02 	tst.w	r3, #2
 80013d0:	d145      	bne.n	800145e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff fb5f 	bl	8000a94 <HAL_GetTick>
 80013d6:	1b80      	subs	r0, r0, r6
 80013d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013dc:	4298      	cmp	r0, r3
 80013de:	d9f3      	bls.n	80013c8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 80013e0:	2003      	movs	r0, #3
 80013e2:	e0ce      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80013e4:	2500      	movs	r5, #0
 80013e6:	e7d6      	b.n	8001396 <HAL_RCC_OscConfig+0x22a>
 80013e8:	40023800 	.word	0x40023800
 80013ec:	42470000 	.word	0x42470000
 80013f0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f4:	4a6b      	ldr	r2, [pc, #428]	@ (80015a4 <HAL_RCC_OscConfig+0x438>)
 80013f6:	6813      	ldr	r3, [r2, #0]
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb49 	bl	8000a94 <HAL_GetTick>
 8001402:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	4b67      	ldr	r3, [pc, #412]	@ (80015a4 <HAL_RCC_OscConfig+0x438>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800140c:	d1c8      	bne.n	80013a0 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff fb41 	bl	8000a94 <HAL_GetTick>
 8001412:	1b80      	subs	r0, r0, r6
 8001414:	2802      	cmp	r0, #2
 8001416:	d9f5      	bls.n	8001404 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8001418:	2003      	movs	r0, #3
 800141a:	e0b2      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141c:	4a62      	ldr	r2, [pc, #392]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 800141e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6713      	str	r3, [r2, #112]	@ 0x70
 8001426:	e7c9      	b.n	80013bc <HAL_RCC_OscConfig+0x250>
 8001428:	4b5f      	ldr	r3, [pc, #380]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 800142a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800142c:	f042 0204 	orr.w	r2, r2, #4
 8001430:	671a      	str	r2, [r3, #112]	@ 0x70
 8001432:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	671a      	str	r2, [r3, #112]	@ 0x70
 800143a:	e7bf      	b.n	80013bc <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fb2a 	bl	8000a94 <HAL_GetTick>
 8001440:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001442:	4b59      	ldr	r3, [pc, #356]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001446:	f013 0f02 	tst.w	r3, #2
 800144a:	d008      	beq.n	800145e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fb22 	bl	8000a94 <HAL_GetTick>
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001456:	4298      	cmp	r0, r3
 8001458:	d9f3      	bls.n	8001442 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800145a:	2003      	movs	r0, #3
 800145c:	e091      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800145e:	b9ed      	cbnz	r5, 800149c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001460:	69a3      	ldr	r3, [r4, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 808c 	beq.w	8001580 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001468:	4a4f      	ldr	r2, [pc, #316]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 800146a:	6892      	ldr	r2, [r2, #8]
 800146c:	f002 020c 	and.w	r2, r2, #12
 8001470:	2a08      	cmp	r2, #8
 8001472:	d054      	beq.n	800151e <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001474:	2b02      	cmp	r3, #2
 8001476:	d017      	beq.n	80014a8 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	4b4c      	ldr	r3, [pc, #304]	@ (80015ac <HAL_RCC_OscConfig+0x440>)
 800147a:	2200      	movs	r2, #0
 800147c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff fb09 	bl	8000a94 <HAL_GetTick>
 8001482:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001484:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800148c:	d045      	beq.n	800151a <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fb01 	bl	8000a94 <HAL_GetTick>
 8001492:	1b00      	subs	r0, r0, r4
 8001494:	2802      	cmp	r0, #2
 8001496:	d9f5      	bls.n	8001484 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001498:	2003      	movs	r0, #3
 800149a:	e072      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4a42      	ldr	r2, [pc, #264]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 800149e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a6:	e7db      	b.n	8001460 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <HAL_RCC_OscConfig+0x440>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80014ae:	f7ff faf1 	bl	8000a94 <HAL_GetTick>
 80014b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b4:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014bc:	d006      	beq.n	80014cc <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fae9 	bl	8000a94 <HAL_GetTick>
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	2802      	cmp	r0, #2
 80014c6:	d9f5      	bls.n	80014b4 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80014c8:	2003      	movs	r0, #3
 80014ca:	e05a      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014cc:	69e3      	ldr	r3, [r4, #28]
 80014ce:	6a22      	ldr	r2, [r4, #32]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80014d4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014da:	0852      	lsrs	r2, r2, #1
 80014dc:	3a01      	subs	r2, #1
 80014de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80014e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80014ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014ee:	4a2e      	ldr	r2, [pc, #184]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 80014f0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80014f2:	4b2e      	ldr	r3, [pc, #184]	@ (80015ac <HAL_RCC_OscConfig+0x440>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80014f8:	f7ff facc 	bl	8000a94 <HAL_GetTick>
 80014fc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fac4 	bl	8000a94 <HAL_GetTick>
 800150c:	1b00      	subs	r0, r0, r4
 800150e:	2802      	cmp	r0, #2
 8001510:	d9f5      	bls.n	80014fe <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8001512:	2003      	movs	r0, #3
 8001514:	e035      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001516:	2000      	movs	r0, #0
 8001518:	e033      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
 800151a:	2000      	movs	r0, #0
 800151c:	e031      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151e:	2b01      	cmp	r3, #1
 8001520:	d031      	beq.n	8001586 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8001522:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <HAL_RCC_OscConfig+0x43c>)
 8001524:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800152a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152c:	4291      	cmp	r1, r2
 800152e:	d12c      	bne.n	800158a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001530:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001534:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	428a      	cmp	r2, r1
 8001538:	d129      	bne.n	800158e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001540:	401a      	ands	r2, r3
 8001542:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001546:	d124      	bne.n	8001592 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001548:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800154c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800154e:	0852      	lsrs	r2, r2, #1
 8001550:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001552:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001556:	d11e      	bne.n	8001596 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001558:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800155c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800155e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001562:	d11a      	bne.n	800159a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001564:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8001568:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800156a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800156e:	d116      	bne.n	800159e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8001570:	2000      	movs	r0, #0
 8001572:	e006      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001574:	2001      	movs	r0, #1
}
 8001576:	4770      	bx	lr
        return HAL_ERROR;
 8001578:	2001      	movs	r0, #1
 800157a:	e002      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800157c:	2001      	movs	r0, #1
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001580:	2000      	movs	r0, #0
}
 8001582:	b002      	add	sp, #8
 8001584:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	e7fb      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800158a:	2001      	movs	r0, #1
 800158c:	e7f9      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
 800158e:	2001      	movs	r0, #1
 8001590:	e7f7      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
 8001592:	2001      	movs	r0, #1
 8001594:	e7f5      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
 8001596:	2001      	movs	r0, #1
 8001598:	e7f3      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
 800159a:	2001      	movs	r0, #1
 800159c:	e7f1      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
 800159e:	2001      	movs	r0, #1
 80015a0:	e7ef      	b.n	8001582 <HAL_RCC_OscConfig+0x416>
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	42470000 	.word	0x42470000

080015b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015b2:	f102 030c 	add.w	r3, r2, #12
 80015b6:	e853 3f00 	ldrex	r3, [r3]
 80015ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015be:	320c      	adds	r2, #12
 80015c0:	e842 3100 	strex	r1, r3, [r2]
 80015c4:	2900      	cmp	r1, #0
 80015c6:	d1f3      	bne.n	80015b0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ca:	f102 0314 	add.w	r3, r2, #20
 80015ce:	e853 3f00 	ldrex	r3, [r3]
 80015d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015d6:	3214      	adds	r2, #20
 80015d8:	e842 3100 	strex	r1, r3, [r2]
 80015dc:	2900      	cmp	r1, #0
 80015de:	d1f3      	bne.n	80015c8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d005      	beq.n	80015f2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80015e6:	2320      	movs	r3, #32
 80015e8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015ec:	2300      	movs	r3, #0
 80015ee:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80015f0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015f4:	f102 030c 	add.w	r3, r2, #12
 80015f8:	e853 3f00 	ldrex	r3, [r3]
 80015fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001600:	320c      	adds	r2, #12
 8001602:	e842 3100 	strex	r1, r3, [r2]
 8001606:	2900      	cmp	r1, #0
 8001608:	d1f3      	bne.n	80015f2 <UART_EndRxTransfer+0x42>
 800160a:	e7ec      	b.n	80015e6 <UART_EndRxTransfer+0x36>

0800160c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800160c:	b510      	push	{r4, lr}
 800160e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001610:	6802      	ldr	r2, [r0, #0]
 8001612:	6913      	ldr	r3, [r2, #16]
 8001614:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001618:	68c1      	ldr	r1, [r0, #12]
 800161a:	430b      	orrs	r3, r1
 800161c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800161e:	6883      	ldr	r3, [r0, #8]
 8001620:	6902      	ldr	r2, [r0, #16]
 8001622:	431a      	orrs	r2, r3
 8001624:	6943      	ldr	r3, [r0, #20]
 8001626:	431a      	orrs	r2, r3
 8001628:	69c3      	ldr	r3, [r0, #28]
 800162a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800162c:	6801      	ldr	r1, [r0, #0]
 800162e:	68cb      	ldr	r3, [r1, #12]
 8001630:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001634:	f023 030c 	bic.w	r3, r3, #12
 8001638:	4313      	orrs	r3, r2
 800163a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800163c:	6802      	ldr	r2, [r0, #0]
 800163e:	6953      	ldr	r3, [r2, #20]
 8001640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001644:	6981      	ldr	r1, [r0, #24]
 8001646:	430b      	orrs	r3, r1
 8001648:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800164a:	6803      	ldr	r3, [r0, #0]
 800164c:	4a31      	ldr	r2, [pc, #196]	@ (8001714 <UART_SetConfig+0x108>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d006      	beq.n	8001660 <UART_SetConfig+0x54>
 8001652:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001656:	4293      	cmp	r3, r2
 8001658:	d002      	beq.n	8001660 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800165a:	f7ff fc9f 	bl	8000f9c <HAL_RCC_GetPCLK1Freq>
 800165e:	e001      	b.n	8001664 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001660:	f7ff fcac 	bl	8000fbc <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001664:	69e3      	ldr	r3, [r4, #28]
 8001666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800166a:	d029      	beq.n	80016c0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800166c:	2100      	movs	r1, #0
 800166e:	1803      	adds	r3, r0, r0
 8001670:	4149      	adcs	r1, r1
 8001672:	181b      	adds	r3, r3, r0
 8001674:	f141 0100 	adc.w	r1, r1, #0
 8001678:	00c9      	lsls	r1, r1, #3
 800167a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1818      	adds	r0, r3, r0
 8001682:	6863      	ldr	r3, [r4, #4]
 8001684:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001688:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800168c:	f141 0100 	adc.w	r1, r1, #0
 8001690:	f7fe fe0e 	bl	80002b0 <__aeabi_uldivmod>
 8001694:	4a20      	ldr	r2, [pc, #128]	@ (8001718 <UART_SetConfig+0x10c>)
 8001696:	fba2 3100 	umull	r3, r1, r2, r0
 800169a:	0949      	lsrs	r1, r1, #5
 800169c:	2364      	movs	r3, #100	@ 0x64
 800169e:	fb03 0311 	mls	r3, r3, r1, r0
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	3332      	adds	r3, #50	@ 0x32
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016b0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	6821      	ldr	r1, [r4, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }
}
 80016be:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80016c0:	2300      	movs	r3, #0
 80016c2:	1802      	adds	r2, r0, r0
 80016c4:	eb43 0103 	adc.w	r1, r3, r3
 80016c8:	1812      	adds	r2, r2, r0
 80016ca:	f141 0100 	adc.w	r1, r1, #0
 80016ce:	00c9      	lsls	r1, r1, #3
 80016d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	1810      	adds	r0, r2, r0
 80016d8:	f141 0100 	adc.w	r1, r1, #0
 80016dc:	6862      	ldr	r2, [r4, #4]
 80016de:	1892      	adds	r2, r2, r2
 80016e0:	415b      	adcs	r3, r3
 80016e2:	f7fe fde5 	bl	80002b0 <__aeabi_uldivmod>
 80016e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001718 <UART_SetConfig+0x10c>)
 80016e8:	fba2 3100 	umull	r3, r1, r2, r0
 80016ec:	0949      	lsrs	r1, r1, #5
 80016ee:	2364      	movs	r3, #100	@ 0x64
 80016f0:	fb03 0311 	mls	r3, r3, r1, r0
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	3332      	adds	r3, #50	@ 0x32
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	005a      	lsls	r2, r3, #1
 8001700:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001704:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	6821      	ldr	r1, [r4, #0]
 800170e:	4413      	add	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
 8001712:	e7d4      	b.n	80016be <UART_SetConfig+0xb2>
 8001714:	40011000 	.word	0x40011000
 8001718:	51eb851f 	.word	0x51eb851f

0800171c <UART_WaitOnFlagUntilTimeout>:
{
 800171c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001720:	b083      	sub	sp, #12
 8001722:	4605      	mov	r5, r0
 8001724:	460e      	mov	r6, r1
 8001726:	4617      	mov	r7, r2
 8001728:	4699      	mov	r9, r3
 800172a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	681c      	ldr	r4, [r3, #0]
 8001732:	ea36 0404 	bics.w	r4, r6, r4
 8001736:	bf0c      	ite	eq
 8001738:	2401      	moveq	r4, #1
 800173a:	2400      	movne	r4, #0
 800173c:	42bc      	cmp	r4, r7
 800173e:	d128      	bne.n	8001792 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001740:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8001744:	d0f3      	beq.n	800172e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001746:	f7ff f9a5 	bl	8000a94 <HAL_GetTick>
 800174a:	eba0 0009 	sub.w	r0, r0, r9
 800174e:	4540      	cmp	r0, r8
 8001750:	d823      	bhi.n	800179a <UART_WaitOnFlagUntilTimeout+0x7e>
 8001752:	f1b8 0f00 	cmp.w	r8, #0
 8001756:	d022      	beq.n	800179e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	f012 0f04 	tst.w	r2, #4
 8001760:	d0e5      	beq.n	800172e <UART_WaitOnFlagUntilTimeout+0x12>
 8001762:	2e80      	cmp	r6, #128	@ 0x80
 8001764:	d0e3      	beq.n	800172e <UART_WaitOnFlagUntilTimeout+0x12>
 8001766:	2e40      	cmp	r6, #64	@ 0x40
 8001768:	d0e1      	beq.n	800172e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f012 0f08 	tst.w	r2, #8
 8001770:	d0dd      	beq.n	800172e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001772:	2400      	movs	r4, #0
 8001774:	9401      	str	r4, [sp, #4]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	9201      	str	r2, [sp, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8001780:	4628      	mov	r0, r5
 8001782:	f7ff ff15 	bl	80015b0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001786:	2308      	movs	r3, #8
 8001788:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800178a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800178e:	2001      	movs	r0, #1
 8001790:	e000      	b.n	8001794 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8001792:	2000      	movs	r0, #0
}
 8001794:	b003      	add	sp, #12
 8001796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800179a:	2003      	movs	r0, #3
 800179c:	e7fa      	b.n	8001794 <UART_WaitOnFlagUntilTimeout+0x78>
 800179e:	2003      	movs	r0, #3
 80017a0:	e7f8      	b.n	8001794 <UART_WaitOnFlagUntilTimeout+0x78>

080017a2 <HAL_UART_Init>:
  if (huart == NULL)
 80017a2:	b360      	cbz	r0, 80017fe <HAL_UART_Init+0x5c>
{
 80017a4:	b510      	push	{r4, lr}
 80017a6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80017a8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80017ac:	b313      	cbz	r3, 80017f4 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80017ae:	2324      	movs	r3, #36	@ 0x24
 80017b0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80017b4:	6822      	ldr	r2, [r4, #0]
 80017b6:	68d3      	ldr	r3, [r2, #12]
 80017b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80017bc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff ff24 	bl	800160c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	6913      	ldr	r3, [r2, #16]
 80017c8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80017cc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ce:	6822      	ldr	r2, [r4, #0]
 80017d0:	6953      	ldr	r3, [r2, #20]
 80017d2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80017d6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80017d8:	6822      	ldr	r2, [r4, #0]
 80017da:	68d3      	ldr	r3, [r2, #12]
 80017dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017e0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e2:	2000      	movs	r0, #0
 80017e4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80017e6:	2320      	movs	r3, #32
 80017e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80017ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80017f0:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80017f2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80017f4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80017f8:	f7ff f842 	bl	8000880 <HAL_UART_MspInit>
 80017fc:	e7d7      	b.n	80017ae <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
}
 8001800:	4770      	bx	lr

08001802 <HAL_UART_Transmit>:
{
 8001802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800180a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b20      	cmp	r3, #32
 8001812:	d156      	bne.n	80018c2 <HAL_UART_Transmit+0xc0>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800181a:	2900      	cmp	r1, #0
 800181c:	d055      	beq.n	80018ca <HAL_UART_Transmit+0xc8>
 800181e:	b90a      	cbnz	r2, 8001824 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001820:	2001      	movs	r0, #1
 8001822:	e04f      	b.n	80018c4 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001824:	2300      	movs	r3, #0
 8001826:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001828:	2321      	movs	r3, #33	@ 0x21
 800182a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800182e:	f7ff f931 	bl	8000a94 <HAL_GetTick>
 8001832:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001834:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001838:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800183c:	68a3      	ldr	r3, [r4, #8]
 800183e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001842:	d002      	beq.n	800184a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001844:	f04f 0800 	mov.w	r8, #0
 8001848:	e014      	b.n	8001874 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800184a:	6923      	ldr	r3, [r4, #16]
 800184c:	b32b      	cbz	r3, 800189a <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800184e:	f04f 0800 	mov.w	r8, #0
 8001852:	e00f      	b.n	8001874 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8001854:	2320      	movs	r3, #32
 8001856:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
 800185c:	e032      	b.n	80018c4 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800185e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001868:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800186a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800186c:	b292      	uxth	r2, r2
 800186e:	3a01      	subs	r2, #1
 8001870:	b292      	uxth	r2, r2
 8001872:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001874:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001876:	b29b      	uxth	r3, r3
 8001878:	b193      	cbz	r3, 80018a0 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800187a:	9600      	str	r6, [sp, #0]
 800187c:	463b      	mov	r3, r7
 800187e:	2200      	movs	r2, #0
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	4620      	mov	r0, r4
 8001884:	f7ff ff4a 	bl	800171c <UART_WaitOnFlagUntilTimeout>
 8001888:	2800      	cmp	r0, #0
 800188a:	d1e3      	bne.n	8001854 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 800188c:	2d00      	cmp	r5, #0
 800188e:	d0e6      	beq.n	800185e <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001890:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001898:	e7e7      	b.n	800186a <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 800189a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800189c:	2500      	movs	r5, #0
 800189e:	e7e9      	b.n	8001874 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018a0:	9600      	str	r6, [sp, #0]
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	2140      	movs	r1, #64	@ 0x40
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff ff37 	bl	800171c <UART_WaitOnFlagUntilTimeout>
 80018ae:	b918      	cbnz	r0, 80018b8 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80018b0:	2320      	movs	r3, #32
 80018b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80018b6:	e005      	b.n	80018c4 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80018b8:	2320      	movs	r3, #32
 80018ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80018be:	2003      	movs	r0, #3
 80018c0:	e000      	b.n	80018c4 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80018c2:	2002      	movs	r0, #2
}
 80018c4:	b002      	add	sp, #8
 80018c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
 80018cc:	e7fa      	b.n	80018c4 <HAL_UART_Transmit+0xc2>
	...

080018d0 <std>:
 80018d0:	2300      	movs	r3, #0
 80018d2:	b510      	push	{r4, lr}
 80018d4:	4604      	mov	r4, r0
 80018d6:	e9c0 3300 	strd	r3, r3, [r0]
 80018da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018de:	6083      	str	r3, [r0, #8]
 80018e0:	8181      	strh	r1, [r0, #12]
 80018e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80018e4:	81c2      	strh	r2, [r0, #14]
 80018e6:	6183      	str	r3, [r0, #24]
 80018e8:	4619      	mov	r1, r3
 80018ea:	2208      	movs	r2, #8
 80018ec:	305c      	adds	r0, #92	@ 0x5c
 80018ee:	f000 f906 	bl	8001afe <memset>
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <std+0x58>)
 80018f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <std+0x5c>)
 80018f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <std+0x60>)
 80018fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <std+0x64>)
 8001900:	6323      	str	r3, [r4, #48]	@ 0x30
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <std+0x68>)
 8001904:	6224      	str	r4, [r4, #32]
 8001906:	429c      	cmp	r4, r3
 8001908:	d006      	beq.n	8001918 <std+0x48>
 800190a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800190e:	4294      	cmp	r4, r2
 8001910:	d002      	beq.n	8001918 <std+0x48>
 8001912:	33d0      	adds	r3, #208	@ 0xd0
 8001914:	429c      	cmp	r4, r3
 8001916:	d105      	bne.n	8001924 <std+0x54>
 8001918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800191c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001920:	f000 b966 	b.w	8001bf0 <__retarget_lock_init_recursive>
 8001924:	bd10      	pop	{r4, pc}
 8001926:	bf00      	nop
 8001928:	08001a79 	.word	0x08001a79
 800192c:	08001a9b 	.word	0x08001a9b
 8001930:	08001ad3 	.word	0x08001ad3
 8001934:	08001af7 	.word	0x08001af7
 8001938:	200000e0 	.word	0x200000e0

0800193c <stdio_exit_handler>:
 800193c:	4a02      	ldr	r2, [pc, #8]	@ (8001948 <stdio_exit_handler+0xc>)
 800193e:	4903      	ldr	r1, [pc, #12]	@ (800194c <stdio_exit_handler+0x10>)
 8001940:	4803      	ldr	r0, [pc, #12]	@ (8001950 <stdio_exit_handler+0x14>)
 8001942:	f000 b869 	b.w	8001a18 <_fwalk_sglue>
 8001946:	bf00      	nop
 8001948:	20000014 	.word	0x20000014
 800194c:	08002491 	.word	0x08002491
 8001950:	20000024 	.word	0x20000024

08001954 <cleanup_stdio>:
 8001954:	6841      	ldr	r1, [r0, #4]
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <cleanup_stdio+0x34>)
 8001958:	4299      	cmp	r1, r3
 800195a:	b510      	push	{r4, lr}
 800195c:	4604      	mov	r4, r0
 800195e:	d001      	beq.n	8001964 <cleanup_stdio+0x10>
 8001960:	f000 fd96 	bl	8002490 <_fflush_r>
 8001964:	68a1      	ldr	r1, [r4, #8]
 8001966:	4b09      	ldr	r3, [pc, #36]	@ (800198c <cleanup_stdio+0x38>)
 8001968:	4299      	cmp	r1, r3
 800196a:	d002      	beq.n	8001972 <cleanup_stdio+0x1e>
 800196c:	4620      	mov	r0, r4
 800196e:	f000 fd8f 	bl	8002490 <_fflush_r>
 8001972:	68e1      	ldr	r1, [r4, #12]
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <cleanup_stdio+0x3c>)
 8001976:	4299      	cmp	r1, r3
 8001978:	d004      	beq.n	8001984 <cleanup_stdio+0x30>
 800197a:	4620      	mov	r0, r4
 800197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001980:	f000 bd86 	b.w	8002490 <_fflush_r>
 8001984:	bd10      	pop	{r4, pc}
 8001986:	bf00      	nop
 8001988:	200000e0 	.word	0x200000e0
 800198c:	20000148 	.word	0x20000148
 8001990:	200001b0 	.word	0x200001b0

08001994 <global_stdio_init.part.0>:
 8001994:	b510      	push	{r4, lr}
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <global_stdio_init.part.0+0x30>)
 8001998:	4c0b      	ldr	r4, [pc, #44]	@ (80019c8 <global_stdio_init.part.0+0x34>)
 800199a:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <global_stdio_init.part.0+0x38>)
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4620      	mov	r0, r4
 80019a0:	2200      	movs	r2, #0
 80019a2:	2104      	movs	r1, #4
 80019a4:	f7ff ff94 	bl	80018d0 <std>
 80019a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80019ac:	2201      	movs	r2, #1
 80019ae:	2109      	movs	r1, #9
 80019b0:	f7ff ff8e 	bl	80018d0 <std>
 80019b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80019b8:	2202      	movs	r2, #2
 80019ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019be:	2112      	movs	r1, #18
 80019c0:	f7ff bf86 	b.w	80018d0 <std>
 80019c4:	20000218 	.word	0x20000218
 80019c8:	200000e0 	.word	0x200000e0
 80019cc:	0800193d 	.word	0x0800193d

080019d0 <__sfp_lock_acquire>:
 80019d0:	4801      	ldr	r0, [pc, #4]	@ (80019d8 <__sfp_lock_acquire+0x8>)
 80019d2:	f000 b90e 	b.w	8001bf2 <__retarget_lock_acquire_recursive>
 80019d6:	bf00      	nop
 80019d8:	20000221 	.word	0x20000221

080019dc <__sfp_lock_release>:
 80019dc:	4801      	ldr	r0, [pc, #4]	@ (80019e4 <__sfp_lock_release+0x8>)
 80019de:	f000 b909 	b.w	8001bf4 <__retarget_lock_release_recursive>
 80019e2:	bf00      	nop
 80019e4:	20000221 	.word	0x20000221

080019e8 <__sinit>:
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4604      	mov	r4, r0
 80019ec:	f7ff fff0 	bl	80019d0 <__sfp_lock_acquire>
 80019f0:	6a23      	ldr	r3, [r4, #32]
 80019f2:	b11b      	cbz	r3, 80019fc <__sinit+0x14>
 80019f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019f8:	f7ff bff0 	b.w	80019dc <__sfp_lock_release>
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <__sinit+0x28>)
 80019fe:	6223      	str	r3, [r4, #32]
 8001a00:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <__sinit+0x2c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f5      	bne.n	80019f4 <__sinit+0xc>
 8001a08:	f7ff ffc4 	bl	8001994 <global_stdio_init.part.0>
 8001a0c:	e7f2      	b.n	80019f4 <__sinit+0xc>
 8001a0e:	bf00      	nop
 8001a10:	08001955 	.word	0x08001955
 8001a14:	20000218 	.word	0x20000218

08001a18 <_fwalk_sglue>:
 8001a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a1c:	4607      	mov	r7, r0
 8001a1e:	4688      	mov	r8, r1
 8001a20:	4614      	mov	r4, r2
 8001a22:	2600      	movs	r6, #0
 8001a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a28:	f1b9 0901 	subs.w	r9, r9, #1
 8001a2c:	d505      	bpl.n	8001a3a <_fwalk_sglue+0x22>
 8001a2e:	6824      	ldr	r4, [r4, #0]
 8001a30:	2c00      	cmp	r4, #0
 8001a32:	d1f7      	bne.n	8001a24 <_fwalk_sglue+0xc>
 8001a34:	4630      	mov	r0, r6
 8001a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a3a:	89ab      	ldrh	r3, [r5, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d907      	bls.n	8001a50 <_fwalk_sglue+0x38>
 8001a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a44:	3301      	adds	r3, #1
 8001a46:	d003      	beq.n	8001a50 <_fwalk_sglue+0x38>
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	47c0      	blx	r8
 8001a4e:	4306      	orrs	r6, r0
 8001a50:	3568      	adds	r5, #104	@ 0x68
 8001a52:	e7e9      	b.n	8001a28 <_fwalk_sglue+0x10>

08001a54 <iprintf>:
 8001a54:	b40f      	push	{r0, r1, r2, r3}
 8001a56:	b507      	push	{r0, r1, r2, lr}
 8001a58:	4906      	ldr	r1, [pc, #24]	@ (8001a74 <iprintf+0x20>)
 8001a5a:	ab04      	add	r3, sp, #16
 8001a5c:	6808      	ldr	r0, [r1, #0]
 8001a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a62:	6881      	ldr	r1, [r0, #8]
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	f000 f9e9 	bl	8001e3c <_vfiprintf_r>
 8001a6a:	b003      	add	sp, #12
 8001a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a70:	b004      	add	sp, #16
 8001a72:	4770      	bx	lr
 8001a74:	20000020 	.word	0x20000020

08001a78 <__sread>:
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a80:	f000 f868 	bl	8001b54 <_read_r>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	bfab      	itete	ge
 8001a88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a8c:	181b      	addge	r3, r3, r0
 8001a8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a92:	bfac      	ite	ge
 8001a94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a96:	81a3      	strhlt	r3, [r4, #12]
 8001a98:	bd10      	pop	{r4, pc}

08001a9a <__swrite>:
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9e:	461f      	mov	r7, r3
 8001aa0:	898b      	ldrh	r3, [r1, #12]
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4616      	mov	r6, r2
 8001aaa:	d505      	bpl.n	8001ab8 <__swrite+0x1e>
 8001aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f000 f83c 	bl	8001b30 <_lseek_r>
 8001ab8:	89a3      	ldrh	r3, [r4, #12]
 8001aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001abe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ac2:	81a3      	strh	r3, [r4, #12]
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4628      	mov	r0, r5
 8001aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ace:	f000 b853 	b.w	8001b78 <_write_r>

08001ad2 <__sseek>:
 8001ad2:	b510      	push	{r4, lr}
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ada:	f000 f829 	bl	8001b30 <_lseek_r>
 8001ade:	1c43      	adds	r3, r0, #1
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	bf15      	itete	ne
 8001ae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001ae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001aea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001aee:	81a3      	strheq	r3, [r4, #12]
 8001af0:	bf18      	it	ne
 8001af2:	81a3      	strhne	r3, [r4, #12]
 8001af4:	bd10      	pop	{r4, pc}

08001af6 <__sclose>:
 8001af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afa:	f000 b809 	b.w	8001b10 <_close_r>

08001afe <memset>:
 8001afe:	4402      	add	r2, r0
 8001b00:	4603      	mov	r3, r0
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d100      	bne.n	8001b08 <memset+0xa>
 8001b06:	4770      	bx	lr
 8001b08:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0c:	e7f9      	b.n	8001b02 <memset+0x4>
	...

08001b10 <_close_r>:
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4d06      	ldr	r5, [pc, #24]	@ (8001b2c <_close_r+0x1c>)
 8001b14:	2300      	movs	r3, #0
 8001b16:	4604      	mov	r4, r0
 8001b18:	4608      	mov	r0, r1
 8001b1a:	602b      	str	r3, [r5, #0]
 8001b1c:	f7fe ff0a 	bl	8000934 <_close>
 8001b20:	1c43      	adds	r3, r0, #1
 8001b22:	d102      	bne.n	8001b2a <_close_r+0x1a>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	b103      	cbz	r3, 8001b2a <_close_r+0x1a>
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
 8001b2c:	2000021c 	.word	0x2000021c

08001b30 <_lseek_r>:
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	4d07      	ldr	r5, [pc, #28]	@ (8001b50 <_lseek_r+0x20>)
 8001b34:	4604      	mov	r4, r0
 8001b36:	4608      	mov	r0, r1
 8001b38:	4611      	mov	r1, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	602a      	str	r2, [r5, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f7fe ff02 	bl	8000948 <_lseek>
 8001b44:	1c43      	adds	r3, r0, #1
 8001b46:	d102      	bne.n	8001b4e <_lseek_r+0x1e>
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	b103      	cbz	r3, 8001b4e <_lseek_r+0x1e>
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	2000021c 	.word	0x2000021c

08001b54 <_read_r>:
 8001b54:	b538      	push	{r3, r4, r5, lr}
 8001b56:	4d07      	ldr	r5, [pc, #28]	@ (8001b74 <_read_r+0x20>)
 8001b58:	4604      	mov	r4, r0
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	602a      	str	r2, [r5, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	f7fe fed6 	bl	8000914 <_read>
 8001b68:	1c43      	adds	r3, r0, #1
 8001b6a:	d102      	bne.n	8001b72 <_read_r+0x1e>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	b103      	cbz	r3, 8001b72 <_read_r+0x1e>
 8001b70:	6023      	str	r3, [r4, #0]
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
 8001b74:	2000021c 	.word	0x2000021c

08001b78 <_write_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4d07      	ldr	r5, [pc, #28]	@ (8001b98 <_write_r+0x20>)
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	4608      	mov	r0, r1
 8001b80:	4611      	mov	r1, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	602a      	str	r2, [r5, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f7fe fd66 	bl	8000658 <_write>
 8001b8c:	1c43      	adds	r3, r0, #1
 8001b8e:	d102      	bne.n	8001b96 <_write_r+0x1e>
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	b103      	cbz	r3, 8001b96 <_write_r+0x1e>
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
 8001b98:	2000021c 	.word	0x2000021c

08001b9c <__errno>:
 8001b9c:	4b01      	ldr	r3, [pc, #4]	@ (8001ba4 <__errno+0x8>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000020 	.word	0x20000020

08001ba8 <__libc_init_array>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	4d0d      	ldr	r5, [pc, #52]	@ (8001be0 <__libc_init_array+0x38>)
 8001bac:	4c0d      	ldr	r4, [pc, #52]	@ (8001be4 <__libc_init_array+0x3c>)
 8001bae:	1b64      	subs	r4, r4, r5
 8001bb0:	10a4      	asrs	r4, r4, #2
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	42a6      	cmp	r6, r4
 8001bb6:	d109      	bne.n	8001bcc <__libc_init_array+0x24>
 8001bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8001be8 <__libc_init_array+0x40>)
 8001bba:	4c0c      	ldr	r4, [pc, #48]	@ (8001bec <__libc_init_array+0x44>)
 8001bbc:	f000 fdb8 	bl	8002730 <_init>
 8001bc0:	1b64      	subs	r4, r4, r5
 8001bc2:	10a4      	asrs	r4, r4, #2
 8001bc4:	2600      	movs	r6, #0
 8001bc6:	42a6      	cmp	r6, r4
 8001bc8:	d105      	bne.n	8001bd6 <__libc_init_array+0x2e>
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
 8001bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd0:	4798      	blx	r3
 8001bd2:	3601      	adds	r6, #1
 8001bd4:	e7ee      	b.n	8001bb4 <__libc_init_array+0xc>
 8001bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bda:	4798      	blx	r3
 8001bdc:	3601      	adds	r6, #1
 8001bde:	e7f2      	b.n	8001bc6 <__libc_init_array+0x1e>
 8001be0:	080027ec 	.word	0x080027ec
 8001be4:	080027ec 	.word	0x080027ec
 8001be8:	080027ec 	.word	0x080027ec
 8001bec:	080027f0 	.word	0x080027f0

08001bf0 <__retarget_lock_init_recursive>:
 8001bf0:	4770      	bx	lr

08001bf2 <__retarget_lock_acquire_recursive>:
 8001bf2:	4770      	bx	lr

08001bf4 <__retarget_lock_release_recursive>:
 8001bf4:	4770      	bx	lr
	...

08001bf8 <_free_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	2900      	cmp	r1, #0
 8001bfe:	d041      	beq.n	8001c84 <_free_r+0x8c>
 8001c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c04:	1f0c      	subs	r4, r1, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bfb8      	it	lt
 8001c0a:	18e4      	addlt	r4, r4, r3
 8001c0c:	f000 f8e0 	bl	8001dd0 <__malloc_lock>
 8001c10:	4a1d      	ldr	r2, [pc, #116]	@ (8001c88 <_free_r+0x90>)
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	b933      	cbnz	r3, 8001c24 <_free_r+0x2c>
 8001c16:	6063      	str	r3, [r4, #4]
 8001c18:	6014      	str	r4, [r2, #0]
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c20:	f000 b8dc 	b.w	8001ddc <__malloc_unlock>
 8001c24:	42a3      	cmp	r3, r4
 8001c26:	d908      	bls.n	8001c3a <_free_r+0x42>
 8001c28:	6820      	ldr	r0, [r4, #0]
 8001c2a:	1821      	adds	r1, r4, r0
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	bf01      	itttt	eq
 8001c30:	6819      	ldreq	r1, [r3, #0]
 8001c32:	685b      	ldreq	r3, [r3, #4]
 8001c34:	1809      	addeq	r1, r1, r0
 8001c36:	6021      	streq	r1, [r4, #0]
 8001c38:	e7ed      	b.n	8001c16 <_free_r+0x1e>
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	b10b      	cbz	r3, 8001c44 <_free_r+0x4c>
 8001c40:	42a3      	cmp	r3, r4
 8001c42:	d9fa      	bls.n	8001c3a <_free_r+0x42>
 8001c44:	6811      	ldr	r1, [r2, #0]
 8001c46:	1850      	adds	r0, r2, r1
 8001c48:	42a0      	cmp	r0, r4
 8001c4a:	d10b      	bne.n	8001c64 <_free_r+0x6c>
 8001c4c:	6820      	ldr	r0, [r4, #0]
 8001c4e:	4401      	add	r1, r0
 8001c50:	1850      	adds	r0, r2, r1
 8001c52:	4283      	cmp	r3, r0
 8001c54:	6011      	str	r1, [r2, #0]
 8001c56:	d1e0      	bne.n	8001c1a <_free_r+0x22>
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	6053      	str	r3, [r2, #4]
 8001c5e:	4408      	add	r0, r1
 8001c60:	6010      	str	r0, [r2, #0]
 8001c62:	e7da      	b.n	8001c1a <_free_r+0x22>
 8001c64:	d902      	bls.n	8001c6c <_free_r+0x74>
 8001c66:	230c      	movs	r3, #12
 8001c68:	602b      	str	r3, [r5, #0]
 8001c6a:	e7d6      	b.n	8001c1a <_free_r+0x22>
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	1821      	adds	r1, r4, r0
 8001c70:	428b      	cmp	r3, r1
 8001c72:	bf04      	itt	eq
 8001c74:	6819      	ldreq	r1, [r3, #0]
 8001c76:	685b      	ldreq	r3, [r3, #4]
 8001c78:	6063      	str	r3, [r4, #4]
 8001c7a:	bf04      	itt	eq
 8001c7c:	1809      	addeq	r1, r1, r0
 8001c7e:	6021      	streq	r1, [r4, #0]
 8001c80:	6054      	str	r4, [r2, #4]
 8001c82:	e7ca      	b.n	8001c1a <_free_r+0x22>
 8001c84:	bd38      	pop	{r3, r4, r5, pc}
 8001c86:	bf00      	nop
 8001c88:	20000228 	.word	0x20000228

08001c8c <sbrk_aligned>:
 8001c8c:	b570      	push	{r4, r5, r6, lr}
 8001c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8001ccc <sbrk_aligned+0x40>)
 8001c90:	460c      	mov	r4, r1
 8001c92:	6831      	ldr	r1, [r6, #0]
 8001c94:	4605      	mov	r5, r0
 8001c96:	b911      	cbnz	r1, 8001c9e <sbrk_aligned+0x12>
 8001c98:	f000 fcb6 	bl	8002608 <_sbrk_r>
 8001c9c:	6030      	str	r0, [r6, #0]
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f000 fcb1 	bl	8002608 <_sbrk_r>
 8001ca6:	1c43      	adds	r3, r0, #1
 8001ca8:	d103      	bne.n	8001cb2 <sbrk_aligned+0x26>
 8001caa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001cae:	4620      	mov	r0, r4
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	1cc4      	adds	r4, r0, #3
 8001cb4:	f024 0403 	bic.w	r4, r4, #3
 8001cb8:	42a0      	cmp	r0, r4
 8001cba:	d0f8      	beq.n	8001cae <sbrk_aligned+0x22>
 8001cbc:	1a21      	subs	r1, r4, r0
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	f000 fca2 	bl	8002608 <_sbrk_r>
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d1f2      	bne.n	8001cae <sbrk_aligned+0x22>
 8001cc8:	e7ef      	b.n	8001caa <sbrk_aligned+0x1e>
 8001cca:	bf00      	nop
 8001ccc:	20000224 	.word	0x20000224

08001cd0 <_malloc_r>:
 8001cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	1ccd      	adds	r5, r1, #3
 8001cd6:	f025 0503 	bic.w	r5, r5, #3
 8001cda:	3508      	adds	r5, #8
 8001cdc:	2d0c      	cmp	r5, #12
 8001cde:	bf38      	it	cc
 8001ce0:	250c      	movcc	r5, #12
 8001ce2:	2d00      	cmp	r5, #0
 8001ce4:	4606      	mov	r6, r0
 8001ce6:	db01      	blt.n	8001cec <_malloc_r+0x1c>
 8001ce8:	42a9      	cmp	r1, r5
 8001cea:	d904      	bls.n	8001cf6 <_malloc_r+0x26>
 8001cec:	230c      	movs	r3, #12
 8001cee:	6033      	str	r3, [r6, #0]
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001dcc <_malloc_r+0xfc>
 8001cfa:	f000 f869 	bl	8001dd0 <__malloc_lock>
 8001cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8001d02:	461c      	mov	r4, r3
 8001d04:	bb44      	cbnz	r4, 8001d58 <_malloc_r+0x88>
 8001d06:	4629      	mov	r1, r5
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7ff ffbf 	bl	8001c8c <sbrk_aligned>
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	4604      	mov	r4, r0
 8001d12:	d158      	bne.n	8001dc6 <_malloc_r+0xf6>
 8001d14:	f8d8 4000 	ldr.w	r4, [r8]
 8001d18:	4627      	mov	r7, r4
 8001d1a:	2f00      	cmp	r7, #0
 8001d1c:	d143      	bne.n	8001da6 <_malloc_r+0xd6>
 8001d1e:	2c00      	cmp	r4, #0
 8001d20:	d04b      	beq.n	8001dba <_malloc_r+0xea>
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	4639      	mov	r1, r7
 8001d26:	4630      	mov	r0, r6
 8001d28:	eb04 0903 	add.w	r9, r4, r3
 8001d2c:	f000 fc6c 	bl	8002608 <_sbrk_r>
 8001d30:	4581      	cmp	r9, r0
 8001d32:	d142      	bne.n	8001dba <_malloc_r+0xea>
 8001d34:	6821      	ldr	r1, [r4, #0]
 8001d36:	1a6d      	subs	r5, r5, r1
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff ffa6 	bl	8001c8c <sbrk_aligned>
 8001d40:	3001      	adds	r0, #1
 8001d42:	d03a      	beq.n	8001dba <_malloc_r+0xea>
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	442b      	add	r3, r5
 8001d48:	6023      	str	r3, [r4, #0]
 8001d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	bb62      	cbnz	r2, 8001dac <_malloc_r+0xdc>
 8001d52:	f8c8 7000 	str.w	r7, [r8]
 8001d56:	e00f      	b.n	8001d78 <_malloc_r+0xa8>
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	1b52      	subs	r2, r2, r5
 8001d5c:	d420      	bmi.n	8001da0 <_malloc_r+0xd0>
 8001d5e:	2a0b      	cmp	r2, #11
 8001d60:	d917      	bls.n	8001d92 <_malloc_r+0xc2>
 8001d62:	1961      	adds	r1, r4, r5
 8001d64:	42a3      	cmp	r3, r4
 8001d66:	6025      	str	r5, [r4, #0]
 8001d68:	bf18      	it	ne
 8001d6a:	6059      	strne	r1, [r3, #4]
 8001d6c:	6863      	ldr	r3, [r4, #4]
 8001d6e:	bf08      	it	eq
 8001d70:	f8c8 1000 	streq.w	r1, [r8]
 8001d74:	5162      	str	r2, [r4, r5]
 8001d76:	604b      	str	r3, [r1, #4]
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 f82f 	bl	8001ddc <__malloc_unlock>
 8001d7e:	f104 000b 	add.w	r0, r4, #11
 8001d82:	1d23      	adds	r3, r4, #4
 8001d84:	f020 0007 	bic.w	r0, r0, #7
 8001d88:	1ac2      	subs	r2, r0, r3
 8001d8a:	bf1c      	itt	ne
 8001d8c:	1a1b      	subne	r3, r3, r0
 8001d8e:	50a3      	strne	r3, [r4, r2]
 8001d90:	e7af      	b.n	8001cf2 <_malloc_r+0x22>
 8001d92:	6862      	ldr	r2, [r4, #4]
 8001d94:	42a3      	cmp	r3, r4
 8001d96:	bf0c      	ite	eq
 8001d98:	f8c8 2000 	streq.w	r2, [r8]
 8001d9c:	605a      	strne	r2, [r3, #4]
 8001d9e:	e7eb      	b.n	8001d78 <_malloc_r+0xa8>
 8001da0:	4623      	mov	r3, r4
 8001da2:	6864      	ldr	r4, [r4, #4]
 8001da4:	e7ae      	b.n	8001d04 <_malloc_r+0x34>
 8001da6:	463c      	mov	r4, r7
 8001da8:	687f      	ldr	r7, [r7, #4]
 8001daa:	e7b6      	b.n	8001d1a <_malloc_r+0x4a>
 8001dac:	461a      	mov	r2, r3
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	42a3      	cmp	r3, r4
 8001db2:	d1fb      	bne.n	8001dac <_malloc_r+0xdc>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6053      	str	r3, [r2, #4]
 8001db8:	e7de      	b.n	8001d78 <_malloc_r+0xa8>
 8001dba:	230c      	movs	r3, #12
 8001dbc:	6033      	str	r3, [r6, #0]
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f000 f80c 	bl	8001ddc <__malloc_unlock>
 8001dc4:	e794      	b.n	8001cf0 <_malloc_r+0x20>
 8001dc6:	6005      	str	r5, [r0, #0]
 8001dc8:	e7d6      	b.n	8001d78 <_malloc_r+0xa8>
 8001dca:	bf00      	nop
 8001dcc:	20000228 	.word	0x20000228

08001dd0 <__malloc_lock>:
 8001dd0:	4801      	ldr	r0, [pc, #4]	@ (8001dd8 <__malloc_lock+0x8>)
 8001dd2:	f7ff bf0e 	b.w	8001bf2 <__retarget_lock_acquire_recursive>
 8001dd6:	bf00      	nop
 8001dd8:	20000220 	.word	0x20000220

08001ddc <__malloc_unlock>:
 8001ddc:	4801      	ldr	r0, [pc, #4]	@ (8001de4 <__malloc_unlock+0x8>)
 8001dde:	f7ff bf09 	b.w	8001bf4 <__retarget_lock_release_recursive>
 8001de2:	bf00      	nop
 8001de4:	20000220 	.word	0x20000220

08001de8 <__sfputc_r>:
 8001de8:	6893      	ldr	r3, [r2, #8]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	b410      	push	{r4}
 8001df0:	6093      	str	r3, [r2, #8]
 8001df2:	da08      	bge.n	8001e06 <__sfputc_r+0x1e>
 8001df4:	6994      	ldr	r4, [r2, #24]
 8001df6:	42a3      	cmp	r3, r4
 8001df8:	db01      	blt.n	8001dfe <__sfputc_r+0x16>
 8001dfa:	290a      	cmp	r1, #10
 8001dfc:	d103      	bne.n	8001e06 <__sfputc_r+0x1e>
 8001dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e02:	f000 bb6d 	b.w	80024e0 <__swbuf_r>
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	1c58      	adds	r0, r3, #1
 8001e0a:	6010      	str	r0, [r2, #0]
 8001e0c:	7019      	strb	r1, [r3, #0]
 8001e0e:	4608      	mov	r0, r1
 8001e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <__sfputs_r>:
 8001e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e18:	4606      	mov	r6, r0
 8001e1a:	460f      	mov	r7, r1
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	18d5      	adds	r5, r2, r3
 8001e20:	42ac      	cmp	r4, r5
 8001e22:	d101      	bne.n	8001e28 <__sfputs_r+0x12>
 8001e24:	2000      	movs	r0, #0
 8001e26:	e007      	b.n	8001e38 <__sfputs_r+0x22>
 8001e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e2c:	463a      	mov	r2, r7
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff ffda 	bl	8001de8 <__sfputc_r>
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	d1f3      	bne.n	8001e20 <__sfputs_r+0xa>
 8001e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e3c <_vfiprintf_r>:
 8001e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e40:	460d      	mov	r5, r1
 8001e42:	b09d      	sub	sp, #116	@ 0x74
 8001e44:	4614      	mov	r4, r2
 8001e46:	4698      	mov	r8, r3
 8001e48:	4606      	mov	r6, r0
 8001e4a:	b118      	cbz	r0, 8001e54 <_vfiprintf_r+0x18>
 8001e4c:	6a03      	ldr	r3, [r0, #32]
 8001e4e:	b90b      	cbnz	r3, 8001e54 <_vfiprintf_r+0x18>
 8001e50:	f7ff fdca 	bl	80019e8 <__sinit>
 8001e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e56:	07d9      	lsls	r1, r3, #31
 8001e58:	d405      	bmi.n	8001e66 <_vfiprintf_r+0x2a>
 8001e5a:	89ab      	ldrh	r3, [r5, #12]
 8001e5c:	059a      	lsls	r2, r3, #22
 8001e5e:	d402      	bmi.n	8001e66 <_vfiprintf_r+0x2a>
 8001e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e62:	f7ff fec6 	bl	8001bf2 <__retarget_lock_acquire_recursive>
 8001e66:	89ab      	ldrh	r3, [r5, #12]
 8001e68:	071b      	lsls	r3, r3, #28
 8001e6a:	d501      	bpl.n	8001e70 <_vfiprintf_r+0x34>
 8001e6c:	692b      	ldr	r3, [r5, #16]
 8001e6e:	b99b      	cbnz	r3, 8001e98 <_vfiprintf_r+0x5c>
 8001e70:	4629      	mov	r1, r5
 8001e72:	4630      	mov	r0, r6
 8001e74:	f000 fb72 	bl	800255c <__swsetup_r>
 8001e78:	b170      	cbz	r0, 8001e98 <_vfiprintf_r+0x5c>
 8001e7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e7c:	07dc      	lsls	r4, r3, #31
 8001e7e:	d504      	bpl.n	8001e8a <_vfiprintf_r+0x4e>
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e84:	b01d      	add	sp, #116	@ 0x74
 8001e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e8a:	89ab      	ldrh	r3, [r5, #12]
 8001e8c:	0598      	lsls	r0, r3, #22
 8001e8e:	d4f7      	bmi.n	8001e80 <_vfiprintf_r+0x44>
 8001e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e92:	f7ff feaf 	bl	8001bf4 <__retarget_lock_release_recursive>
 8001e96:	e7f3      	b.n	8001e80 <_vfiprintf_r+0x44>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ea6:	2330      	movs	r3, #48	@ 0x30
 8001ea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002058 <_vfiprintf_r+0x21c>
 8001eac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001eb0:	f04f 0901 	mov.w	r9, #1
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	469a      	mov	sl, r3
 8001eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ebc:	b10a      	cbz	r2, 8001ec2 <_vfiprintf_r+0x86>
 8001ebe:	2a25      	cmp	r2, #37	@ 0x25
 8001ec0:	d1f9      	bne.n	8001eb6 <_vfiprintf_r+0x7a>
 8001ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8001ec6:	d00b      	beq.n	8001ee0 <_vfiprintf_r+0xa4>
 8001ec8:	465b      	mov	r3, fp
 8001eca:	4622      	mov	r2, r4
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4630      	mov	r0, r6
 8001ed0:	f7ff ffa1 	bl	8001e16 <__sfputs_r>
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	f000 80a7 	beq.w	8002028 <_vfiprintf_r+0x1ec>
 8001eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001edc:	445a      	add	r2, fp
 8001ede:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 809f 	beq.w	8002028 <_vfiprintf_r+0x1ec>
 8001eea:	2300      	movs	r3, #0
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ef4:	f10a 0a01 	add.w	sl, sl, #1
 8001ef8:	9304      	str	r3, [sp, #16]
 8001efa:	9307      	str	r3, [sp, #28]
 8001efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f02:	4654      	mov	r4, sl
 8001f04:	2205      	movs	r2, #5
 8001f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f0a:	4853      	ldr	r0, [pc, #332]	@ (8002058 <_vfiprintf_r+0x21c>)
 8001f0c:	f7fe f980 	bl	8000210 <memchr>
 8001f10:	9a04      	ldr	r2, [sp, #16]
 8001f12:	b9d8      	cbnz	r0, 8001f4c <_vfiprintf_r+0x110>
 8001f14:	06d1      	lsls	r1, r2, #27
 8001f16:	bf44      	itt	mi
 8001f18:	2320      	movmi	r3, #32
 8001f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f1e:	0713      	lsls	r3, r2, #28
 8001f20:	bf44      	itt	mi
 8001f22:	232b      	movmi	r3, #43	@ 0x2b
 8001f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f28:	f89a 3000 	ldrb.w	r3, [sl]
 8001f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f2e:	d015      	beq.n	8001f5c <_vfiprintf_r+0x120>
 8001f30:	9a07      	ldr	r2, [sp, #28]
 8001f32:	4654      	mov	r4, sl
 8001f34:	2000      	movs	r0, #0
 8001f36:	f04f 0c0a 	mov.w	ip, #10
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f40:	3b30      	subs	r3, #48	@ 0x30
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	d94b      	bls.n	8001fde <_vfiprintf_r+0x1a2>
 8001f46:	b1b0      	cbz	r0, 8001f76 <_vfiprintf_r+0x13a>
 8001f48:	9207      	str	r2, [sp, #28]
 8001f4a:	e014      	b.n	8001f76 <_vfiprintf_r+0x13a>
 8001f4c:	eba0 0308 	sub.w	r3, r0, r8
 8001f50:	fa09 f303 	lsl.w	r3, r9, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	9304      	str	r3, [sp, #16]
 8001f58:	46a2      	mov	sl, r4
 8001f5a:	e7d2      	b.n	8001f02 <_vfiprintf_r+0xc6>
 8001f5c:	9b03      	ldr	r3, [sp, #12]
 8001f5e:	1d19      	adds	r1, r3, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	9103      	str	r1, [sp, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bfbb      	ittet	lt
 8001f68:	425b      	neglt	r3, r3
 8001f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8001f6e:	9307      	strge	r3, [sp, #28]
 8001f70:	9307      	strlt	r3, [sp, #28]
 8001f72:	bfb8      	it	lt
 8001f74:	9204      	strlt	r2, [sp, #16]
 8001f76:	7823      	ldrb	r3, [r4, #0]
 8001f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f7a:	d10a      	bne.n	8001f92 <_vfiprintf_r+0x156>
 8001f7c:	7863      	ldrb	r3, [r4, #1]
 8001f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f80:	d132      	bne.n	8001fe8 <_vfiprintf_r+0x1ac>
 8001f82:	9b03      	ldr	r3, [sp, #12]
 8001f84:	1d1a      	adds	r2, r3, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	9203      	str	r2, [sp, #12]
 8001f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f8e:	3402      	adds	r4, #2
 8001f90:	9305      	str	r3, [sp, #20]
 8001f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002068 <_vfiprintf_r+0x22c>
 8001f96:	7821      	ldrb	r1, [r4, #0]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4650      	mov	r0, sl
 8001f9c:	f7fe f938 	bl	8000210 <memchr>
 8001fa0:	b138      	cbz	r0, 8001fb2 <_vfiprintf_r+0x176>
 8001fa2:	9b04      	ldr	r3, [sp, #16]
 8001fa4:	eba0 000a 	sub.w	r0, r0, sl
 8001fa8:	2240      	movs	r2, #64	@ 0x40
 8001faa:	4082      	lsls	r2, r0
 8001fac:	4313      	orrs	r3, r2
 8001fae:	3401      	adds	r4, #1
 8001fb0:	9304      	str	r3, [sp, #16]
 8001fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fb6:	4829      	ldr	r0, [pc, #164]	@ (800205c <_vfiprintf_r+0x220>)
 8001fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001fbc:	2206      	movs	r2, #6
 8001fbe:	f7fe f927 	bl	8000210 <memchr>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d03f      	beq.n	8002046 <_vfiprintf_r+0x20a>
 8001fc6:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <_vfiprintf_r+0x224>)
 8001fc8:	bb1b      	cbnz	r3, 8002012 <_vfiprintf_r+0x1d6>
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	3307      	adds	r3, #7
 8001fce:	f023 0307 	bic.w	r3, r3, #7
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	9303      	str	r3, [sp, #12]
 8001fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fd8:	443b      	add	r3, r7
 8001fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fdc:	e76a      	b.n	8001eb4 <_vfiprintf_r+0x78>
 8001fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fe2:	460c      	mov	r4, r1
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e7a8      	b.n	8001f3a <_vfiprintf_r+0xfe>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	3401      	adds	r4, #1
 8001fec:	9305      	str	r3, [sp, #20]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 0c0a 	mov.w	ip, #10
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ffa:	3a30      	subs	r2, #48	@ 0x30
 8001ffc:	2a09      	cmp	r2, #9
 8001ffe:	d903      	bls.n	8002008 <_vfiprintf_r+0x1cc>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0c6      	beq.n	8001f92 <_vfiprintf_r+0x156>
 8002004:	9105      	str	r1, [sp, #20]
 8002006:	e7c4      	b.n	8001f92 <_vfiprintf_r+0x156>
 8002008:	fb0c 2101 	mla	r1, ip, r1, r2
 800200c:	4604      	mov	r4, r0
 800200e:	2301      	movs	r3, #1
 8002010:	e7f0      	b.n	8001ff4 <_vfiprintf_r+0x1b8>
 8002012:	ab03      	add	r3, sp, #12
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	462a      	mov	r2, r5
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <_vfiprintf_r+0x228>)
 800201a:	a904      	add	r1, sp, #16
 800201c:	4630      	mov	r0, r6
 800201e:	f3af 8000 	nop.w
 8002022:	4607      	mov	r7, r0
 8002024:	1c78      	adds	r0, r7, #1
 8002026:	d1d6      	bne.n	8001fd6 <_vfiprintf_r+0x19a>
 8002028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800202a:	07d9      	lsls	r1, r3, #31
 800202c:	d405      	bmi.n	800203a <_vfiprintf_r+0x1fe>
 800202e:	89ab      	ldrh	r3, [r5, #12]
 8002030:	059a      	lsls	r2, r3, #22
 8002032:	d402      	bmi.n	800203a <_vfiprintf_r+0x1fe>
 8002034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002036:	f7ff fddd 	bl	8001bf4 <__retarget_lock_release_recursive>
 800203a:	89ab      	ldrh	r3, [r5, #12]
 800203c:	065b      	lsls	r3, r3, #25
 800203e:	f53f af1f 	bmi.w	8001e80 <_vfiprintf_r+0x44>
 8002042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002044:	e71e      	b.n	8001e84 <_vfiprintf_r+0x48>
 8002046:	ab03      	add	r3, sp, #12
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	462a      	mov	r2, r5
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <_vfiprintf_r+0x228>)
 800204e:	a904      	add	r1, sp, #16
 8002050:	4630      	mov	r0, r6
 8002052:	f000 f879 	bl	8002148 <_printf_i>
 8002056:	e7e4      	b.n	8002022 <_vfiprintf_r+0x1e6>
 8002058:	080027b0 	.word	0x080027b0
 800205c:	080027ba 	.word	0x080027ba
 8002060:	00000000 	.word	0x00000000
 8002064:	08001e17 	.word	0x08001e17
 8002068:	080027b6 	.word	0x080027b6

0800206c <_printf_common>:
 800206c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002070:	4616      	mov	r6, r2
 8002072:	4698      	mov	r8, r3
 8002074:	688a      	ldr	r2, [r1, #8]
 8002076:	690b      	ldr	r3, [r1, #16]
 8002078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800207c:	4293      	cmp	r3, r2
 800207e:	bfb8      	it	lt
 8002080:	4613      	movlt	r3, r2
 8002082:	6033      	str	r3, [r6, #0]
 8002084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002088:	4607      	mov	r7, r0
 800208a:	460c      	mov	r4, r1
 800208c:	b10a      	cbz	r2, 8002092 <_printf_common+0x26>
 800208e:	3301      	adds	r3, #1
 8002090:	6033      	str	r3, [r6, #0]
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	0699      	lsls	r1, r3, #26
 8002096:	bf42      	ittt	mi
 8002098:	6833      	ldrmi	r3, [r6, #0]
 800209a:	3302      	addmi	r3, #2
 800209c:	6033      	strmi	r3, [r6, #0]
 800209e:	6825      	ldr	r5, [r4, #0]
 80020a0:	f015 0506 	ands.w	r5, r5, #6
 80020a4:	d106      	bne.n	80020b4 <_printf_common+0x48>
 80020a6:	f104 0a19 	add.w	sl, r4, #25
 80020aa:	68e3      	ldr	r3, [r4, #12]
 80020ac:	6832      	ldr	r2, [r6, #0]
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	42ab      	cmp	r3, r5
 80020b2:	dc26      	bgt.n	8002102 <_printf_common+0x96>
 80020b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80020b8:	6822      	ldr	r2, [r4, #0]
 80020ba:	3b00      	subs	r3, #0
 80020bc:	bf18      	it	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	0692      	lsls	r2, r2, #26
 80020c2:	d42b      	bmi.n	800211c <_printf_common+0xb0>
 80020c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80020c8:	4641      	mov	r1, r8
 80020ca:	4638      	mov	r0, r7
 80020cc:	47c8      	blx	r9
 80020ce:	3001      	adds	r0, #1
 80020d0:	d01e      	beq.n	8002110 <_printf_common+0xa4>
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	6922      	ldr	r2, [r4, #16]
 80020d6:	f003 0306 	and.w	r3, r3, #6
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf02      	ittt	eq
 80020de:	68e5      	ldreq	r5, [r4, #12]
 80020e0:	6833      	ldreq	r3, [r6, #0]
 80020e2:	1aed      	subeq	r5, r5, r3
 80020e4:	68a3      	ldr	r3, [r4, #8]
 80020e6:	bf0c      	ite	eq
 80020e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020ec:	2500      	movne	r5, #0
 80020ee:	4293      	cmp	r3, r2
 80020f0:	bfc4      	itt	gt
 80020f2:	1a9b      	subgt	r3, r3, r2
 80020f4:	18ed      	addgt	r5, r5, r3
 80020f6:	2600      	movs	r6, #0
 80020f8:	341a      	adds	r4, #26
 80020fa:	42b5      	cmp	r5, r6
 80020fc:	d11a      	bne.n	8002134 <_printf_common+0xc8>
 80020fe:	2000      	movs	r0, #0
 8002100:	e008      	b.n	8002114 <_printf_common+0xa8>
 8002102:	2301      	movs	r3, #1
 8002104:	4652      	mov	r2, sl
 8002106:	4641      	mov	r1, r8
 8002108:	4638      	mov	r0, r7
 800210a:	47c8      	blx	r9
 800210c:	3001      	adds	r0, #1
 800210e:	d103      	bne.n	8002118 <_printf_common+0xac>
 8002110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002118:	3501      	adds	r5, #1
 800211a:	e7c6      	b.n	80020aa <_printf_common+0x3e>
 800211c:	18e1      	adds	r1, r4, r3
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	2030      	movs	r0, #48	@ 0x30
 8002122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002126:	4422      	add	r2, r4
 8002128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800212c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002130:	3302      	adds	r3, #2
 8002132:	e7c7      	b.n	80020c4 <_printf_common+0x58>
 8002134:	2301      	movs	r3, #1
 8002136:	4622      	mov	r2, r4
 8002138:	4641      	mov	r1, r8
 800213a:	4638      	mov	r0, r7
 800213c:	47c8      	blx	r9
 800213e:	3001      	adds	r0, #1
 8002140:	d0e6      	beq.n	8002110 <_printf_common+0xa4>
 8002142:	3601      	adds	r6, #1
 8002144:	e7d9      	b.n	80020fa <_printf_common+0x8e>
	...

08002148 <_printf_i>:
 8002148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800214c:	7e0f      	ldrb	r7, [r1, #24]
 800214e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002150:	2f78      	cmp	r7, #120	@ 0x78
 8002152:	4691      	mov	r9, r2
 8002154:	4680      	mov	r8, r0
 8002156:	460c      	mov	r4, r1
 8002158:	469a      	mov	sl, r3
 800215a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800215e:	d807      	bhi.n	8002170 <_printf_i+0x28>
 8002160:	2f62      	cmp	r7, #98	@ 0x62
 8002162:	d80a      	bhi.n	800217a <_printf_i+0x32>
 8002164:	2f00      	cmp	r7, #0
 8002166:	f000 80d2 	beq.w	800230e <_printf_i+0x1c6>
 800216a:	2f58      	cmp	r7, #88	@ 0x58
 800216c:	f000 80b9 	beq.w	80022e2 <_printf_i+0x19a>
 8002170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002178:	e03a      	b.n	80021f0 <_printf_i+0xa8>
 800217a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800217e:	2b15      	cmp	r3, #21
 8002180:	d8f6      	bhi.n	8002170 <_printf_i+0x28>
 8002182:	a101      	add	r1, pc, #4	@ (adr r1, 8002188 <_printf_i+0x40>)
 8002184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002188:	080021e1 	.word	0x080021e1
 800218c:	080021f5 	.word	0x080021f5
 8002190:	08002171 	.word	0x08002171
 8002194:	08002171 	.word	0x08002171
 8002198:	08002171 	.word	0x08002171
 800219c:	08002171 	.word	0x08002171
 80021a0:	080021f5 	.word	0x080021f5
 80021a4:	08002171 	.word	0x08002171
 80021a8:	08002171 	.word	0x08002171
 80021ac:	08002171 	.word	0x08002171
 80021b0:	08002171 	.word	0x08002171
 80021b4:	080022f5 	.word	0x080022f5
 80021b8:	0800221f 	.word	0x0800221f
 80021bc:	080022af 	.word	0x080022af
 80021c0:	08002171 	.word	0x08002171
 80021c4:	08002171 	.word	0x08002171
 80021c8:	08002317 	.word	0x08002317
 80021cc:	08002171 	.word	0x08002171
 80021d0:	0800221f 	.word	0x0800221f
 80021d4:	08002171 	.word	0x08002171
 80021d8:	08002171 	.word	0x08002171
 80021dc:	080022b7 	.word	0x080022b7
 80021e0:	6833      	ldr	r3, [r6, #0]
 80021e2:	1d1a      	adds	r2, r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6032      	str	r2, [r6, #0]
 80021e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021f0:	2301      	movs	r3, #1
 80021f2:	e09d      	b.n	8002330 <_printf_i+0x1e8>
 80021f4:	6833      	ldr	r3, [r6, #0]
 80021f6:	6820      	ldr	r0, [r4, #0]
 80021f8:	1d19      	adds	r1, r3, #4
 80021fa:	6031      	str	r1, [r6, #0]
 80021fc:	0606      	lsls	r6, r0, #24
 80021fe:	d501      	bpl.n	8002204 <_printf_i+0xbc>
 8002200:	681d      	ldr	r5, [r3, #0]
 8002202:	e003      	b.n	800220c <_printf_i+0xc4>
 8002204:	0645      	lsls	r5, r0, #25
 8002206:	d5fb      	bpl.n	8002200 <_printf_i+0xb8>
 8002208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800220c:	2d00      	cmp	r5, #0
 800220e:	da03      	bge.n	8002218 <_printf_i+0xd0>
 8002210:	232d      	movs	r3, #45	@ 0x2d
 8002212:	426d      	negs	r5, r5
 8002214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002218:	4859      	ldr	r0, [pc, #356]	@ (8002380 <_printf_i+0x238>)
 800221a:	230a      	movs	r3, #10
 800221c:	e011      	b.n	8002242 <_printf_i+0xfa>
 800221e:	6821      	ldr	r1, [r4, #0]
 8002220:	6833      	ldr	r3, [r6, #0]
 8002222:	0608      	lsls	r0, r1, #24
 8002224:	f853 5b04 	ldr.w	r5, [r3], #4
 8002228:	d402      	bmi.n	8002230 <_printf_i+0xe8>
 800222a:	0649      	lsls	r1, r1, #25
 800222c:	bf48      	it	mi
 800222e:	b2ad      	uxthmi	r5, r5
 8002230:	2f6f      	cmp	r7, #111	@ 0x6f
 8002232:	4853      	ldr	r0, [pc, #332]	@ (8002380 <_printf_i+0x238>)
 8002234:	6033      	str	r3, [r6, #0]
 8002236:	bf14      	ite	ne
 8002238:	230a      	movne	r3, #10
 800223a:	2308      	moveq	r3, #8
 800223c:	2100      	movs	r1, #0
 800223e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002242:	6866      	ldr	r6, [r4, #4]
 8002244:	60a6      	str	r6, [r4, #8]
 8002246:	2e00      	cmp	r6, #0
 8002248:	bfa2      	ittt	ge
 800224a:	6821      	ldrge	r1, [r4, #0]
 800224c:	f021 0104 	bicge.w	r1, r1, #4
 8002250:	6021      	strge	r1, [r4, #0]
 8002252:	b90d      	cbnz	r5, 8002258 <_printf_i+0x110>
 8002254:	2e00      	cmp	r6, #0
 8002256:	d04b      	beq.n	80022f0 <_printf_i+0x1a8>
 8002258:	4616      	mov	r6, r2
 800225a:	fbb5 f1f3 	udiv	r1, r5, r3
 800225e:	fb03 5711 	mls	r7, r3, r1, r5
 8002262:	5dc7      	ldrb	r7, [r0, r7]
 8002264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002268:	462f      	mov	r7, r5
 800226a:	42bb      	cmp	r3, r7
 800226c:	460d      	mov	r5, r1
 800226e:	d9f4      	bls.n	800225a <_printf_i+0x112>
 8002270:	2b08      	cmp	r3, #8
 8002272:	d10b      	bne.n	800228c <_printf_i+0x144>
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	07df      	lsls	r7, r3, #31
 8002278:	d508      	bpl.n	800228c <_printf_i+0x144>
 800227a:	6923      	ldr	r3, [r4, #16]
 800227c:	6861      	ldr	r1, [r4, #4]
 800227e:	4299      	cmp	r1, r3
 8002280:	bfde      	ittt	le
 8002282:	2330      	movle	r3, #48	@ 0x30
 8002284:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002288:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800228c:	1b92      	subs	r2, r2, r6
 800228e:	6122      	str	r2, [r4, #16]
 8002290:	f8cd a000 	str.w	sl, [sp]
 8002294:	464b      	mov	r3, r9
 8002296:	aa03      	add	r2, sp, #12
 8002298:	4621      	mov	r1, r4
 800229a:	4640      	mov	r0, r8
 800229c:	f7ff fee6 	bl	800206c <_printf_common>
 80022a0:	3001      	adds	r0, #1
 80022a2:	d14a      	bne.n	800233a <_printf_i+0x1f2>
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022a8:	b004      	add	sp, #16
 80022aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	6023      	str	r3, [r4, #0]
 80022b6:	4833      	ldr	r0, [pc, #204]	@ (8002384 <_printf_i+0x23c>)
 80022b8:	2778      	movs	r7, #120	@ 0x78
 80022ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	6831      	ldr	r1, [r6, #0]
 80022c2:	061f      	lsls	r7, r3, #24
 80022c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80022c8:	d402      	bmi.n	80022d0 <_printf_i+0x188>
 80022ca:	065f      	lsls	r7, r3, #25
 80022cc:	bf48      	it	mi
 80022ce:	b2ad      	uxthmi	r5, r5
 80022d0:	6031      	str	r1, [r6, #0]
 80022d2:	07d9      	lsls	r1, r3, #31
 80022d4:	bf44      	itt	mi
 80022d6:	f043 0320 	orrmi.w	r3, r3, #32
 80022da:	6023      	strmi	r3, [r4, #0]
 80022dc:	b11d      	cbz	r5, 80022e6 <_printf_i+0x19e>
 80022de:	2310      	movs	r3, #16
 80022e0:	e7ac      	b.n	800223c <_printf_i+0xf4>
 80022e2:	4827      	ldr	r0, [pc, #156]	@ (8002380 <_printf_i+0x238>)
 80022e4:	e7e9      	b.n	80022ba <_printf_i+0x172>
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	f023 0320 	bic.w	r3, r3, #32
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	e7f6      	b.n	80022de <_printf_i+0x196>
 80022f0:	4616      	mov	r6, r2
 80022f2:	e7bd      	b.n	8002270 <_printf_i+0x128>
 80022f4:	6833      	ldr	r3, [r6, #0]
 80022f6:	6825      	ldr	r5, [r4, #0]
 80022f8:	6961      	ldr	r1, [r4, #20]
 80022fa:	1d18      	adds	r0, r3, #4
 80022fc:	6030      	str	r0, [r6, #0]
 80022fe:	062e      	lsls	r6, r5, #24
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	d501      	bpl.n	8002308 <_printf_i+0x1c0>
 8002304:	6019      	str	r1, [r3, #0]
 8002306:	e002      	b.n	800230e <_printf_i+0x1c6>
 8002308:	0668      	lsls	r0, r5, #25
 800230a:	d5fb      	bpl.n	8002304 <_printf_i+0x1bc>
 800230c:	8019      	strh	r1, [r3, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	6123      	str	r3, [r4, #16]
 8002312:	4616      	mov	r6, r2
 8002314:	e7bc      	b.n	8002290 <_printf_i+0x148>
 8002316:	6833      	ldr	r3, [r6, #0]
 8002318:	1d1a      	adds	r2, r3, #4
 800231a:	6032      	str	r2, [r6, #0]
 800231c:	681e      	ldr	r6, [r3, #0]
 800231e:	6862      	ldr	r2, [r4, #4]
 8002320:	2100      	movs	r1, #0
 8002322:	4630      	mov	r0, r6
 8002324:	f7fd ff74 	bl	8000210 <memchr>
 8002328:	b108      	cbz	r0, 800232e <_printf_i+0x1e6>
 800232a:	1b80      	subs	r0, r0, r6
 800232c:	6060      	str	r0, [r4, #4]
 800232e:	6863      	ldr	r3, [r4, #4]
 8002330:	6123      	str	r3, [r4, #16]
 8002332:	2300      	movs	r3, #0
 8002334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002338:	e7aa      	b.n	8002290 <_printf_i+0x148>
 800233a:	6923      	ldr	r3, [r4, #16]
 800233c:	4632      	mov	r2, r6
 800233e:	4649      	mov	r1, r9
 8002340:	4640      	mov	r0, r8
 8002342:	47d0      	blx	sl
 8002344:	3001      	adds	r0, #1
 8002346:	d0ad      	beq.n	80022a4 <_printf_i+0x15c>
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	079b      	lsls	r3, r3, #30
 800234c:	d413      	bmi.n	8002376 <_printf_i+0x22e>
 800234e:	68e0      	ldr	r0, [r4, #12]
 8002350:	9b03      	ldr	r3, [sp, #12]
 8002352:	4298      	cmp	r0, r3
 8002354:	bfb8      	it	lt
 8002356:	4618      	movlt	r0, r3
 8002358:	e7a6      	b.n	80022a8 <_printf_i+0x160>
 800235a:	2301      	movs	r3, #1
 800235c:	4632      	mov	r2, r6
 800235e:	4649      	mov	r1, r9
 8002360:	4640      	mov	r0, r8
 8002362:	47d0      	blx	sl
 8002364:	3001      	adds	r0, #1
 8002366:	d09d      	beq.n	80022a4 <_printf_i+0x15c>
 8002368:	3501      	adds	r5, #1
 800236a:	68e3      	ldr	r3, [r4, #12]
 800236c:	9903      	ldr	r1, [sp, #12]
 800236e:	1a5b      	subs	r3, r3, r1
 8002370:	42ab      	cmp	r3, r5
 8002372:	dcf2      	bgt.n	800235a <_printf_i+0x212>
 8002374:	e7eb      	b.n	800234e <_printf_i+0x206>
 8002376:	2500      	movs	r5, #0
 8002378:	f104 0619 	add.w	r6, r4, #25
 800237c:	e7f5      	b.n	800236a <_printf_i+0x222>
 800237e:	bf00      	nop
 8002380:	080027c1 	.word	0x080027c1
 8002384:	080027d2 	.word	0x080027d2

08002388 <__sflush_r>:
 8002388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002390:	0716      	lsls	r6, r2, #28
 8002392:	4605      	mov	r5, r0
 8002394:	460c      	mov	r4, r1
 8002396:	d454      	bmi.n	8002442 <__sflush_r+0xba>
 8002398:	684b      	ldr	r3, [r1, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	dc02      	bgt.n	80023a4 <__sflush_r+0x1c>
 800239e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dd48      	ble.n	8002436 <__sflush_r+0xae>
 80023a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d045      	beq.n	8002436 <__sflush_r+0xae>
 80023aa:	2300      	movs	r3, #0
 80023ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80023b0:	682f      	ldr	r7, [r5, #0]
 80023b2:	6a21      	ldr	r1, [r4, #32]
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	d030      	beq.n	800241a <__sflush_r+0x92>
 80023b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	0759      	lsls	r1, r3, #29
 80023be:	d505      	bpl.n	80023cc <__sflush_r+0x44>
 80023c0:	6863      	ldr	r3, [r4, #4]
 80023c2:	1ad2      	subs	r2, r2, r3
 80023c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023c6:	b10b      	cbz	r3, 80023cc <__sflush_r+0x44>
 80023c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023ca:	1ad2      	subs	r2, r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023d0:	6a21      	ldr	r1, [r4, #32]
 80023d2:	4628      	mov	r0, r5
 80023d4:	47b0      	blx	r6
 80023d6:	1c43      	adds	r3, r0, #1
 80023d8:	89a3      	ldrh	r3, [r4, #12]
 80023da:	d106      	bne.n	80023ea <__sflush_r+0x62>
 80023dc:	6829      	ldr	r1, [r5, #0]
 80023de:	291d      	cmp	r1, #29
 80023e0:	d82b      	bhi.n	800243a <__sflush_r+0xb2>
 80023e2:	4a2a      	ldr	r2, [pc, #168]	@ (800248c <__sflush_r+0x104>)
 80023e4:	410a      	asrs	r2, r1
 80023e6:	07d6      	lsls	r6, r2, #31
 80023e8:	d427      	bmi.n	800243a <__sflush_r+0xb2>
 80023ea:	2200      	movs	r2, #0
 80023ec:	6062      	str	r2, [r4, #4]
 80023ee:	04d9      	lsls	r1, r3, #19
 80023f0:	6922      	ldr	r2, [r4, #16]
 80023f2:	6022      	str	r2, [r4, #0]
 80023f4:	d504      	bpl.n	8002400 <__sflush_r+0x78>
 80023f6:	1c42      	adds	r2, r0, #1
 80023f8:	d101      	bne.n	80023fe <__sflush_r+0x76>
 80023fa:	682b      	ldr	r3, [r5, #0]
 80023fc:	b903      	cbnz	r3, 8002400 <__sflush_r+0x78>
 80023fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8002400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002402:	602f      	str	r7, [r5, #0]
 8002404:	b1b9      	cbz	r1, 8002436 <__sflush_r+0xae>
 8002406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800240a:	4299      	cmp	r1, r3
 800240c:	d002      	beq.n	8002414 <__sflush_r+0x8c>
 800240e:	4628      	mov	r0, r5
 8002410:	f7ff fbf2 	bl	8001bf8 <_free_r>
 8002414:	2300      	movs	r3, #0
 8002416:	6363      	str	r3, [r4, #52]	@ 0x34
 8002418:	e00d      	b.n	8002436 <__sflush_r+0xae>
 800241a:	2301      	movs	r3, #1
 800241c:	4628      	mov	r0, r5
 800241e:	47b0      	blx	r6
 8002420:	4602      	mov	r2, r0
 8002422:	1c50      	adds	r0, r2, #1
 8002424:	d1c9      	bne.n	80023ba <__sflush_r+0x32>
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0c6      	beq.n	80023ba <__sflush_r+0x32>
 800242c:	2b1d      	cmp	r3, #29
 800242e:	d001      	beq.n	8002434 <__sflush_r+0xac>
 8002430:	2b16      	cmp	r3, #22
 8002432:	d11e      	bne.n	8002472 <__sflush_r+0xea>
 8002434:	602f      	str	r7, [r5, #0]
 8002436:	2000      	movs	r0, #0
 8002438:	e022      	b.n	8002480 <__sflush_r+0xf8>
 800243a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800243e:	b21b      	sxth	r3, r3
 8002440:	e01b      	b.n	800247a <__sflush_r+0xf2>
 8002442:	690f      	ldr	r7, [r1, #16]
 8002444:	2f00      	cmp	r7, #0
 8002446:	d0f6      	beq.n	8002436 <__sflush_r+0xae>
 8002448:	0793      	lsls	r3, r2, #30
 800244a:	680e      	ldr	r6, [r1, #0]
 800244c:	bf08      	it	eq
 800244e:	694b      	ldreq	r3, [r1, #20]
 8002450:	600f      	str	r7, [r1, #0]
 8002452:	bf18      	it	ne
 8002454:	2300      	movne	r3, #0
 8002456:	eba6 0807 	sub.w	r8, r6, r7
 800245a:	608b      	str	r3, [r1, #8]
 800245c:	f1b8 0f00 	cmp.w	r8, #0
 8002460:	dde9      	ble.n	8002436 <__sflush_r+0xae>
 8002462:	6a21      	ldr	r1, [r4, #32]
 8002464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002466:	4643      	mov	r3, r8
 8002468:	463a      	mov	r2, r7
 800246a:	4628      	mov	r0, r5
 800246c:	47b0      	blx	r6
 800246e:	2800      	cmp	r0, #0
 8002470:	dc08      	bgt.n	8002484 <__sflush_r+0xfc>
 8002472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800247a:	81a3      	strh	r3, [r4, #12]
 800247c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002484:	4407      	add	r7, r0
 8002486:	eba8 0800 	sub.w	r8, r8, r0
 800248a:	e7e7      	b.n	800245c <__sflush_r+0xd4>
 800248c:	dfbffffe 	.word	0xdfbffffe

08002490 <_fflush_r>:
 8002490:	b538      	push	{r3, r4, r5, lr}
 8002492:	690b      	ldr	r3, [r1, #16]
 8002494:	4605      	mov	r5, r0
 8002496:	460c      	mov	r4, r1
 8002498:	b913      	cbnz	r3, 80024a0 <_fflush_r+0x10>
 800249a:	2500      	movs	r5, #0
 800249c:	4628      	mov	r0, r5
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	b118      	cbz	r0, 80024aa <_fflush_r+0x1a>
 80024a2:	6a03      	ldr	r3, [r0, #32]
 80024a4:	b90b      	cbnz	r3, 80024aa <_fflush_r+0x1a>
 80024a6:	f7ff fa9f 	bl	80019e8 <__sinit>
 80024aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f3      	beq.n	800249a <_fflush_r+0xa>
 80024b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024b4:	07d0      	lsls	r0, r2, #31
 80024b6:	d404      	bmi.n	80024c2 <_fflush_r+0x32>
 80024b8:	0599      	lsls	r1, r3, #22
 80024ba:	d402      	bmi.n	80024c2 <_fflush_r+0x32>
 80024bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024be:	f7ff fb98 	bl	8001bf2 <__retarget_lock_acquire_recursive>
 80024c2:	4628      	mov	r0, r5
 80024c4:	4621      	mov	r1, r4
 80024c6:	f7ff ff5f 	bl	8002388 <__sflush_r>
 80024ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024cc:	07da      	lsls	r2, r3, #31
 80024ce:	4605      	mov	r5, r0
 80024d0:	d4e4      	bmi.n	800249c <_fflush_r+0xc>
 80024d2:	89a3      	ldrh	r3, [r4, #12]
 80024d4:	059b      	lsls	r3, r3, #22
 80024d6:	d4e1      	bmi.n	800249c <_fflush_r+0xc>
 80024d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024da:	f7ff fb8b 	bl	8001bf4 <__retarget_lock_release_recursive>
 80024de:	e7dd      	b.n	800249c <_fflush_r+0xc>

080024e0 <__swbuf_r>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	460e      	mov	r6, r1
 80024e4:	4614      	mov	r4, r2
 80024e6:	4605      	mov	r5, r0
 80024e8:	b118      	cbz	r0, 80024f2 <__swbuf_r+0x12>
 80024ea:	6a03      	ldr	r3, [r0, #32]
 80024ec:	b90b      	cbnz	r3, 80024f2 <__swbuf_r+0x12>
 80024ee:	f7ff fa7b 	bl	80019e8 <__sinit>
 80024f2:	69a3      	ldr	r3, [r4, #24]
 80024f4:	60a3      	str	r3, [r4, #8]
 80024f6:	89a3      	ldrh	r3, [r4, #12]
 80024f8:	071a      	lsls	r2, r3, #28
 80024fa:	d501      	bpl.n	8002500 <__swbuf_r+0x20>
 80024fc:	6923      	ldr	r3, [r4, #16]
 80024fe:	b943      	cbnz	r3, 8002512 <__swbuf_r+0x32>
 8002500:	4621      	mov	r1, r4
 8002502:	4628      	mov	r0, r5
 8002504:	f000 f82a 	bl	800255c <__swsetup_r>
 8002508:	b118      	cbz	r0, 8002512 <__swbuf_r+0x32>
 800250a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800250e:	4638      	mov	r0, r7
 8002510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	6922      	ldr	r2, [r4, #16]
 8002516:	1a98      	subs	r0, r3, r2
 8002518:	6963      	ldr	r3, [r4, #20]
 800251a:	b2f6      	uxtb	r6, r6
 800251c:	4283      	cmp	r3, r0
 800251e:	4637      	mov	r7, r6
 8002520:	dc05      	bgt.n	800252e <__swbuf_r+0x4e>
 8002522:	4621      	mov	r1, r4
 8002524:	4628      	mov	r0, r5
 8002526:	f7ff ffb3 	bl	8002490 <_fflush_r>
 800252a:	2800      	cmp	r0, #0
 800252c:	d1ed      	bne.n	800250a <__swbuf_r+0x2a>
 800252e:	68a3      	ldr	r3, [r4, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	60a3      	str	r3, [r4, #8]
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	6022      	str	r2, [r4, #0]
 800253a:	701e      	strb	r6, [r3, #0]
 800253c:	6962      	ldr	r2, [r4, #20]
 800253e:	1c43      	adds	r3, r0, #1
 8002540:	429a      	cmp	r2, r3
 8002542:	d004      	beq.n	800254e <__swbuf_r+0x6e>
 8002544:	89a3      	ldrh	r3, [r4, #12]
 8002546:	07db      	lsls	r3, r3, #31
 8002548:	d5e1      	bpl.n	800250e <__swbuf_r+0x2e>
 800254a:	2e0a      	cmp	r6, #10
 800254c:	d1df      	bne.n	800250e <__swbuf_r+0x2e>
 800254e:	4621      	mov	r1, r4
 8002550:	4628      	mov	r0, r5
 8002552:	f7ff ff9d 	bl	8002490 <_fflush_r>
 8002556:	2800      	cmp	r0, #0
 8002558:	d0d9      	beq.n	800250e <__swbuf_r+0x2e>
 800255a:	e7d6      	b.n	800250a <__swbuf_r+0x2a>

0800255c <__swsetup_r>:
 800255c:	b538      	push	{r3, r4, r5, lr}
 800255e:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <__swsetup_r+0xa8>)
 8002560:	4605      	mov	r5, r0
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	460c      	mov	r4, r1
 8002566:	b118      	cbz	r0, 8002570 <__swsetup_r+0x14>
 8002568:	6a03      	ldr	r3, [r0, #32]
 800256a:	b90b      	cbnz	r3, 8002570 <__swsetup_r+0x14>
 800256c:	f7ff fa3c 	bl	80019e8 <__sinit>
 8002570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002574:	0719      	lsls	r1, r3, #28
 8002576:	d422      	bmi.n	80025be <__swsetup_r+0x62>
 8002578:	06da      	lsls	r2, r3, #27
 800257a:	d407      	bmi.n	800258c <__swsetup_r+0x30>
 800257c:	2209      	movs	r2, #9
 800257e:	602a      	str	r2, [r5, #0]
 8002580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002584:	81a3      	strh	r3, [r4, #12]
 8002586:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800258a:	e033      	b.n	80025f4 <__swsetup_r+0x98>
 800258c:	0758      	lsls	r0, r3, #29
 800258e:	d512      	bpl.n	80025b6 <__swsetup_r+0x5a>
 8002590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002592:	b141      	cbz	r1, 80025a6 <__swsetup_r+0x4a>
 8002594:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002598:	4299      	cmp	r1, r3
 800259a:	d002      	beq.n	80025a2 <__swsetup_r+0x46>
 800259c:	4628      	mov	r0, r5
 800259e:	f7ff fb2b 	bl	8001bf8 <_free_r>
 80025a2:	2300      	movs	r3, #0
 80025a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80025ac:	81a3      	strh	r3, [r4, #12]
 80025ae:	2300      	movs	r3, #0
 80025b0:	6063      	str	r3, [r4, #4]
 80025b2:	6923      	ldr	r3, [r4, #16]
 80025b4:	6023      	str	r3, [r4, #0]
 80025b6:	89a3      	ldrh	r3, [r4, #12]
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	81a3      	strh	r3, [r4, #12]
 80025be:	6923      	ldr	r3, [r4, #16]
 80025c0:	b94b      	cbnz	r3, 80025d6 <__swsetup_r+0x7a>
 80025c2:	89a3      	ldrh	r3, [r4, #12]
 80025c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80025c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025cc:	d003      	beq.n	80025d6 <__swsetup_r+0x7a>
 80025ce:	4621      	mov	r1, r4
 80025d0:	4628      	mov	r0, r5
 80025d2:	f000 f84f 	bl	8002674 <__smakebuf_r>
 80025d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025da:	f013 0201 	ands.w	r2, r3, #1
 80025de:	d00a      	beq.n	80025f6 <__swsetup_r+0x9a>
 80025e0:	2200      	movs	r2, #0
 80025e2:	60a2      	str	r2, [r4, #8]
 80025e4:	6962      	ldr	r2, [r4, #20]
 80025e6:	4252      	negs	r2, r2
 80025e8:	61a2      	str	r2, [r4, #24]
 80025ea:	6922      	ldr	r2, [r4, #16]
 80025ec:	b942      	cbnz	r2, 8002600 <__swsetup_r+0xa4>
 80025ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80025f2:	d1c5      	bne.n	8002580 <__swsetup_r+0x24>
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
 80025f6:	0799      	lsls	r1, r3, #30
 80025f8:	bf58      	it	pl
 80025fa:	6962      	ldrpl	r2, [r4, #20]
 80025fc:	60a2      	str	r2, [r4, #8]
 80025fe:	e7f4      	b.n	80025ea <__swsetup_r+0x8e>
 8002600:	2000      	movs	r0, #0
 8002602:	e7f7      	b.n	80025f4 <__swsetup_r+0x98>
 8002604:	20000020 	.word	0x20000020

08002608 <_sbrk_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4d06      	ldr	r5, [pc, #24]	@ (8002624 <_sbrk_r+0x1c>)
 800260c:	2300      	movs	r3, #0
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	f7fe f99a 	bl	800094c <_sbrk>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d102      	bne.n	8002622 <_sbrk_r+0x1a>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	b103      	cbz	r3, 8002622 <_sbrk_r+0x1a>
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	2000021c 	.word	0x2000021c

08002628 <__swhatbuf_r>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	460c      	mov	r4, r1
 800262c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002630:	2900      	cmp	r1, #0
 8002632:	b096      	sub	sp, #88	@ 0x58
 8002634:	4615      	mov	r5, r2
 8002636:	461e      	mov	r6, r3
 8002638:	da0d      	bge.n	8002656 <__swhatbuf_r+0x2e>
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	bf14      	ite	ne
 8002646:	2340      	movne	r3, #64	@ 0x40
 8002648:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800264c:	2000      	movs	r0, #0
 800264e:	6031      	str	r1, [r6, #0]
 8002650:	602b      	str	r3, [r5, #0]
 8002652:	b016      	add	sp, #88	@ 0x58
 8002654:	bd70      	pop	{r4, r5, r6, pc}
 8002656:	466a      	mov	r2, sp
 8002658:	f000 f848 	bl	80026ec <_fstat_r>
 800265c:	2800      	cmp	r0, #0
 800265e:	dbec      	blt.n	800263a <__swhatbuf_r+0x12>
 8002660:	9901      	ldr	r1, [sp, #4]
 8002662:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002666:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800266a:	4259      	negs	r1, r3
 800266c:	4159      	adcs	r1, r3
 800266e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002672:	e7eb      	b.n	800264c <__swhatbuf_r+0x24>

08002674 <__smakebuf_r>:
 8002674:	898b      	ldrh	r3, [r1, #12]
 8002676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002678:	079d      	lsls	r5, r3, #30
 800267a:	4606      	mov	r6, r0
 800267c:	460c      	mov	r4, r1
 800267e:	d507      	bpl.n	8002690 <__smakebuf_r+0x1c>
 8002680:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	6123      	str	r3, [r4, #16]
 8002688:	2301      	movs	r3, #1
 800268a:	6163      	str	r3, [r4, #20]
 800268c:	b003      	add	sp, #12
 800268e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002690:	ab01      	add	r3, sp, #4
 8002692:	466a      	mov	r2, sp
 8002694:	f7ff ffc8 	bl	8002628 <__swhatbuf_r>
 8002698:	9f00      	ldr	r7, [sp, #0]
 800269a:	4605      	mov	r5, r0
 800269c:	4639      	mov	r1, r7
 800269e:	4630      	mov	r0, r6
 80026a0:	f7ff fb16 	bl	8001cd0 <_malloc_r>
 80026a4:	b948      	cbnz	r0, 80026ba <__smakebuf_r+0x46>
 80026a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026aa:	059a      	lsls	r2, r3, #22
 80026ac:	d4ee      	bmi.n	800268c <__smakebuf_r+0x18>
 80026ae:	f023 0303 	bic.w	r3, r3, #3
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	81a3      	strh	r3, [r4, #12]
 80026b8:	e7e2      	b.n	8002680 <__smakebuf_r+0xc>
 80026ba:	89a3      	ldrh	r3, [r4, #12]
 80026bc:	6020      	str	r0, [r4, #0]
 80026be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c2:	81a3      	strh	r3, [r4, #12]
 80026c4:	9b01      	ldr	r3, [sp, #4]
 80026c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80026ca:	b15b      	cbz	r3, 80026e4 <__smakebuf_r+0x70>
 80026cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d0:	4630      	mov	r0, r6
 80026d2:	f000 f81d 	bl	8002710 <_isatty_r>
 80026d6:	b128      	cbz	r0, 80026e4 <__smakebuf_r+0x70>
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	81a3      	strh	r3, [r4, #12]
 80026e4:	89a3      	ldrh	r3, [r4, #12]
 80026e6:	431d      	orrs	r5, r3
 80026e8:	81a5      	strh	r5, [r4, #12]
 80026ea:	e7cf      	b.n	800268c <__smakebuf_r+0x18>

080026ec <_fstat_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4d07      	ldr	r5, [pc, #28]	@ (800270c <_fstat_r+0x20>)
 80026f0:	2300      	movs	r3, #0
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	602b      	str	r3, [r5, #0]
 80026fa:	f7fe f91e 	bl	800093a <_fstat>
 80026fe:	1c43      	adds	r3, r0, #1
 8002700:	d102      	bne.n	8002708 <_fstat_r+0x1c>
 8002702:	682b      	ldr	r3, [r5, #0]
 8002704:	b103      	cbz	r3, 8002708 <_fstat_r+0x1c>
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	bd38      	pop	{r3, r4, r5, pc}
 800270a:	bf00      	nop
 800270c:	2000021c 	.word	0x2000021c

08002710 <_isatty_r>:
 8002710:	b538      	push	{r3, r4, r5, lr}
 8002712:	4d06      	ldr	r5, [pc, #24]	@ (800272c <_isatty_r+0x1c>)
 8002714:	2300      	movs	r3, #0
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	602b      	str	r3, [r5, #0]
 800271c:	f7fe f912 	bl	8000944 <_isatty>
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	d102      	bne.n	800272a <_isatty_r+0x1a>
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	b103      	cbz	r3, 800272a <_isatty_r+0x1a>
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	bd38      	pop	{r3, r4, r5, pc}
 800272c:	2000021c 	.word	0x2000021c

08002730 <_init>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	bf00      	nop
 8002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002736:	bc08      	pop	{r3}
 8002738:	469e      	mov	lr, r3
 800273a:	4770      	bx	lr

0800273c <_fini>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr
